{"version":3,"sources":["webpack:///./node_modules/ngx-mat-select-search/fesm5/ngx-mat-select-search.js","webpack:///./node_modules/ngx-mat-select-search/node_modules/tslib/tslib.es6.js","webpack:///./src/app/Portal/Pipes/limitto.pipe.ts","webpack:///./src/app/Portal/Pipes/menufilter.pipe.ts","webpack:///./src/app/Portal/Pipes/monthtoyear.pipe.ts","webpack:///./src/app/Portal/Pipes/pipe/pipe.module.ts","webpack:///./src/app/Portal/Pipes/pipe/selectfilter.pipe.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoD;AACoK;AACnI;AACH;AACJ;AAClB;AAC6C;AAClD;AACL;AACa;AACiC;AACrC;AACI;AACR;AACE;AACqB;AACjB;AACd;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,wDAAU;AAC9C,QAAQ,+DAAS;AACjB;AACA,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,wBAAwB,GAAG,wBAAwB,GAAG,wBAAwB;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kBAAkB;AACrD,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,0DAAY;AACzC,uCAAuC;AACvC,6BAA6B,oDAAe;AAC5C,gCAAgC,0DAAW;AAC3C;AACA,oCAAoC,0DAAa;AACjD;AACA,gCAAgC,8DAAM,sBAAsB,mBAAmB,EAAE,GAAG,iEAAS,sBAAsB,yBAAyB,EAAE,GAAG,2DAAG,qBAAqB,uBAAuB,EAAE,GAAG,iEAAS;AAC9M,gBAAgB,2DAAG;AACnB,qBAAqB,oDAAM;AAC3B;AACA;AACA,SAAS;AACT;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6DAAK,KAAK,iEAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,4DAAI;AACtB,kBAAkB,iEAAS;AAC3B;AACA;AACA,wDAAwD,iEAAS;AACjE,4CAA4C,yDAAyD,EAAE;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iEAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,uCAAuC,iEAAS;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iEAAS;AAC3B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,4BAA4B,8DAAM,qBAAqB,kBAAkB,EAAE,GAAG,iEAAS,qBAAqB,wBAAwB,EAAE,GAAG,iEAAS;AAClJ;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uDAAC,qBAAqB,uDAAC;AACrD,8BAA8B,0DAAI,qBAAqB,0DAAI;AAC3D,+BAA+B,2DAAK;AACpC,wEAAwE,0DAAI,sBAAsB,yDAAG;AACrG;AACA;AACA;AACA,0EAA0E,4DAAM;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8DAAQ,sBAAsB,gEAAU;AACtE;AACA,2EAA2E,6CAA6C,EAAE;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,8DAAM,mBAAmB,gDAAgD,EAAE,GAAG,2DAAG,cAAc,kDAAkD,EAAE,GAAG,iEAAS;AAC3M;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iEAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,qBAAqB,EAAE;AAC/G;AACA,uDAAuD,sDAAsD,EAAE;AAC/G,kEAAkE,sDAAsD,EAAE;AAC1H;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4FAA6B;AAC1D;AACA;AACA;AAC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","file":"default~Portal-Report-report-module~Portal-Workmanager-workmanager-module-es5.js","sourcesContent":["import { __decorate, __read, __param } from 'tslib';\nimport { Directive, EventEmitter, Inject, ChangeDetectorRef, Optional, Input, Output, ViewChild, ElementRef, ContentChild, HostBinding, Component, forwardRef, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, MatOption } from '@angular/material/core';\nimport { SELECT_PANEL_MAX_HEIGHT, MatSelect } from '@angular/material/select';\nimport { MatFormField } from '@angular/material/form-field';\nimport { A, Z, ZERO, NINE, SPACE, HOME, END, ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BehaviorSubject, combineLatest, Subject } from 'rxjs';\nimport { filter, switchMap, map, startWith, delay, takeUntil, take, tap } from 'rxjs/operators';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\nvar MatSelectSearchClearDirective = /** @class */ (function () {\n    function MatSelectSearchClearDirective() {\n    }\n    MatSelectSearchClearDirective = __decorate([\n        Directive({\n            selector: '[ngxMatSelectSearchClear]'\n        })\n    ], MatSelectSearchClearDirective);\n    return MatSelectSearchClearDirective;\n}());\n\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/* tslint:disable:member-ordering component-selector */\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <mat-option>\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         </mat-option>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\nvar MatSelectSearchComponent = /** @class */ (function () {\n    function MatSelectSearchComponent(matSelect, changeDetectorRef, _viewportRuler, matOption, liveAnnouncer, matFormField) {\n        var _this = this;\n        if (matOption === void 0) { matOption = null; }\n        if (matFormField === void 0) { matFormField = null; }\n        this.matSelect = matSelect;\n        this.changeDetectorRef = changeDetectorRef;\n        this._viewportRuler = _viewportRuler;\n        this.matOption = matOption;\n        this.liveAnnouncer = liveAnnouncer;\n        this.matFormField = matFormField;\n        /** Label of the search placeholder */\n        this.placeholderLabel = 'Suche';\n        /** Type of the search input field */\n        this.type = 'text';\n        /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n        this.noEntriesFoundLabel = 'Keine Optionen gefunden';\n        /**\n         *  Text that is appended to the currently active item label announced by screen readers,\n         *  informing the user of the current index, value and total options.\n         *  eg: Bank R (Germany) 1 of 6\n        */\n        this.indexAndLengthScreenReaderText = ' of ';\n        /**\n          * Whether or not the search field should be cleared after the dropdown menu is closed.\n          * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n          */\n        this.clearSearchInput = true;\n        /** Whether to show the search-in-progress indicator */\n        this.searching = false;\n        /** Disables initial focusing of the input field */\n        this.disableInitialFocus = false;\n        /** Enable clear input on escape pressed */\n        this.enableClearOnEscapePressed = false;\n        /**\n         * Prevents home / end key being propagated to mat-select,\n         * allowing to move the cursor within the search input instead of navigating the options\n         */\n        this.preventHomeEndKeyPropagation = false;\n        /** Disables scrolling to active options when option list changes. Useful for server-side search */\n        this.disableScrollToActiveOnOptionsChanged = false;\n        /** Adds 508 screen reader support for search box */\n        this.ariaLabel = 'dropdown search';\n        /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n        this.showToggleAllCheckbox = false;\n        /** select all checkbox checked state */\n        this.toggleAllCheckboxChecked = false;\n        /** select all checkbox indeterminate state */\n        this.toggleAllCheckboxIndeterminate = false;\n        /** Display a message in a tooltip on the toggle-all checkbox */\n        this.toggleAllCheckboxTooltipMessage = '';\n        /** Define the position of the tooltip on the toggle-all checkbox. */\n        this.toogleAllCheckboxTooltipPosition = 'below';\n        /** Output emitter to send to parent component with the toggle all boolean */\n        this.toggleAll = new EventEmitter();\n        this.onTouched = function (_) { };\n        this._options$ = new BehaviorSubject(null);\n        this._formControl = new FormControl('');\n        /** whether to show the no entries found message */\n        this._showNoEntriesFound$ = combineLatest([\n            this._formControl.valueChanges,\n            this._options$.pipe(filter(function (_options) { return !!_options; }), switchMap(function (_options) { return _options.changes; }), map(function (options) { return options.length; }), startWith(this.getOptionsLengthOffset()))\n        ]).pipe(map(function (_a) {\n            var _b = __read(_a, 2), value = _b[0], optionsLength = _b[1];\n            return _this.noEntriesFoundLabel && value\n                && optionsLength === _this.getOptionsLengthOffset();\n        }));\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n    }\n    MatSelectSearchComponent_1 = MatSelectSearchComponent;\n    Object.defineProperty(MatSelectSearchComponent.prototype, \"isInsideMatOption\", {\n        get: function () {\n            return !!this.matOption;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelectSearchComponent.prototype, \"value\", {\n        /** Current search value */\n        get: function () {\n            return this._formControl.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelectSearchComponent.prototype, \"_options\", {\n        get: function () {\n            return this._options$.getValue();\n        },\n        /** Reference to the MatSelect options */\n        set: function (_options) {\n            this._options$.next(_options);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MatSelectSearchComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        // set custom panel class\n        var panelClass = 'mat-select-search-panel';\n        if (this.matSelect.panelClass) {\n            if (Array.isArray(this.matSelect.panelClass)) {\n                this.matSelect.panelClass.push(panelClass);\n            }\n            else if (typeof this.matSelect.panelClass === 'string') {\n                this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n            }\n            else if (typeof this.matSelect.panelClass === 'object') {\n                this.matSelect.panelClass[panelClass] = true;\n            }\n        }\n        else {\n            this.matSelect.panelClass = panelClass;\n        }\n        // set custom mat-option class if the component was placed inside a mat-option\n        if (this.matOption) {\n            this.matOption.disabled = true;\n            this.matOption._getHostElement().classList.add('contains-mat-select-search');\n        }\n        else {\n            console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\n        }\n        // when the select dropdown panel is opened or closed\n        this.matSelect.openedChange\n            .pipe(delay(1), takeUntil(this._onDestroy))\n            .subscribe(function (opened) {\n            if (opened) {\n                _this.updateInputWidth();\n                // focus the search field when opening\n                if (!_this.disableInitialFocus) {\n                    _this._focus();\n                }\n            }\n            else {\n                // clear it when closing\n                if (_this.clearSearchInput) {\n                    _this._reset();\n                }\n            }\n        });\n        // set the first item active after the options changed\n        this.matSelect.openedChange\n            .pipe(take(1))\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(function () {\n            if (_this.matSelect._keyManager) {\n                _this.matSelect._keyManager.change.pipe(takeUntil(_this._onDestroy))\n                    .subscribe(function () { return _this.adjustScrollTopToFitActiveOptionIntoView(); });\n            }\n            else {\n                console.log('_keyManager was not initialized.');\n            }\n            _this._options = _this.matSelect.options;\n            // Closure variable for tracking the most recent first option.\n            // In order to avoid avoid causing the list to\n            // scroll to the top when options are added to the bottom of\n            // the list (eg: infinite scroll), we compare only\n            // the changes to the first options to determine if we\n            // should set the first item as active.\n            // This prevents unnecessary scrolling to the top of the list\n            // when options are appended, but allows the first item\n            // in the list to be set as active by default when there\n            // is no active selection\n            var previousFirstOption = _this._options.toArray()[_this.getOptionsLengthOffset()];\n            _this._options.changes\n                .pipe(takeUntil(_this._onDestroy))\n                .subscribe(function () {\n                // Convert the QueryList to an array\n                var options = _this._options.toArray();\n                var keyManager = _this.matSelect._keyManager;\n                if (keyManager && _this.matSelect.panelOpen) {\n                    // avoid \"expression has been changed\" error\n                    setTimeout(function () {\n                        // set first item active and input width\n                        // The true first item is offset by 1\n                        var currentFirstOption = options[_this.getOptionsLengthOffset()];\n                        // Check to see if the first option in these changes is different from the previous.\n                        var firstOptionIsChanged = !_this.matSelect.compareWith(previousFirstOption, currentFirstOption);\n                        // CASE: The first option is different now.\n                        // Indiciates we should set it as active and scroll to the top.\n                        if (firstOptionIsChanged) {\n                            keyManager.setFirstItemActive();\n                        }\n                        // Update our reference\n                        previousFirstOption = currentFirstOption;\n                        // wait for panel width changes\n                        setTimeout(function () {\n                            _this.updateInputWidth();\n                        });\n                        if (!_this.disableScrollToActiveOnOptionsChanged) {\n                            _this.adjustScrollTopToFitActiveOptionIntoView();\n                        }\n                    }, 1);\n                }\n            });\n        });\n        // add or remove css class depending on whether to show the no entries found message\n        // note: this is hacky\n        this._showNoEntriesFound$.pipe(takeUntil(this._onDestroy)).subscribe(function (showNoEntriesFound) {\n            // set no entries found class on mat option\n            if (_this.matOption) {\n                if (showNoEntriesFound) {\n                    _this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n                }\n                else {\n                    _this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n                }\n            }\n        });\n        // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n        this._viewportRuler.change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(function () {\n            if (_this.matSelect.panelOpen) {\n                _this.updateInputWidth();\n            }\n        });\n        this.initMultipleHandling();\n        this._options$.pipe(filter(function (options) { return !!options; }), switchMap(function (options) { return options.changes; }), takeUntil(this._onDestroy)).subscribe(function () {\n            // update view when available options change\n            _this.changeDetectorRef.markForCheck();\n        });\n    };\n    MatSelectSearchComponent.prototype._emitSelectAllBooleanToParent = function (state) {\n        this.toggleAll.emit(state);\n    };\n    MatSelectSearchComponent.prototype.ngOnDestroy = function () {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    };\n    MatSelectSearchComponent.prototype._isToggleAllCheckboxVisible = function () {\n        return this.matSelect.multiple && this.showToggleAllCheckbox;\n    };\n    /**\n     * Handles the key down event with MatSelect.\n     * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n     * @param event\n     */\n    MatSelectSearchComponent.prototype._handleKeydown = function (event) {\n        // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n        if ((event.key && event.key.length === 1) ||\n            (event.keyCode >= A && event.keyCode <= Z) ||\n            (event.keyCode >= ZERO && event.keyCode <= NINE) ||\n            (event.keyCode === SPACE)\n            || (this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END))) {\n            event.stopPropagation();\n        }\n        // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\n        if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\n            this._reset(true);\n            event.stopPropagation();\n        }\n    };\n    /**\n     * Handles the key up event with MatSelect.\n     * Allows e.g. the announcing of the currently activeDescendant by screen readers.\n     */\n    MatSelectSearchComponent.prototype._handleKeyup = function (event) {\n        if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n            var ariaActiveDescendantId_1 = this.matSelect._getAriaActiveDescendant();\n            var index = this._options.toArray().findIndex(function (item) { return item.id === ariaActiveDescendantId_1; });\n            if (index !== -1) {\n                var activeDescendant = this._options.toArray()[index];\n                this.liveAnnouncer.announce(activeDescendant.viewValue + ' '\n                    + this.getAriaIndex(index)\n                    + this.indexAndLengthScreenReaderText\n                    + this.getAriaLength());\n            }\n        }\n    };\n    /**\n     * Calculate the index of the current option, taking the offset to length into account.\n     * examples:\n     *    Case 1 [Search, 1, 2, 3] will have offset of 1, due to search and will read index of total.\n     *    Case 2 [1, 2, 3] will have offset of 0 and will read index +1 of total.\n     */\n    MatSelectSearchComponent.prototype.getAriaIndex = function (optionIndex) {\n        if (this.getOptionsLengthOffset() === 0) {\n            return optionIndex + 1;\n        }\n        return optionIndex;\n    };\n    /**\n     * Calculate the length of the options, taking the offset to length into account.\n     * examples:\n     *    Case 1 [Search, 1, 2, 3] will have length of options.length -1, due to search.\n     *    Case 2 [1, 2, 3] will have length of options.length.\n     */\n    MatSelectSearchComponent.prototype.getAriaLength = function () {\n        return this._options.toArray().length - this.getOptionsLengthOffset();\n    };\n    MatSelectSearchComponent.prototype.writeValue = function (value) {\n        this._lastExternalInputValue = value;\n        this._formControl.setValue(value);\n        this.changeDetectorRef.markForCheck();\n    };\n    MatSelectSearchComponent.prototype.onBlur = function () {\n        this.onTouched();\n    };\n    MatSelectSearchComponent.prototype.registerOnChange = function (fn) {\n        var _this = this;\n        this._formControl.valueChanges.pipe(filter(function (value) { return value !== _this._lastExternalInputValue; }), tap(function () { return _this._lastExternalInputValue = undefined; }), takeUntil(this._onDestroy)).subscribe(fn);\n    };\n    MatSelectSearchComponent.prototype.registerOnTouched = function (fn) {\n        this.onTouched = fn;\n    };\n    /**\n     * Focuses the search input field\n     */\n    MatSelectSearchComponent.prototype._focus = function () {\n        if (!this.searchSelectInput || !this.matSelect.panel) {\n            return;\n        }\n        // save and restore scrollTop of panel, since it will be reset by focus()\n        // note: this is hacky\n        var panel = this.matSelect.panel.nativeElement;\n        var scrollTop = panel.scrollTop;\n        // focus\n        this.searchSelectInput.nativeElement.focus();\n        panel.scrollTop = scrollTop;\n    };\n    /**\n     * Resets the current search value\n     * @param focus whether to focus after resetting\n     */\n    MatSelectSearchComponent.prototype._reset = function (focus) {\n        this._formControl.setValue('');\n        if (focus) {\n            this._focus();\n        }\n    };\n    /**\n     * Initializes handling <mat-select [multiple]=\"true\">\n     * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n     */\n    MatSelectSearchComponent.prototype.initMultipleHandling = function () {\n        var _this = this;\n        // if <mat-select [multiple]=\"true\">\n        // store previously selected values and restore them when they are deselected\n        // because the option is not available while we are currently filtering\n        this.matSelect.valueChange\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(function (values) {\n            if (_this.matSelect.multiple) {\n                var restoreSelectedValues_1 = false;\n                if (_this._formControl.value && _this._formControl.value.length\n                    && _this.previousSelectedValues && Array.isArray(_this.previousSelectedValues)) {\n                    if (!values || !Array.isArray(values)) {\n                        values = [];\n                    }\n                    var optionValues_1 = _this.matSelect.options.map(function (option) { return option.value; });\n                    _this.previousSelectedValues.forEach(function (previousValue) {\n                        if (!values.some(function (v) { return _this.matSelect.compareWith(v, previousValue); })\n                            && !optionValues_1.some(function (v) { return _this.matSelect.compareWith(v, previousValue); })) {\n                            // if a value that was selected before is deselected and not found in the options, it was deselected\n                            // due to the filtering, so we restore it.\n                            values.push(previousValue);\n                            restoreSelectedValues_1 = true;\n                        }\n                    });\n                }\n                if (restoreSelectedValues_1) {\n                    _this.matSelect._onChange(values);\n                }\n                _this.previousSelectedValues = values;\n            }\n        });\n        this.initMultiSelectedValues();\n    };\n    /**\n     * Scrolls the currently active option into the view if it is not yet visible.\n     */\n    MatSelectSearchComponent.prototype.adjustScrollTopToFitActiveOptionIntoView = function () {\n        if (this.matSelect.panel && this.matSelect.options.length > 0) {\n            var matOptionHeight = this.getMatOptionHeight();\n            var activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\n            var labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups);\n            // If the component is in a MatOption, the activeItemIndex will be offset by one.\n            var indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\n            var currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\n            var searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight;\n            var amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\n            var indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\n            if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\n                this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\n            }\n            else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\n                this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight\n                    - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\n            }\n        }\n    };\n    /**\n     *  Set the width of the innerSelectSearch to fit even custom scrollbars\n     *  And support all Operation Systems\n     */\n    MatSelectSearchComponent.prototype.updateInputWidth = function () {\n        if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n            return;\n        }\n        var element = this.innerSelectSearch.nativeElement;\n        var panelElement;\n        while (element = element.parentElement) {\n            if (element.classList.contains('mat-select-panel')) {\n                panelElement = element;\n                break;\n            }\n        }\n        if (panelElement) {\n            this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n        }\n    };\n    MatSelectSearchComponent.prototype.getMatOptionHeight = function () {\n        if (this.matSelect.options.length > 0) {\n            return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\n        }\n        return 0;\n    };\n    /**\n     *  Initialize this.previousSelectedValues once the first filtering occurs.\n     */\n    MatSelectSearchComponent.prototype.initMultiSelectedValues = function () {\n        var _this = this;\n        combineLatest([\n            this._formControl.valueChanges.pipe(startWith(this._formControl.value)),\n            this._options$.pipe(filter(function (options) { return !!options; }))\n        ]).pipe(takeUntil(this._onDestroy)).subscribe(function (_a) {\n            var _b = __read(_a, 2), value = _b[0], options = _b[1];\n            if (_this.matSelect.multiple && !value) {\n                _this.previousSelectedValues = options\n                    .filter(function (option) { return option.selected; })\n                    .map(function (option) { return option.value; });\n            }\n        });\n    };\n    /**\n     * Determine the offset to length that can be caused by the optional matOption used as a search input.\n     */\n    MatSelectSearchComponent.prototype.getOptionsLengthOffset = function () {\n        if (this.matOption) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    };\n    var MatSelectSearchComponent_1;\n    MatSelectSearchComponent.ctorParameters = function () { return [\n        { type: MatSelect, decorators: [{ type: Inject, args: [MatSelect,] }] },\n        { type: ChangeDetectorRef },\n        { type: ViewportRuler },\n        { type: MatOption, decorators: [{ type: Optional }, { type: Inject, args: [MatOption,] }] },\n        { type: LiveAnnouncer },\n        { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MatFormField,] }] }\n    ]; };\n    __decorate([\n        Input()\n    ], MatSelectSearchComponent.prototype, \"placeholderLabel\", void 0);\n    __decorate([\n        Input()\n    ], MatSelectSearchComponent.prototype, \"type\", void 0);\n    __decorate([\n        Input()\n    ], MatSelectSearchComponent.prototype, \"noEntriesFoundLabel\", void 0);\n    __decorate([\n        Input()\n    ], MatSelectSearchComponent.prototype, \"indexAndLengthScreenReaderText\", void 0);\n    __decorate([\n        Input()\n    ], MatSelectSearchComponent.prototype, \"clearSearchInput\", void 0);\n    __decorate([\n        Input()\n    ], MatSelectSearchComponent.prototype, \"searching\", void 0);\n    __decorate([\n        Input()\n    ], MatSelectSearchComponent.prototype, \"disableInitialFocus\", void 0);\n    __decorate([\n        Input()\n    ], MatSelectSearchComponent.prototype, \"enableClearOnEscapePressed\", void 0);\n    __decorate([\n        Input()\n    ], MatSelectSearchComponent.prototype, \"preventHomeEndKeyPropagation\", void 0);\n    __decorate([\n        Input()\n    ], MatSelectSearchComponent.prototype, \"disableScrollToActiveOnOptionsChanged\", void 0);\n    __decorate([\n        Input()\n    ], MatSelectSearchComponent.prototype, \"ariaLabel\", void 0);\n    __decorate([\n        Input()\n    ], MatSelectSearchComponent.prototype, \"showToggleAllCheckbox\", void 0);\n    __decorate([\n        Input()\n    ], MatSelectSearchComponent.prototype, \"toggleAllCheckboxChecked\", void 0);\n    __decorate([\n        Input()\n    ], MatSelectSearchComponent.prototype, \"toggleAllCheckboxIndeterminate\", void 0);\n    __decorate([\n        Input()\n    ], MatSelectSearchComponent.prototype, \"toggleAllCheckboxTooltipMessage\", void 0);\n    __decorate([\n        Input()\n    ], MatSelectSearchComponent.prototype, \"toogleAllCheckboxTooltipPosition\", void 0);\n    __decorate([\n        Output()\n    ], MatSelectSearchComponent.prototype, \"toggleAll\", void 0);\n    __decorate([\n        ViewChild('searchSelectInput', { read: ElementRef, static: true })\n    ], MatSelectSearchComponent.prototype, \"searchSelectInput\", void 0);\n    __decorate([\n        ViewChild('innerSelectSearch', { read: ElementRef, static: true })\n    ], MatSelectSearchComponent.prototype, \"innerSelectSearch\", void 0);\n    __decorate([\n        ContentChild(MatSelectSearchClearDirective, { static: false })\n    ], MatSelectSearchComponent.prototype, \"clearIcon\", void 0);\n    __decorate([\n        HostBinding('class.mat-select-search-inside-mat-option')\n    ], MatSelectSearchComponent.prototype, \"isInsideMatOption\", null);\n    MatSelectSearchComponent = MatSelectSearchComponent_1 = __decorate([\n        Component({\n            selector: 'ngx-mat-select-search',\n            template: \"<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\n\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\n<div\\n      #innerSelectSearch\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\n\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\n                [color]=\\\"matFormField?.color\\\"\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\n                [matTooltip]=\\\"toggleAllCheckboxTooltipMessage\\\"\\n                matTooltipClass=\\\"ngx-mat-select-search-toggle-all-tooltip\\\"\\n                [matTooltipPosition]=\\\"toogleAllCheckboxTooltipPosition\\\"\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\n  ></mat-checkbox>\\n\\n  <input matInput\\n         class=\\\"mat-select-search-input\\\"\\n         autocomplete=\\\"off\\\"\\n         [type]=\\\"type\\\"\\n         [formControl]=\\\"_formControl\\\"\\n         #searchSelectInput\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\n         (keyup)=\\\"_handleKeyup($event)\\\"\\n         (blur)=\\\"onBlur()\\\"\\n         [placeholder]=\\\"placeholderLabel\\\"\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\n  />\\n  <mat-spinner *ngIf=\\\"searching\\\"\\n          class=\\\"mat-select-search-spinner\\\"\\n          diameter=\\\"16\\\"></mat-spinner>\\n\\n  <button mat-button\\n          *ngIf=\\\"value && !searching\\\"\\n          mat-icon-button\\n          aria-label=\\\"Clear\\\"\\n          (click)=\\\"_reset(true)\\\"\\n          class=\\\"mat-select-search-clear\\\">\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\n    <ng-template #defaultIcon>\\n      <mat-icon>close</mat-icon>\\n    </ng-template>\\n  </button>\\n\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\n\\n</div>\\n\\n<div *ngIf=\\\"_showNoEntriesFound$ | async\\\"\\n     class=\\\"mat-select-search-no-entries-found\\\">\\n  {{noEntriesFoundLabel}}\\n</div>\\n<!--\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\n\\nUse of this source code is governed by an MIT-style license that can be\\nfound in the LICENSE file at https://angular.io/license\\n-->\\n\",\n            providers: [\n                {\n                    provide: NG_VALUE_ACCESSOR,\n                    useExisting: forwardRef(function () { return MatSelectSearchComponent_1; }),\n                    multi: true\n                }\n            ],\n            changeDetection: ChangeDetectionStrategy.OnPush,\n            styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-inner .mat-input-element{flex-basis:auto}.mat-select-search-inner .mat-input-element:-ms-input-placeholder{-ms-user-select:text}::ng-deep .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input{padding:16px 36px 16px 16px;box-sizing:border-box}.mat-select-search-no-entries-found{padding:16px}.mat-select-search-clear{position:absolute;right:4px;top:5px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host.mat-select-search-inside-mat-option .mat-select-search-input{padding-top:0;padding-bottom:0;height:3em;line-height:3em}:host.mat-select-search-inside-mat-option .mat-select-search-clear{top:3px}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox{padding-left:16px;padding-bottom:2px}\"]\n        }),\n        __param(0, Inject(MatSelect)),\n        __param(3, Optional()), __param(3, Inject(MatOption)),\n        __param(5, Optional()), __param(5, Inject(MatFormField))\n    ], MatSelectSearchComponent);\n    return MatSelectSearchComponent;\n}());\n\n/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MatSelectSearchVersion = '3.0.1';\nvar NgxMatSelectSearchModule = /** @class */ (function () {\n    function NgxMatSelectSearchModule() {\n    }\n    NgxMatSelectSearchModule = __decorate([\n        NgModule({\n            imports: [\n                CommonModule,\n                ReactiveFormsModule,\n                MatButtonModule,\n                MatCheckboxModule,\n                MatIconModule,\n                MatInputModule,\n                MatProgressSpinnerModule,\n                MatTooltipModule\n            ],\n            declarations: [\n                MatSelectSearchComponent,\n                MatSelectSearchClearDirective\n            ],\n            exports: [\n                MatSelectSearchComponent,\n                MatSelectSearchClearDirective\n            ]\n        })\n    ], NgxMatSelectSearchModule);\n    return NgxMatSelectSearchModule;\n}());\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatSelectSearchComponent, MatSelectSearchVersion, NgxMatSelectSearchModule, MatSelectSearchClearDirective as ɵa };\n//# sourceMappingURL=ngx-mat-select-search.js.map\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'limitto'\r\n})\r\nexport class LimittoPipe implements PipeTransform {\r\n\r\n /* transform(value: any, ...args: any[]): any {\r\n    return null;\r\n  }*/\r\n\r\n  transform(value: any, args?: any): any {\r\n    if (args === undefined) {\r\n      return value;\r\n    }\r\n\r\n    if (value.length > args) {\r\n      return value.substring(0, args) + '....';\r\n    } else {\r\n      return value;\r\n    }\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'menufilter'\n})\nexport class MenufilterPipe implements PipeTransform {\n\n  transform(value: any): any {\n    if (value == \"Super Admin\" || value == \"Manager\") {\n      return \n    }\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'monthtoyear'\r\n})\r\nexport class MonthtoyearPipe implements PipeTransform {\r\n\r\n  transform(value: any): any {\r\n    if (value > 0) {\r\n      var x = value , months = x % 12, years = (x - months) / 12;\r\n      if(value<12){\r\n        return months + ' Months'\r\n      }else{\r\n        if(years > 0 && months > 0 ){\r\n          return years + ' Year,  ' + months + ' Months'\r\n        }else{\r\n          return years + ' Year'\r\n        }\r\n      }\r\n    }else{\r\n      return value;\r\n    }   \r\n  }\r\n\r\n}\r\n","import { MenufilterPipe } from './../menufilter.pipe';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SelectfilterPipe } from './selectfilter.pipe';\r\nimport { LimittoPipe } from '../limitto.pipe';\r\nimport { MonthtoyearPipe } from '../monthtoyear.pipe';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [MenufilterPipe, SelectfilterPipe,LimittoPipe,MonthtoyearPipe],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [MenufilterPipe, SelectfilterPipe,LimittoPipe,MonthtoyearPipe]\r\n})\r\nexport class PipeModule { }\r\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'selectfilter'\n})\nexport class SelectfilterPipe implements PipeTransform {\n\n  transform(arr: any[], searchText: string, fieldName?: string): any[] {\n    if (!arr) return [];\n    if (!searchText) return arr;\n    searchText = searchText.toLowerCase();\n    return arr.filter((it: any) => {\n      if (typeof it == 'string') {\n        return it.toLowerCase().includes(searchText);\n      } else if (typeof it == 'number') {\n        return it.toString().toLowerCase().includes(searchText);\n      } else {\n        return it[fieldName].toLowerCase().includes(searchText);\n      }\n\n    });\n  }\n\n}\n"],"sourceRoot":""}