{"version":3,"sources":["webpack:///./node_modules/dom-to-image/src/dom-to-image.js","webpack:///./src/app/Portal/Report/amazonreport/amazonreport.component.html","webpack:///./src/app/Portal/Report/billdepositreport/billdepositreport.component.html","webpack:///./src/app/Portal/Report/billreversal/billreversal.component.html","webpack:///./src/app/Portal/Report/collection/collection.component.html","webpack:///./src/app/Portal/Report/creditreport/creditreport.component.html","webpack:///./src/app/Portal/Report/due/due.component.html","webpack:///./src/app/Portal/Report/payu/payu.component.html","webpack:///./src/app/Portal/Report/reversed/reversed.component.html","webpack:///./src/app/Portal/Report/usercollection/usercollection.component.html","webpack:///./src/app/Portal/Report/userwork/userwork.component.html","webpack:///./src/app/Portal/Report/amazonreport/amazonreport.component.css","webpack:///./src/app/Portal/Report/amazonreport/amazonreport.component.ts","webpack:///./src/app/Portal/Report/billdepositreport/billdepositreport.component.css","webpack:///./src/app/Portal/Report/billdepositreport/billdepositreport.component.ts","webpack:///./src/app/Portal/Report/billreversal/billreversal.component.css","webpack:///./src/app/Portal/Report/billreversal/billreversal.component.ts","webpack:///./src/app/Portal/Report/collection/collection.component.css","webpack:///./src/app/Portal/Report/collection/collection.component.ts","webpack:///./src/app/Portal/Report/creditreport/creditreport.component.css","webpack:///./src/app/Portal/Report/creditreport/creditreport.component.ts","webpack:///./src/app/Portal/Report/due/due.component.css","webpack:///./src/app/Portal/Report/due/due.component.ts","webpack:///./src/app/Portal/Report/payu/payu.component.css","webpack:///./src/app/Portal/Report/payu/payu.component.ts","webpack:///./src/app/Portal/Report/report.module.ts","webpack:///./src/app/Portal/Report/report.routing.ts","webpack:///./src/app/Portal/Report/reversed/reversed.component.css","webpack:///./src/app/Portal/Report/reversed/reversed.component.ts","webpack:///./src/app/Portal/Report/usercollection/usercollection.component.css","webpack:///./src/app/Portal/Report/usercollection/usercollection.component.ts","webpack:///./src/app/Portal/Report/userwork/userwork.component.css","webpack:///./src/app/Portal/Report/userwork/userwork.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAQ,IAA6B;AACrC;AACA;AACA,QAAQ,EAA+B;;;AAGvC;AACA,eAAe,KAAK;AACpB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA,eAAe,KAAK;AACpB,eAAe,OAAO,oCAAoC;AAC1D,gBAAgB,QAAQ;AACxB;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,eAAe,KAAK;AACpB,eAAe,OAAO,oCAAoC;AAC1D,gBAAgB,QAAQ;AACxB;AACA;AACA,uCAAuC;AACvC;AACA;AACA,aAAa;AACb;;AAEA;AACA,eAAe,KAAK;AACpB,eAAe,OAAO,oCAAoC;AAC1D,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,eAAe,KAAK;AACpB,eAAe,OAAO,oCAAoC;AAC1D,gBAAgB,QAAQ;AACxB;AACA;AACA,uCAAuC;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oEAAoE,gBAAgB;;AAEpF;AACA;AACA,8EAA8E;AAC9E;;AAEA;;AAEA;AACA;AACA,wCAAwC,QAAQ;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,2CAA2C;AAC3C,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,+BAA+B,YAAY;AAC3C;;AAEA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,sCAAsC;AACtC;;AAEA;AACA,6CAA6C;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB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","file":"Portal-Report-report-module-es2015.js","sourcesContent":["(function (global) {\n    'use strict';\n\n    var util = newUtil();\n    var inliner = newInliner();\n    var fontFaces = newFontFaces();\n    var images = newImages();\n\n    // Default impl options\n    var defaultOptions = {\n        // Default is to fail on error, no placeholder\n        imagePlaceholder: undefined,\n        // Default cache bust is false, it will use the cache\n        cacheBust: false\n    };\n\n    var domtoimage = {\n        toSvg: toSvg,\n        toPng: toPng,\n        toJpeg: toJpeg,\n        toBlob: toBlob,\n        toPixelData: toPixelData,\n        impl: {\n            fontFaces: fontFaces,\n            images: images,\n            util: util,\n            inliner: inliner,\n            options: {}\n        }\n    };\n\n    if (typeof module !== 'undefined')\n        module.exports = domtoimage;\n    else\n        global.domtoimage = domtoimage;\n\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options\n     * @param {Function} options.filter - Should return true if passed node should be included in the output\n     *          (excluding node means excluding it's children as well). Not called on the root node.\n     * @param {String} options.bgcolor - color for the background, any valid CSS color value.\n     * @param {Number} options.width - width to be applied to node before rendering.\n     * @param {Number} options.height - height to be applied to node before rendering.\n     * @param {Object} options.style - an object whose properties to be copied to node's style before rendering.\n     * @param {Number} options.quality - a Number between 0 and 1 indicating image quality (applicable to JPEG only),\n                defaults to 1.0.\n     * @param {String} options.imagePlaceholder - dataURL to use as a placeholder for failed images, default behaviour is to fail fast on images we can't fetch\n     * @param {Boolean} options.cacheBust - set to true to cache bust by appending the time to the request url\n     * @return {Promise} - A promise that is fulfilled with a SVG image data URL\n     * */\n    function toSvg(node, options) {\n        options = options || {};\n        copyOptions(options);\n        return Promise.resolve(node)\n            .then(function (node) {\n                return cloneNode(node, options.filter, true);\n            })\n            .then(embedFonts)\n            .then(inlineImages)\n            .then(applyOptions)\n            .then(function (clone) {\n                return makeSvgDataUri(clone,\n                    options.width || util.width(node),\n                    options.height || util.height(node)\n                );\n            });\n\n        function applyOptions(clone) {\n            if (options.bgcolor) clone.style.backgroundColor = options.bgcolor;\n\n            if (options.width) clone.style.width = options.width + 'px';\n            if (options.height) clone.style.height = options.height + 'px';\n\n            if (options.style)\n                Object.keys(options.style).forEach(function (property) {\n                    clone.style[property] = options.style[property];\n                });\n\n            return clone;\n        }\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a Uint8Array containing RGBA pixel data.\n     * */\n    function toPixelData(node, options) {\n        return draw(node, options || {})\n            .then(function (canvas) {\n                return canvas.getContext('2d').getImageData(\n                    0,\n                    0,\n                    util.width(node),\n                    util.height(node)\n                ).data;\n            });\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a PNG image data URL\n     * */\n    function toPng(node, options) {\n        return draw(node, options || {})\n            .then(function (canvas) {\n                return canvas.toDataURL();\n            });\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a JPEG image data URL\n     * */\n    function toJpeg(node, options) {\n        options = options || {};\n        return draw(node, options)\n            .then(function (canvas) {\n                return canvas.toDataURL('image/jpeg', options.quality || 1.0);\n            });\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a PNG image blob\n     * */\n    function toBlob(node, options) {\n        return draw(node, options || {})\n            .then(util.canvasToBlob);\n    }\n\n    function copyOptions(options) {\n        // Copy options to impl options for use in impl\n        if(typeof(options.imagePlaceholder) === 'undefined') {\n            domtoimage.impl.options.imagePlaceholder = defaultOptions.imagePlaceholder;\n        } else {\n            domtoimage.impl.options.imagePlaceholder = options.imagePlaceholder;\n        }\n\n        if(typeof(options.cacheBust) === 'undefined') {\n            domtoimage.impl.options.cacheBust = defaultOptions.cacheBust;\n        } else {\n            domtoimage.impl.options.cacheBust = options.cacheBust;\n        }\n    }\n\n    function draw(domNode, options) {\n        return toSvg(domNode, options)\n            .then(util.makeImage)\n            .then(util.delay(100))\n            .then(function (image) {\n                var canvas = newCanvas(domNode);\n                canvas.getContext('2d').drawImage(image, 0, 0);\n                return canvas;\n            });\n\n        function newCanvas(domNode) {\n            var canvas = document.createElement('canvas');\n            canvas.width = options.width || util.width(domNode);\n            canvas.height = options.height || util.height(domNode);\n\n            if (options.bgcolor) {\n                var ctx = canvas.getContext('2d');\n                ctx.fillStyle = options.bgcolor;\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n            }\n\n            return canvas;\n        }\n    }\n\n    function cloneNode(node, filter, root) {\n        if (!root && filter && !filter(node)) return Promise.resolve();\n\n        return Promise.resolve(node)\n            .then(makeNodeCopy)\n            .then(function (clone) {\n                return cloneChildren(node, clone, filter);\n            })\n            .then(function (clone) {\n                return processClone(node, clone);\n            });\n\n        function makeNodeCopy(node) {\n            if (node instanceof HTMLCanvasElement) return util.makeImage(node.toDataURL());\n            return node.cloneNode(false);\n        }\n\n        function cloneChildren(original, clone, filter) {\n            var children = original.childNodes;\n            if (children.length === 0) return Promise.resolve(clone);\n\n            return cloneChildrenInOrder(clone, util.asArray(children), filter)\n                .then(function () {\n                    return clone;\n                });\n\n            function cloneChildrenInOrder(parent, children, filter) {\n                var done = Promise.resolve();\n                children.forEach(function (child) {\n                    done = done\n                        .then(function () {\n                            return cloneNode(child, filter);\n                        })\n                        .then(function (childClone) {\n                            if (childClone) parent.appendChild(childClone);\n                        });\n                });\n                return done;\n            }\n        }\n\n        function processClone(original, clone) {\n            if (!(clone instanceof Element)) return clone;\n\n            return Promise.resolve()\n                .then(cloneStyle)\n                .then(clonePseudoElements)\n                .then(copyUserInput)\n                .then(fixSvg)\n                .then(function () {\n                    return clone;\n                });\n\n            function cloneStyle() {\n                copyStyle(window.getComputedStyle(original), clone.style);\n\n                function copyStyle(source, target) {\n                    if (source.cssText) target.cssText = source.cssText;\n                    else copyProperties(source, target);\n\n                    function copyProperties(source, target) {\n                        util.asArray(source).forEach(function (name) {\n                            target.setProperty(\n                                name,\n                                source.getPropertyValue(name),\n                                source.getPropertyPriority(name)\n                            );\n                        });\n                    }\n                }\n            }\n\n            function clonePseudoElements() {\n                [':before', ':after'].forEach(function (element) {\n                    clonePseudoElement(element);\n                });\n\n                function clonePseudoElement(element) {\n                    var style = window.getComputedStyle(original, element);\n                    var content = style.getPropertyValue('content');\n\n                    if (content === '' || content === 'none') return;\n\n                    var className = util.uid();\n                    clone.className = clone.className + ' ' + className;\n                    var styleElement = document.createElement('style');\n                    styleElement.appendChild(formatPseudoElementStyle(className, element, style));\n                    clone.appendChild(styleElement);\n\n                    function formatPseudoElementStyle(className, element, style) {\n                        var selector = '.' + className + ':' + element;\n                        var cssText = style.cssText ? formatCssText(style) : formatCssProperties(style);\n                        return document.createTextNode(selector + '{' + cssText + '}');\n\n                        function formatCssText(style) {\n                            var content = style.getPropertyValue('content');\n                            return style.cssText + ' content: ' + content + ';';\n                        }\n\n                        function formatCssProperties(style) {\n\n                            return util.asArray(style)\n                                .map(formatProperty)\n                                .join('; ') + ';';\n\n                            function formatProperty(name) {\n                                return name + ': ' +\n                                    style.getPropertyValue(name) +\n                                    (style.getPropertyPriority(name) ? ' !important' : '');\n                            }\n                        }\n                    }\n                }\n            }\n\n            function copyUserInput() {\n                if (original instanceof HTMLTextAreaElement) clone.innerHTML = original.value;\n                if (original instanceof HTMLInputElement) clone.setAttribute(\"value\", original.value);\n            }\n\n            function fixSvg() {\n                if (!(clone instanceof SVGElement)) return;\n                clone.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n\n                if (!(clone instanceof SVGRectElement)) return;\n                ['width', 'height'].forEach(function (attribute) {\n                    var value = clone.getAttribute(attribute);\n                    if (!value) return;\n\n                    clone.style.setProperty(attribute, value);\n                });\n            }\n        }\n    }\n\n    function embedFonts(node) {\n        return fontFaces.resolveAll()\n            .then(function (cssText) {\n                var styleNode = document.createElement('style');\n                node.appendChild(styleNode);\n                styleNode.appendChild(document.createTextNode(cssText));\n                return node;\n            });\n    }\n\n    function inlineImages(node) {\n        return images.inlineAll(node)\n            .then(function () {\n                return node;\n            });\n    }\n\n    function makeSvgDataUri(node, width, height) {\n        return Promise.resolve(node)\n            .then(function (node) {\n                node.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');\n                return new XMLSerializer().serializeToString(node);\n            })\n            .then(util.escapeXhtml)\n            .then(function (xhtml) {\n                return '<foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">' + xhtml + '</foreignObject>';\n            })\n            .then(function (foreignObject) {\n                return '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + width + '\" height=\"' + height + '\">' +\n                    foreignObject + '</svg>';\n            })\n            .then(function (svg) {\n                return 'data:image/svg+xml;charset=utf-8,' + svg;\n            });\n    }\n\n    function newUtil() {\n        return {\n            escape: escape,\n            parseExtension: parseExtension,\n            mimeType: mimeType,\n            dataAsUrl: dataAsUrl,\n            isDataUrl: isDataUrl,\n            canvasToBlob: canvasToBlob,\n            resolveUrl: resolveUrl,\n            getAndEncode: getAndEncode,\n            uid: uid(),\n            delay: delay,\n            asArray: asArray,\n            escapeXhtml: escapeXhtml,\n            makeImage: makeImage,\n            width: width,\n            height: height\n        };\n\n        function mimes() {\n            /*\n             * Only WOFF and EOT mime types for fonts are 'real'\n             * see http://www.iana.org/assignments/media-types/media-types.xhtml\n             */\n            var WOFF = 'application/font-woff';\n            var JPEG = 'image/jpeg';\n\n            return {\n                'woff': WOFF,\n                'woff2': WOFF,\n                'ttf': 'application/font-truetype',\n                'eot': 'application/vnd.ms-fontobject',\n                'png': 'image/png',\n                'jpg': JPEG,\n                'jpeg': JPEG,\n                'gif': 'image/gif',\n                'tiff': 'image/tiff',\n                'svg': 'image/svg+xml'\n            };\n        }\n\n        function parseExtension(url) {\n            var match = /\\.([^\\.\\/]*?)$/g.exec(url);\n            if (match) return match[1];\n            else return '';\n        }\n\n        function mimeType(url) {\n            var extension = parseExtension(url).toLowerCase();\n            return mimes()[extension] || '';\n        }\n\n        function isDataUrl(url) {\n            return url.search(/^(data:)/) !== -1;\n        }\n\n        function toBlob(canvas) {\n            return new Promise(function (resolve) {\n                var binaryString = window.atob(canvas.toDataURL().split(',')[1]);\n                var length = binaryString.length;\n                var binaryArray = new Uint8Array(length);\n\n                for (var i = 0; i < length; i++)\n                    binaryArray[i] = binaryString.charCodeAt(i);\n\n                resolve(new Blob([binaryArray], {\n                    type: 'image/png'\n                }));\n            });\n        }\n\n        function canvasToBlob(canvas) {\n            if (canvas.toBlob)\n                return new Promise(function (resolve) {\n                    canvas.toBlob(resolve);\n                });\n\n            return toBlob(canvas);\n        }\n\n        function resolveUrl(url, baseUrl) {\n            var doc = document.implementation.createHTMLDocument();\n            var base = doc.createElement('base');\n            doc.head.appendChild(base);\n            var a = doc.createElement('a');\n            doc.body.appendChild(a);\n            base.href = baseUrl;\n            a.href = url;\n            return a.href;\n        }\n\n        function uid() {\n            var index = 0;\n\n            return function () {\n                return 'u' + fourRandomChars() + index++;\n\n                function fourRandomChars() {\n                    /* see http://stackoverflow.com/a/6248722/2519373 */\n                    return ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);\n                }\n            };\n        }\n\n        function makeImage(uri) {\n            return new Promise(function (resolve, reject) {\n                var image = new Image();\n                image.onload = function () {\n                    resolve(image);\n                };\n                image.onerror = reject;\n                image.src = uri;\n            });\n        }\n\n        function getAndEncode(url) {\n            var TIMEOUT = 30000;\n            if(domtoimage.impl.options.cacheBust) {\n                // Cache bypass so we dont have CORS issues with cached images\n                // Source: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n                url += ((/\\?/).test(url) ? \"&\" : \"?\") + (new Date()).getTime();\n            }\n\n            return new Promise(function (resolve) {\n                var request = new XMLHttpRequest();\n\n                request.onreadystatechange = done;\n                request.ontimeout = timeout;\n                request.responseType = 'blob';\n                request.timeout = TIMEOUT;\n                request.open('GET', url, true);\n                request.send();\n\n                var placeholder;\n                if(domtoimage.impl.options.imagePlaceholder) {\n                    var split = domtoimage.impl.options.imagePlaceholder.split(/,/);\n                    if(split && split[1]) {\n                        placeholder = split[1];\n                    }\n                }\n\n                function done() {\n                    if (request.readyState !== 4) return;\n\n                    if (request.status !== 200) {\n                        if(placeholder) {\n                            resolve(placeholder);\n                        } else {\n                            fail('cannot fetch resource: ' + url + ', status: ' + request.status);\n                        }\n\n                        return;\n                    }\n\n                    var encoder = new FileReader();\n                    encoder.onloadend = function () {\n                        var content = encoder.result.split(/,/)[1];\n                        resolve(content);\n                    };\n                    encoder.readAsDataURL(request.response);\n                }\n\n                function timeout() {\n                    if(placeholder) {\n                        resolve(placeholder);\n                    } else {\n                        fail('timeout of ' + TIMEOUT + 'ms occured while fetching resource: ' + url);\n                    }\n                }\n\n                function fail(message) {\n                    console.error(message);\n                    resolve('');\n                }\n            });\n        }\n\n        function dataAsUrl(content, type) {\n            return 'data:' + type + ';base64,' + content;\n        }\n\n        function escape(string) {\n            return string.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n        }\n\n        function delay(ms) {\n            return function (arg) {\n                return new Promise(function (resolve) {\n                    setTimeout(function () {\n                        resolve(arg);\n                    }, ms);\n                });\n            };\n        }\n\n        function asArray(arrayLike) {\n            var array = [];\n            var length = arrayLike.length;\n            for (var i = 0; i < length; i++) array.push(arrayLike[i]);\n            return array;\n        }\n\n        function escapeXhtml(string) {\n            return string.replace(/#/g, '%23').replace(/\\n/g, '%0A');\n        }\n\n        function width(node) {\n            var leftBorder = px(node, 'border-left-width');\n            var rightBorder = px(node, 'border-right-width');\n            return node.scrollWidth + leftBorder + rightBorder;\n        }\n\n        function height(node) {\n            var topBorder = px(node, 'border-top-width');\n            var bottomBorder = px(node, 'border-bottom-width');\n            return node.scrollHeight + topBorder + bottomBorder;\n        }\n\n        function px(node, styleProperty) {\n            var value = window.getComputedStyle(node).getPropertyValue(styleProperty);\n            return parseFloat(value.replace('px', ''));\n        }\n    }\n\n    function newInliner() {\n        var URL_REGEX = /url\\(['\"]?([^'\"]+?)['\"]?\\)/g;\n\n        return {\n            inlineAll: inlineAll,\n            shouldProcess: shouldProcess,\n            impl: {\n                readUrls: readUrls,\n                inline: inline\n            }\n        };\n\n        function shouldProcess(string) {\n            return string.search(URL_REGEX) !== -1;\n        }\n\n        function readUrls(string) {\n            var result = [];\n            var match;\n            while ((match = URL_REGEX.exec(string)) !== null) {\n                result.push(match[1]);\n            }\n            return result.filter(function (url) {\n                return !util.isDataUrl(url);\n            });\n        }\n\n        function inline(string, url, baseUrl, get) {\n            return Promise.resolve(url)\n                .then(function (url) {\n                    return baseUrl ? util.resolveUrl(url, baseUrl) : url;\n                })\n                .then(get || util.getAndEncode)\n                .then(function (data) {\n                    return util.dataAsUrl(data, util.mimeType(url));\n                })\n                .then(function (dataUrl) {\n                    return string.replace(urlAsRegex(url), '$1' + dataUrl + '$3');\n                });\n\n            function urlAsRegex(url) {\n                return new RegExp('(url\\\\([\\'\"]?)(' + util.escape(url) + ')([\\'\"]?\\\\))', 'g');\n            }\n        }\n\n        function inlineAll(string, baseUrl, get) {\n            if (nothingToInline()) return Promise.resolve(string);\n\n            return Promise.resolve(string)\n                .then(readUrls)\n                .then(function (urls) {\n                    var done = Promise.resolve(string);\n                    urls.forEach(function (url) {\n                        done = done.then(function (string) {\n                            return inline(string, url, baseUrl, get);\n                        });\n                    });\n                    return done;\n                });\n\n            function nothingToInline() {\n                return !shouldProcess(string);\n            }\n        }\n    }\n\n    function newFontFaces() {\n        return {\n            resolveAll: resolveAll,\n            impl: {\n                readAll: readAll\n            }\n        };\n\n        function resolveAll() {\n            return readAll(document)\n                .then(function (webFonts) {\n                    return Promise.all(\n                        webFonts.map(function (webFont) {\n                            return webFont.resolve();\n                        })\n                    );\n                })\n                .then(function (cssStrings) {\n                    return cssStrings.join('\\n');\n                });\n        }\n\n        function readAll() {\n            return Promise.resolve(util.asArray(document.styleSheets))\n                .then(getCssRules)\n                .then(selectWebFontRules)\n                .then(function (rules) {\n                    return rules.map(newWebFont);\n                });\n\n            function selectWebFontRules(cssRules) {\n                return cssRules\n                    .filter(function (rule) {\n                        return rule.type === CSSRule.FONT_FACE_RULE;\n                    })\n                    .filter(function (rule) {\n                        return inliner.shouldProcess(rule.style.getPropertyValue('src'));\n                    });\n            }\n\n            function getCssRules(styleSheets) {\n                var cssRules = [];\n                styleSheets.forEach(function (sheet) {\n                    try {\n                        util.asArray(sheet.cssRules || []).forEach(cssRules.push.bind(cssRules));\n                    } catch (e) {\n                        console.log('Error while reading CSS rules from ' + sheet.href, e.toString());\n                    }\n                });\n                return cssRules;\n            }\n\n            function newWebFont(webFontRule) {\n                return {\n                    resolve: function resolve() {\n                        var baseUrl = (webFontRule.parentStyleSheet || {}).href;\n                        return inliner.inlineAll(webFontRule.cssText, baseUrl);\n                    },\n                    src: function () {\n                        return webFontRule.style.getPropertyValue('src');\n                    }\n                };\n            }\n        }\n    }\n\n    function newImages() {\n        return {\n            inlineAll: inlineAll,\n            impl: {\n                newImage: newImage\n            }\n        };\n\n        function newImage(element) {\n            return {\n                inline: inline\n            };\n\n            function inline(get) {\n                if (util.isDataUrl(element.src)) return Promise.resolve();\n\n                return Promise.resolve(element.src)\n                    .then(get || util.getAndEncode)\n                    .then(function (data) {\n                        return util.dataAsUrl(data, util.mimeType(element.src));\n                    })\n                    .then(function (dataUrl) {\n                        return new Promise(function (resolve, reject) {\n                            element.onload = resolve;\n                            element.onerror = reject;\n                            element.src = dataUrl;\n                        });\n                    });\n            }\n        }\n\n        function inlineAll(node) {\n            if (!(node instanceof Element)) return Promise.resolve(node);\n\n            return inlineBackground(node)\n                .then(function () {\n                    if (node instanceof HTMLImageElement)\n                        return newImage(node).inline();\n                    else\n                        return Promise.all(\n                            util.asArray(node.childNodes).map(function (child) {\n                                return inlineAll(child);\n                            })\n                        );\n                });\n\n            function inlineBackground(node) {\n                var background = node.style.getPropertyValue('background');\n\n                if (!background) return Promise.resolve(node);\n\n                return inliner.inlineAll(background)\n                    .then(function (inlined) {\n                        node.style.setProperty(\n                            'background',\n                            inlined,\n                            node.style.getPropertyPriority('background')\n                        );\n                    })\n                    .then(function () {\n                        return node;\n                    });\n            }\n        }\n    }\n})(this);\n","module.exports = \"<mat-card>\\n    <mat-card-content>\\n        <div fxLayout=\\\"row wrap\\\">\\n            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                <div fxLayout=\\\"row wrap\\\">\\n                    <div fxFlex.gt-sm=\\\"25\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <input matInput [matDatepicker]=\\\"picker\\\" [(ngModel)]=\\\"lists.from\\\" (focus)=\\\"picker.open()\\\"\\n                                placeholder=\\\"Choose a Start date\\\">\\n                            <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n                            <mat-datepicker #picker></mat-datepicker>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <input matInput [matDatepicker]=\\\"picker1\\\" [(ngModel)]=\\\"lists.to\\\" (focus)=\\\"picker1.open()\\\"\\n                                placeholder=\\\"Choose an End date\\\">\\n                            <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\n                            <mat-datepicker #picker1></mat-datepicker>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <input matInput [matDatepicker]=\\\"picker2\\\" [(ngModel)]=\\\"lists.duedate\\\"\\n                                (focus)=\\\"picker2.open()\\\" placeholder=\\\"Choose a Due date\\\">\\n                            <mat-datepicker-toggle matSuffix [for]=\\\"picker2\\\"></mat-datepicker-toggle>\\n                            <mat-datepicker #picker2></mat-datepicker>\\n                        </mat-form-field>\\n                    </div>\\n                    <!-- <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" *ngIf=\\\"lists.userType!='Agent'\\\">\\n                        <mat-form-field>\\n                            <mat-label>Select User Name</mat-label>\\n                            <mat-select [(ngModel)]=\\\"lists.agentid\\\">\\n                                <mat-option>--</mat-option>\\n                                <mat-option *ngFor=\\\"let u of lists.Userlist\\\" [value]=\\\"u.id\\\">\\n                                    {{u.userinfo}}\\n                                </mat-option>\\n                            </mat-select>\\n                        </mat-form-field>\\n                    </div> -->\\n\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" *ngIf=\\\"lists.userType!='Agent'\\\">\\n                        <mat-form-field>\\n                            <mat-label>Select User Name</mat-label>\\n                            <mat-select [(ngModel)]=\\\"lists.agentid\\\">\\n                                <mat-option>\\n                                    <ngx-mat-select-search [(ngModel)]=\\\"lists.searchuser\\\"\\n                                        [ngModelOptions]=\\\"{standalone: true}\\\" [placeholderLabel]=\\\"'Search...'\\\"\\n                                        name=\\\"search\\\"></ngx-mat-select-search>\\n                                </mat-option>\\n                                <mat-option *ngFor=\\\"let u of lists.Userlist|selectfilter:lists.searchuser:'userinfo'\\\"\\n                                    [value]=\\\"u.id\\\">\\n                                    {{u.userinfo}}\\n                                </mat-option>\\n                            </mat-select>\\n                        </mat-form-field>\\n                    </div>\\n\\n\\n                    <!-- <div fxFlex.gt-sm=\\\"25\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" *ngIf=\\\"lists.userType=='Super Admin' ||lists.userType=='Manager'\\\">\\n                        <mat-form-field>\\n                            <mat-label>Select Admin Name</mat-label>\\n                            <mat-select [(ngModel)]=\\\"lists.adminid\\\">\\n                                <mat-option>--</mat-option>\\n                                <mat-option *ngFor=\\\"let u of lists.Adminlist\\\" [value]=\\\"u.id\\\">\\n                                    {{u.name}} </mat-option>\\n                            </mat-select>\\n                        </mat-form-field>\\n                    </div> -->\\n\\n                    <div fxFlex.gt-sm=\\\"25\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\"\\n                        *ngIf=\\\"lists.userType=='Super Admin' ||lists.userType=='Manager'\\\">\\n                        <mat-form-field>\\n                            <mat-label>Select Admin Name</mat-label>\\n                            <mat-select [(ngModel)]=\\\"lists.adminid\\\">\\n                                <mat-option>\\n                                    <ngx-mat-select-search [(ngModel)]=\\\"lists.searchuser1\\\"\\n                                        [ngModelOptions]=\\\"{standalone: true}\\\" [placeholderLabel]=\\\"'Search...'\\\"\\n                                        name=\\\"search\\\"></ngx-mat-select-search>\\n                                </mat-option>\\n                                <mat-option *ngFor=\\\"let u of lists.Adminlist|selectfilter:lists.searchuser1:'name'\\\"\\n                                    [value]=\\\"u.id\\\">\\n                                    {{u.name}} </mat-option>\\n                            </mat-select>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <mat-label>Order By</mat-label>\\n                            <mat-select [(ngModel)]=\\\"lists.order\\\">\\n                                <mat-option *ngFor=\\\"let u of lists.orderlist\\\" [value]=\\\"u.value\\\">\\n                                    {{u.name}}</mat-option>\\n                            </mat-select>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" class=\\\"text-right\\\">\\n                        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"ViewReport()\\\">View Report</button>\\n                    </div>\\n                   \\n                    <!-- <div fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <a href=\\\"javascript:void\\\">\\n                            <mat-card class=\\\"bg-warning text-white text-center\\\">\\n                                <div class=\\\"p-10\\\">\\n                                    <h2 class=\\\"m-0\\\"><i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\"> {{lists.Totalamount}}</i>\\n                                    </h2>\\n                                    <small>Total Successful Bills</small>\\n                                </div>\\n                            </mat-card>\\n                        </a>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <a href=\\\"javascript:void\\\">\\n                            <mat-card class=\\\"bg-warning text-white text-center\\\">\\n                                <div class=\\\"p-10\\\">\\n                                    <h2 class=\\\"m-0\\\"><i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\"> {{lists.Totalamount}}</i>\\n                                    </h2>\\n                                    <small>Total Failed Bills</small>\\n                                </div>\\n                            </mat-card>\\n                        </a>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <a href=\\\"javascript:void\\\">\\n                            <mat-card class=\\\"bg-info text-white text-center\\\">\\n                                <div class=\\\"p-10\\\">\\n                                    <h2 class=\\\"m-0\\\">{{report.data.length}}</h2>\\n                                    <small>Total Pending Bills</small>\\n                                </div>\\n                            </mat-card>\\n                        </a>\\n                    </div> -->\\n                    <!-- <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                    </div> -->\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <input matInput (keyup)=\\\"common.TableFilter(report,$event.target.value)\\\"\\n                                placeholder=\\\"Search\\\">\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"75\\\" class=\\\"text-right\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <button mat-raised-button color=\\\"primary\\\"\\n                            (click)=\\\"common.DownloadCsv('BillDeposit',report.data)\\\">Export Report</button>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <table mat-table matSort [dataSource]=\\\"report\\\">\\n                            <ng-container matColumnDef=\\\"receipt\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Receipt </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.receipt}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"kno\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> KNo</th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.kno}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"username\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> User Name </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.username}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"lastdate\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Due Date </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.lastdate}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"cname\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Biller Name </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.cname}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"billamount\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> <i class=\\\"fa fa-inr\\\"\\n                                        aria-hidden=\\\"true\\\"> Amount</i> </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> <i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\">\\n                                        {{element.billamount}}</i></td>\\n                            </ng-container>\\n                            <!-- <ng-container matColumnDef=\\\"openbalance\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> <i class=\\\"fa fa-inr\\\"\\n                                        aria-hidden=\\\"true\\\"> Open Balance</i> </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> <i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\">\\n                                        {{element.openbalance||0}}</i></td>\\n                            </ng-container> -->\\n                            <ng-container matColumnDef=\\\"datetime\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Date </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.datetime|date:'dd-MM-yyyy hh:mm a'}}\\n                                </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"provider_Id\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header>Bill Type </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.provider_Id}}\\n                                </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"billstatus\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> <i \\n                                        aria-hidden=\\\"true\\\">Amazon Status</i> </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> <i  aria-hidden=\\\"true\\\">\\n                                        {{element.billstatus}}</i></td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"transectionid\\\">\\n                                <th mat-header-cell *matHeaderCellDef> Amazon Order Id </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> <i  aria-hidden=\\\"true\\\">\\n                                    {{element.transectionid}}</i></td>\\n                               <!-- <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"action-link\\\">\\n                                     <a style=\\\"color:#F44336 !important\\\"\\n                                        (click)=\\\"common.ReceiptPrint(element,'Duplicate Copy')\\\">\\n                                        <mat-icon>print</mat-icon>\\n                                    </a> \\n                                </td>-->\\n                            </ng-container>\\n                            <tr mat-header-row *matHeaderRowDef=\\\"lists.displayedColumns; sticky: true\\\"></tr>\\n                            <tr mat-row *matRowDef=\\\"let row; columns: lists.displayedColumns;\\\"></tr>\\n                        </table>\\n                        <mat-paginator [pageSizeOptions]=\\\"[15,20,25,50,100,200]\\\" showFirstLastButtons></mat-paginator>\\n                    </div>\\n                </div>\\n\\n            </div>\\n        </div>\\n\\n    </mat-card-content>\\n</mat-card>\"","module.exports = \"<mat-card>\\n    <mat-card-content>\\n        <div fxLayout=\\\"row wrap\\\">\\n            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                <div fxLayout=\\\"row wrap\\\">\\n                    <div fxFlex.gt-sm=\\\"25\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <input matInput [matDatepicker]=\\\"picker\\\" [(ngModel)]=\\\"lists.from\\\" (focus)=\\\"picker.open()\\\"\\n                                placeholder=\\\"Choose a Start date\\\">\\n                            <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n                            <mat-datepicker #picker></mat-datepicker>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <input matInput [matDatepicker]=\\\"picker1\\\" [(ngModel)]=\\\"lists.to\\\" (focus)=\\\"picker1.open()\\\"\\n                                placeholder=\\\"Choose an End date\\\">\\n                            <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\n                            <mat-datepicker #picker1></mat-datepicker>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <input matInput [matDatepicker]=\\\"picker2\\\" [(ngModel)]=\\\"lists.duedate\\\"\\n                                (focus)=\\\"picker2.open()\\\" placeholder=\\\"Choose a Due date\\\">\\n                            <mat-datepicker-toggle matSuffix [for]=\\\"picker2\\\"></mat-datepicker-toggle>\\n                            <mat-datepicker #picker2></mat-datepicker>\\n                        </mat-form-field>\\n                    </div>\\n                    <!-- <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" *ngIf=\\\"lists.userType!='Agent'\\\">\\n                        <mat-form-field>\\n                            <mat-label>Select User Name</mat-label>\\n                            <mat-select [(ngModel)]=\\\"lists.agentid\\\">\\n                                <mat-option>--</mat-option>\\n                                <mat-option *ngFor=\\\"let u of lists.Userlist\\\" [value]=\\\"u.id\\\">\\n                                    {{u.userinfo}}\\n                                </mat-option>\\n                            </mat-select>\\n                        </mat-form-field>\\n                    </div> -->\\n\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" *ngIf=\\\"lists.userType!='Agent'\\\">\\n                        <mat-form-field>\\n                            <mat-label>Select User Name</mat-label>\\n                            <mat-select [(ngModel)]=\\\"lists.agentid\\\">\\n                                <mat-option>\\n                                    <ngx-mat-select-search [(ngModel)]=\\\"lists.searchuser\\\"\\n                                        [ngModelOptions]=\\\"{standalone: true}\\\" [placeholderLabel]=\\\"'Search...'\\\"\\n                                        name=\\\"search\\\"></ngx-mat-select-search>\\n                                </mat-option>\\n                                <mat-option *ngFor=\\\"let u of lists.Userlist|selectfilter:lists.searchuser:'userinfo'\\\"\\n                                    [value]=\\\"u.id\\\">\\n                                    {{u.userinfo}}\\n                                </mat-option>\\n                            </mat-select>\\n                        </mat-form-field>\\n                    </div>\\n\\n\\n                    <!-- <div fxFlex.gt-sm=\\\"25\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" *ngIf=\\\"lists.userType=='Super Admin' ||lists.userType=='Manager'\\\">\\n                        <mat-form-field>\\n                            <mat-label>Select Admin Name</mat-label>\\n                            <mat-select [(ngModel)]=\\\"lists.adminid\\\">\\n                                <mat-option>--</mat-option>\\n                                <mat-option *ngFor=\\\"let u of lists.Adminlist\\\" [value]=\\\"u.id\\\">\\n                                    {{u.name}} </mat-option>\\n                            </mat-select>\\n                        </mat-form-field>\\n                    </div> -->\\n\\n                    <div fxFlex.gt-sm=\\\"25\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\"\\n                        *ngIf=\\\"lists.userType=='Super Admin' ||lists.userType=='Manager'\\\">\\n                        <mat-form-field>\\n                            <mat-label>Select Admin Name</mat-label>\\n                            <mat-select [(ngModel)]=\\\"lists.adminid\\\">\\n                                <mat-option>\\n                                    <ngx-mat-select-search [(ngModel)]=\\\"lists.searchuser1\\\"\\n                                        [ngModelOptions]=\\\"{standalone: true}\\\" [placeholderLabel]=\\\"'Search...'\\\"\\n                                        name=\\\"search\\\"></ngx-mat-select-search>\\n                                </mat-option>\\n                                <mat-option *ngFor=\\\"let u of lists.Adminlist|selectfilter:lists.searchuser1:'name'\\\"\\n                                    [value]=\\\"u.id\\\">\\n                                    {{u.name}} </mat-option>\\n                            </mat-select>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <mat-label>Order By</mat-label>\\n                            <mat-select [(ngModel)]=\\\"lists.order\\\">\\n                                <mat-option *ngFor=\\\"let u of lists.orderlist\\\" [value]=\\\"u.value\\\">\\n                                    {{u.name}}</mat-option>\\n                            </mat-select>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" class=\\\"text-right\\\">\\n                        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"ViewReport()\\\">View Report</button>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <a href=\\\"javascript:void\\\">\\n                            <mat-card class=\\\"bg-warning text-white text-center\\\">\\n                                <div class=\\\"p-10\\\">\\n                                    <h2 class=\\\"m-0\\\"><i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\"> {{lists.Totalamount}}</i>\\n                                    </h2>\\n                                    <small>Total Bill Amount</small>\\n                                </div>\\n                            </mat-card>\\n                        </a>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <a href=\\\"javascript:void\\\">\\n                            <mat-card class=\\\"bg-info text-white text-center\\\">\\n                                <div class=\\\"p-10\\\">\\n                                    <h2 class=\\\"m-0\\\">{{report.data.length}}</h2>\\n                                    <small>Total Record</small>\\n                                </div>\\n                            </mat-card>\\n                        </a>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <input matInput (keyup)=\\\"common.TableFilter(report,$event.target.value)\\\"\\n                                placeholder=\\\"Search\\\">\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"75\\\" class=\\\"text-right\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <button mat-raised-button color=\\\"primary\\\"\\n                            (click)=\\\"common.DownloadCsv('BillDeposit',report.data)\\\">Export Report</button>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <table mat-table matSort [dataSource]=\\\"report\\\">\\n                            <ng-container matColumnDef=\\\"receipt\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Receipt </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.receipt}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"kno\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> KNo</th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.kno}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"username\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> User Name </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.username}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"lastdate\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Due Date </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.lastdate}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"cname\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Biller Name </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.cname}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"billamount\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> <i class=\\\"fa fa-inr\\\"\\n                                        aria-hidden=\\\"true\\\"> Amount</i> </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> <i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\">\\n                                        {{element.billamount}}</i></td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"openbalance\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> <i class=\\\"fa fa-inr\\\"\\n                                        aria-hidden=\\\"true\\\"> Open Balance</i> </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> <i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\">\\n                                        {{element.openbalance||0}}</i></td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"datetime\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Date </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.datetime|date:'dd-MM-yyyy hh:mm a'}}\\n                                </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"provider_Id\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header>Bill Type </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.provider_Id}}\\n                                </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"action\\\">\\n                                <th mat-header-cell *matHeaderCellDef> Action </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"action-link\\\">\\n                                    <a style=\\\"color:#F44336 !important\\\"\\n                                        (click)=\\\"common.ReceiptPrint(element,'Duplicate Copy')\\\">\\n                                        <mat-icon>print</mat-icon>\\n                                    </a>\\n                                </td>\\n                            </ng-container>\\n                            <tr mat-header-row *matHeaderRowDef=\\\"lists.displayedColumns; sticky: true\\\"></tr>\\n                            <tr mat-row *matRowDef=\\\"let row; columns: lists.displayedColumns;\\\"></tr>\\n                        </table>\\n                        <mat-paginator [pageSizeOptions]=\\\"[15,20,25,50,100,200]\\\" showFirstLastButtons></mat-paginator>\\n                    </div>\\n                </div>\\n\\n            </div>\\n        </div>\\n\\n    </mat-card-content>\\n</mat-card>\"","module.exports = \"<mat-card>\\n    <mat-card-content>\\n\\n        <mat-tab-group>\\n            <mat-tab label=\\\"Duplicate Bill Reverse\\\">\\n                <div fxLayout=\\\"row wrap\\\">\\n                    <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n\\n                        <div fxLayout=\\\"row wrap\\\">\\n                            <div fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" class=\\\"text-right p-r-10\\\">\\n                                <mat-form-field>\\n                                    <input matInput [matDatepicker]=\\\"picker\\\" class=\\\"datepicker\\\" [(ngModel)]=\\\"lists.from\\\" (focus)=\\\"picker.open()\\\" placeholder=\\\"Choose a Start date\\\">\\n                                    <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n                                    <mat-datepicker #picker></mat-datepicker>\\n                                </mat-form-field>\\n                            </div>\\n\\n                            <div fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                                <mat-form-field>\\n                                    <input matInput [matDatepicker]=\\\"picker1\\\" [(ngModel)]=\\\"lists.to\\\" (focus)=\\\"picker1.open()\\\" class=\\\"datepicker\\\" placeholder=\\\"Choose an End date\\\">\\n                                    <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\n                                    <mat-datepicker #picker1></mat-datepicker>\\n                                </mat-form-field>\\n                            </div>\\n                            <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                                <mat-form-field>\\n                                    <input matInput (keyup)=\\\"common.TableFilter(lists.duplicate,$event.target.value)\\\" placeholder=\\\"Search\\\">\\n                                </mat-form-field>\\n                            </div>\\n                            <div fxFlex.gt-sm=\\\"75\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" class=\\\"text-right m-b-10\\\">\\n                                <button mat-raised-button color=\\\"primary\\\" (click)=\\\"GetDuplicateBill()\\\">Get Duplicate\\n                                    Bills</button>\\n                            </div>\\n                            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                                <table mat-table matSort [dataSource]=\\\"lists.duplicate\\\">\\n\\n\\n                                    <ng-container matColumnDef=\\\"receipt\\\">\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> Receipt </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.receipt}} </td>\\n                                    </ng-container>\\n                                    <ng-container matColumnDef=\\\"kno\\\">\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> KNo </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.kno}} </td>\\n                                    </ng-container>\\n                                    <ng-container matColumnDef=\\\"username\\\">\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> User Name </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.username}} </td>\\n                                    </ng-container>\\n                                    <ng-container matColumnDef=\\\"lastdate\\\">\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> Due Date </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.lastdate}} </td>\\n                                    </ng-container>\\n                                    <ng-container matColumnDef=\\\"cname\\\">\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> Customer Name </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.cname}} </td>\\n                                    </ng-container>\\n\\n                                    <ng-container matColumnDef=\\\"billamount\\\">\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> <i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\"> Amount</i> </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> <i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\"> {{element.billamount}}</i> </td>\\n                                    </ng-container>\\n\\n                                    <ng-container matColumnDef=\\\"datetime\\\">\\n                                        <th mat-header-cell *matHeaderCellDef> Date </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\">\\n                                            {{element.datetime|date:'dd-MM-yyy hh:mm a'}} </td>\\n                                    </ng-container>\\n                                    <ng-container matColumnDef=\\\"action\\\">\\n                                        <th mat-header-cell *matHeaderCellDef> Action </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"action-link\\\">\\n                                            <a style=\\\"color:#F44336 !important\\\" (click)=\\\"BillReverse(element)\\\">\\n                                                Reversal\\n                                            </a>\\n                                        </td>\\n\\n                                    </ng-container>\\n                                    <tr mat-header-row *matHeaderRowDef=\\\"lists.displayedColumns; sticky: true\\\"></tr>\\n                                    <tr mat-row *matRowDef=\\\"let row; columns: lists.displayedColumns;\\\"></tr>\\n                                </table>\\n                                <mat-paginator [pageSizeOptions]=\\\"[10,20,25,50,100,200]\\\" showFirstLastButtons>\\n                                </mat-paginator>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n\\n            </mat-tab>\\n            <mat-tab label=\\\"Force Bill Reverse\\\">\\n                <div fxLayout=\\\"row wrap\\\">\\n                    <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n\\n                        <div fxLayout=\\\"row wrap\\\">\\n                            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                                <mat-form-field>\\n                                    <input matInput [(ngModel)]=\\\"lists.forcesearch\\\" placeholder=\\\"Search\\\">\\n                                </mat-form-field>\\n                            </div>\\n                            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" class=\\\"text-right m-b-10\\\">\\n                                <button mat-raised-button color=\\\"primary\\\" (click)=\\\"SearchReceipt()\\\">Search by Receipt\\n                                    No.</button>\\n                            </div>\\n                            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                                <table mat-table matSort [dataSource]=\\\"lists.forcelist\\\">\\n\\n\\n                                    <ng-container matColumnDef=\\\"receipt\\\">\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> Receipt </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.receipt}} </td>\\n                                    </ng-container>\\n                                    <ng-container matColumnDef=\\\"kno\\\">\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> KNo </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.kno}} </td>\\n                                    </ng-container>\\n                                    <ng-container matColumnDef=\\\"username\\\">\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> User Name </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.username}} </td>\\n                                    </ng-container>\\n                                    <ng-container matColumnDef=\\\"lastdate\\\">\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> Due Date </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.lastdate}} </td>\\n                                    </ng-container>\\n                                    <ng-container matColumnDef=\\\"cname\\\">\\n                                        <th mat-header-cell *matHeaderCellDef> Customer Name </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.cname}} </td>\\n                                    </ng-container>\\n\\n                                    <ng-container matColumnDef=\\\"billamount\\\">\\n                                        <th mat-header-cell *matHeaderCellDef><i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\"> Amount</i> </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> <i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\"> {{element.billamount}}</i> </td>\\n                                    </ng-container>\\n\\n                                    <ng-container matColumnDef=\\\"datetime\\\">\\n                                        <th mat-header-cell *matHeaderCellDef> Date </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\">\\n                                            {{element.datetime|date:'dd-MM-yyy hh:mm a'}} </td>\\n                                    </ng-container>\\n                                    <ng-container matColumnDef=\\\"action\\\">\\n                                        <th mat-header-cell *matHeaderCellDef> Action </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"action-link\\\">\\n                                            <a style=\\\"color:#F44336 !important\\\" (click)=\\\"BillReverse(element)\\\">\\n                                                Reversal\\n                                            </a>\\n                                        </td>\\n\\n                                    </ng-container>\\n                                    <tr mat-header-row *matHeaderRowDef=\\\"lists.displayedColumns; sticky: true\\\"></tr>\\n                                    <tr mat-row *matRowDef=\\\"let row; columns: lists.displayedColumns;\\\"></tr>\\n                                </table>\\n                                <mat-paginator [pageSizeOptions]=\\\"[5,20,25,50,100,200]\\\" showFirstLastButtons>\\n                                </mat-paginator>\\n                            </div>\\n                        </div>\\n\\n                    </div>\\n                </div>\\n            </mat-tab>\\n        </mat-tab-group>\\n    </mat-card-content>\\n</mat-card>\"","module.exports = \"<mat-card>\\n    <mat-card-content>\\n        <mat-tab-group>\\n            <mat-tab label=\\\"View Cash Collection\\\">\\n                <div fxLayout=\\\"row wrap\\\">\\n                    <div fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" class=\\\"p-r-10\\\">\\n                        <mat-form-field>\\n                            <input matInput [matDatepicker]=\\\"myDatepicker\\\" [(ngModel)]=\\\"lists.fromdate\\\" (focus)=\\\"myDatepicker.open()\\\" placeholder=\\\"From Date\\\">\\n                            <mat-datepicker-toggle matSuffix [for]=\\\"myDatepicker\\\"></mat-datepicker-toggle>\\n                            <mat-datepicker #myDatepicker></mat-datepicker>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" class=\\\"p-r-10\\\">\\n                        <mat-form-field>\\n                            <input matInput [matDatepicker]=\\\"myDatepicker1\\\" [(ngModel)]=\\\"lists.todate\\\" (focus)=\\\"myDatepicker1.open()\\\" placeholder=\\\"To Date\\\">\\n                            <mat-datepicker-toggle matSuffix [for]=\\\"myDatepicker1\\\"></mat-datepicker-toggle>\\n                            <mat-datepicker #myDatepicker1></mat-datepicker>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" *ngIf=\\\"lists.userType!='Agent'\\\">\\n                        <mat-form-field>\\n                            <mat-label>Select User Name</mat-label>\\n                            <mat-select [(ngModel)]=\\\"lists.agentid\\\">\\n                                <mat-option>\\n                                    <ngx-mat-select-search [(ngModel)]=\\\"lists.searchuser\\\"\\n                                        [ngModelOptions]=\\\"{standalone: true}\\\" [placeholderLabel]=\\\"'Search...'\\\"\\n                                        name=\\\"search\\\"></ngx-mat-select-search>\\n                                </mat-option>\\n                                <mat-option *ngFor=\\\"let u of lists.Userlist|selectfilter:lists.searchuser:'userinfo'\\\" [value]=\\\"u.id\\\">\\n                                    {{u.userinfo}}\\n                                </mat-option>\\n                            </mat-select>\\n                        </mat-form-field>\\n                    </div>\\n\\n                    <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" class=\\\"text-right m-b-10\\\">\\n                        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"GetDepositcollection()\\\">View\\n                            Collection</button>\\n                    </div>\\n\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <a href=\\\"javascript:void\\\">\\n                            <mat-card class=\\\"bg-warning text-white text-center\\\">\\n                                <div class=\\\"p-10\\\">\\n                                    <h2 class=\\\"m-0\\\"><i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\"> {{lists.Totalamount}}</i></h2>\\n                                    <small>Total Bill Amount</small>\\n                                </div>\\n                            </mat-card>\\n                        </a>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <a href=\\\"javascript:void\\\">\\n                            <mat-card class=\\\"bg-info text-white text-center\\\">\\n                                <div class=\\\"p-10\\\">\\n                                    <h2 class=\\\"m-0\\\">{{lists.Depositlist.data.length}}</h2>\\n                                    <small>Total Record</small>\\n                                </div>\\n                            </mat-card>\\n                        </a>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                    </div>\\n\\n                    <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <div fxLayout=\\\"row wrap\\\">\\n                            <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                                <mat-form-field>\\n                                    <input matInput (keyup)=\\\"common.TableFilter(lists.Depositlist,$event.target.value)\\\" placeholder=\\\"Search\\\">\\n                                </mat-form-field>\\n                            </div>\\n                            <div fxFlex.gt-sm=\\\"75\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" class=\\\"text-right\\\">\\n                                <button mat-raised-button color=\\\"primary\\\" (click)=\\\"common.DownloadCsv('CollectionReport',lists.Depositlist.data)\\\">Export Report</button>\\n                            </div>\\n                            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                                <table mat-table matSort [dataSource]=\\\"lists.Depositlist\\\">\\n                                    <ng-container matColumnDef=\\\"receipt\\\">\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> ReceiptNo </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.receiptno}} </td>\\n                                    </ng-container>\\n                                    <ng-container matColumnDef=\\\"adminid\\\">\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> Depositor </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.adminid}} </td>\\n                                    </ng-container>\\n                                    <ng-container matColumnDef=\\\"name\\\">\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> Agent </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.Agent}} </td>\\n                                    </ng-container>\\n                                    <ng-container matColumnDef=\\\"transaction\\\">\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> TransactionId </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.t_id}} </td>\\n                                    </ng-container>\\n                                    <ng-container matColumnDef=\\\"status\\\">\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> Payment Mode </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.t_type}} </td>\\n                                    </ng-container>\\n                                    <ng-container matColumnDef=\\\"rdate\\\">\\n                                        <th mat-header-cell *matHeaderCellDef> Date </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\">\\n                                            {{element.datetime|date:'dd-MM-yyyy hh:mm a'}} </td>\\n                                    </ng-container>\\n                                    <ng-container matColumnDef=\\\"PresentAmount\\\">\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> <i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\"> Amount</i> </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"><i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\"> {{element.amount}}</i> </td>\\n                                    </ng-container>\\n                                    <ng-container matColumnDef=\\\"action\\\">\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> Action </th>\\n                                        <td mat-cell *matCellDef=\\\"let element\\\">\\n                                            <a style=\\\"color:#F44336 !important\\\" (click)=\\\"print(element,'Duplicate Copy')\\\">\\n                                                <mat-icon>print</mat-icon>\\n                                            </a>\\n                                        </td>\\n                                    </ng-container>\\n                                    <tr mat-header-row *matHeaderRowDef=\\\"lists.displayedColumns; sticky: true\\\"></tr>\\n                                    <tr mat-row *matRowDef=\\\"let row; columns: lists.displayedColumns;\\\"></tr>\\n                                </table>\\n                                <mat-paginator [pageSizeOptions]=\\\"[5, 10, 20,25,50]\\\" showFirstLastButtons>\\n                                </mat-paginator>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </mat-tab>\\n            <mat-tab label=\\\"Receive Cash\\\">\\n                <form [formGroup]=\\\"collectionform\\\">\\n                    <div fxLayout=\\\"row wrap\\\">\\n                        <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                            <div fxLayout=\\\"row wrap\\\">\\n                                <div fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" class=\\\"p-l-10\\\">\\n                                    <mat-form-field>\\n                                        <mat-label>Select User Name</mat-label>\\n                                        <mat-select formControlName=\\\"agentid\\\">\\n                                            <mat-option *ngFor=\\\"let u of lists.Userlist\\\" [value]=\\\"u.id\\\">\\n                                                {{u.userinfo}}\\n                                            </mat-option>\\n                                        </mat-select>\\n                                    </mat-form-field>\\n                                </div>\\n                                <div fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" class=\\\"p-l-10\\\">\\n                                    <mat-form-field>\\n                                        <mat-label>Select Payment Mode</mat-label>\\n                                        <mat-select formControlName=\\\"type\\\">\\n                                            <mat-option>None</mat-option>\\n                                            <mat-option value=\\\"Cash\\\">Cash</mat-option>\\n                                            <mat-option value=\\\"Bank\\\">Bank</mat-option>\\n                                            <mat-option value=\\\"Online\\\">Online</mat-option>\\n                                        </mat-select>\\n                                    </mat-form-field>\\n                                </div>\\n                                <div fxFlex.gt-sm=\\\"50\\\" fxFlex=\\\"100\\\" class=\\\"p-10\\\">\\n                                    <mat-form-field>\\n                                        <input matInput formControlName=\\\"transactionid\\\" type=\\\"text\\\" placeholder=\\\"Transaction Id\\\">\\n                                    </mat-form-field>\\n                                </div>\\n                                <div fxFlex.gt-sm=\\\"50\\\" fxFlex=\\\"100\\\" class=\\\"p-10\\\">\\n                                    <mat-form-field>\\n                                        <input matInput type=\\\"number\\\" formControlName=\\\"amount\\\" placeholder=\\\"Amount\\\">\\n                                    </mat-form-field>\\n                                </div>\\n                                <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" class=\\\"text-right\\\">\\n                                    <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"!collectionform.valid\\\" (click)=\\\"CashDeposit()\\\">Deposit</button>\\n                                </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </form>\\n            </mat-tab>\\n        </mat-tab-group>\\n    </mat-card-content>\\n</mat-card>\"","module.exports = \"<mat-card>\\n    <mat-card-content>\\n        <div fxLayout=\\\"row wrap\\\">\\n            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                <div fxLayout=\\\"row wrap\\\">\\n                    <div fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" class=\\\"text-right p-r-10\\\">\\n                        <mat-form-field>\\n                            <input matInput [matDatepicker]=\\\"picker\\\" [(ngModel)]=\\\"lists.from\\\" (focus)=\\\"picker.open()\\\" placeholder=\\\"Choose a Start date\\\">\\n                            <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n                            <mat-datepicker #picker></mat-datepicker>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" class=\\\"text-right p-r-10\\\">\\n                        <mat-form-field>\\n                            <input matInput [matDatepicker]=\\\"picker1\\\" [(ngModel)]=\\\"lists.to\\\" (focus)=\\\"picker1.open()\\\" placeholder=\\\"Choose an End date\\\">\\n                            <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\n                            <mat-datepicker #picker1></mat-datepicker>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" *ngIf=\\\"lists.userType!='Agent'\\\">\\n                        <mat-form-field>\\n                            <mat-label>Select User Name</mat-label>\\n                            <mat-select [(ngModel)]=\\\"lists.agentid\\\">\\n                                <mat-option>\\n                                    <ngx-mat-select-search [(ngModel)]=\\\"lists.searchuser\\\"\\n                                        [ngModelOptions]=\\\"{standalone: true}\\\" [placeholderLabel]=\\\"'Search...'\\\"\\n                                        name=\\\"search\\\"></ngx-mat-select-search>\\n                                </mat-option>\\n                                <mat-option *ngFor=\\\"let u of lists.Userlist|selectfilter:lists.searchuser:'userinfo'\\\" [value]=\\\"u.id\\\">\\n                                    {{u.userinfo}}\\n                                </mat-option>\\n                            </mat-select>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" class=\\\"text-right m-b-10\\\">\\n                        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"GetMyCreditHistory()\\\">View Report</button>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <a href=\\\"javascript:void\\\">\\n                            <mat-card class=\\\"bg-warning text-white text-center\\\">\\n                                <div class=\\\"p-10\\\">\\n                                    <h2 class=\\\"m-0\\\"><i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\"> {{lists.TotalAmount}}</i></h2>\\n                                    <small>Total Amount Credited</small>\\n                                </div>\\n                            </mat-card>\\n                        </a>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <a href=\\\"javascript:void\\\">\\n                            <mat-card class=\\\"bg-info text-white text-center\\\">\\n                                <div class=\\\"p-10\\\">\\n                                    <h2 class=\\\"m-0\\\">{{lists.Creditlist.data.length}}</h2>\\n                                    <small>Total Record</small>\\n                                </div>\\n                            </mat-card>\\n                        </a>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <input matInput (keyup)=\\\"common.TableFilter(lists.Creditlist,$event.target.value)\\\" placeholder=\\\"Search\\\">\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"75\\\" class=\\\"text-right\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"common.DownloadCsv('CreditReport',lists.Creditlist.data)\\\">Export Report</button>\\n                    </div>\\n\\n                    <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <table mat-table matSort [dataSource]=\\\"lists.Creditlist\\\">\\n                            <ng-container matColumnDef=\\\"name\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}}-{{element.cityname}}</td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"amount\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> <i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\"> Amount</i></th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> <i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\"> {{element.amount}}</i> </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"type\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Type</th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.type}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"datetime\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Date</th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.datetime}}\\n                                </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"message\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Message </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.message}} </td>\\n                            </ng-container>\\n                            <tr mat-header-row *matHeaderRowDef=\\\"lists.displayedColumns; sticky: true\\\"></tr>\\n                            <tr mat-row *matRowDef=\\\"let row; columns: lists.displayedColumns;\\\"></tr>\\n                        </table>\\n                        <mat-paginator [pageSizeOptions]=\\\"[5,10, 20,25,50,100]\\\" showFirstLastButtons></mat-paginator>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </mat-card-content>\\n</mat-card>\"","module.exports = \"<p>due works!</p>\\n\"","module.exports = \"<mat-card>\\n    <mat-card-content>\\n        <div fxLayout=\\\"row wrap\\\">\\n            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                <div fxLayout=\\\"row wrap\\\">\\n                    <div fxFlex.gt-sm=\\\"25\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <input matInput [matDatepicker]=\\\"picker\\\" [(ngModel)]=\\\"lists.from\\\" (focus)=\\\"picker.open()\\\"\\n                                placeholder=\\\"Choose a Start date\\\">\\n                            <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n                            <mat-datepicker #picker></mat-datepicker>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <input matInput [matDatepicker]=\\\"picker1\\\" [(ngModel)]=\\\"lists.to\\\" (focus)=\\\"picker1.open()\\\"\\n                                placeholder=\\\"Choose an End date\\\">\\n                            <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\n                            <mat-datepicker #picker1></mat-datepicker>\\n                        </mat-form-field>\\n                    </div>\\n               \\n                    <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\" class=\\\"text-right\\\">\\n                        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"ViewReport()\\\">View Report</button>\\n                    </div>\\n                    \\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <input matInput (keyup)=\\\"common.TableFilter(report,$event.target.value)\\\"\\n                                placeholder=\\\"Search\\\">\\n                        </mat-form-field>\\n                    </div>\\n                  \\n                    <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <table mat-table matSort [dataSource]=\\\"report\\\">\\n                            <ng-container matColumnDef=\\\"receipt\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Transaction NO </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.txnid}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"kno\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Transaction Medium</th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\">Payu Money </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"username\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> User Name </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.username}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"lastdate\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header>Transaction Date </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.pdatetime}} </td>\\n                            </ng-container>\\n                           \\n                            <ng-container matColumnDef=\\\"billamount\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> <i class=\\\"fa fa-inr\\\"\\n                                        aria-hidden=\\\"true\\\"> Amount</i> </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> <i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\">\\n                                        {{element.info.net_amount_debit}}</i></td>\\n                            </ng-container>\\n                         <ng-container matColumnDef=\\\"action\\\">\\n                                <th mat-header-cell *matHeaderCellDef> Action </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"action-link\\\">\\n                                    <a style=\\\"color:#F44336 !important\\\"\\n                                        (click)=\\\"common.PayuReceipt(element,'Duplicate Copy')\\\">\\n                                        <mat-icon>print</mat-icon>\\n                                    </a>\\n                                </td>\\n                            </ng-container>\\n                            <tr mat-header-row *matHeaderRowDef=\\\"lists.displayedColumns; sticky: true\\\"></tr>\\n                            <tr mat-row *matRowDef=\\\"let row; columns: lists.displayedColumns;\\\"></tr>\\n                        </table>\\n                        <mat-paginator [pageSizeOptions]=\\\"[15,20,25,50,100,200]\\\" showFirstLastButtons></mat-paginator>\\n                    </div>\\n                </div>\\n\\n            </div>\\n        </div>\\n\\n    </mat-card-content>\\n</mat-card>\"","module.exports = \"<mat-card>\\n    <mat-card-content>\\n        <div fxLayout=\\\"row wrap\\\">\\n            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                <div fxLayout=\\\"row wrap\\\">\\n                    <div fxFlex.gt-sm=\\\"25\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <input matInput [matDatepicker]=\\\"picker\\\" [(ngModel)]=\\\"lists.from\\\" (focus)=\\\"picker.open()\\\" placeholder=\\\"Choose a Start date\\\">\\n                            <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n                            <mat-datepicker #picker></mat-datepicker>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <input matInput [matDatepicker]=\\\"picker1\\\" [(ngModel)]=\\\"lists.to\\\" (focus)=\\\"picker1.open()\\\" placeholder=\\\"Choose an End date\\\">\\n                            <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\n                            <mat-datepicker #picker1></mat-datepicker>\\n                        </mat-form-field>\\n                    </div>\\n\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" *ngIf=\\\"lists.userType!='Agent'\\\">\\n                        <mat-form-field>\\n                            <mat-label>Select User Name</mat-label>\\n                            <mat-select [(ngModel)]=\\\"lists.agentid\\\">\\n                                <mat-option>\\n                                    <ngx-mat-select-search [(ngModel)]=\\\"lists.searchuser\\\"\\n                                        [ngModelOptions]=\\\"{standalone: true}\\\" [placeholderLabel]=\\\"'Search...'\\\"\\n                                        name=\\\"search\\\"></ngx-mat-select-search>\\n                                </mat-option>\\n                                <mat-option *ngFor=\\\"let u of lists.Userlist|selectfilter:lists.searchuser:'userinfo'\\\" [value]=\\\"u.id\\\">\\n                                    {{u.userinfo}}\\n                                </mat-option>\\n                            </mat-select>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" *ngIf=\\\"lists.userType=='Super Admin' ||lists.userType=='Manager'\\\">\\n                        <mat-form-field>\\n                            <mat-label>Select Admin Name</mat-label>\\n                            <mat-select [(ngModel)]=\\\"lists.adminid\\\">\\n                                <mat-option>\\n                                    <ngx-mat-select-search [(ngModel)]=\\\"lists.searchuser1\\\"\\n                                        [ngModelOptions]=\\\"{standalone: true}\\\" [placeholderLabel]=\\\"'Search...'\\\"\\n                                        name=\\\"search\\\"></ngx-mat-select-search>\\n                                </mat-option>\\n                                <mat-option *ngFor=\\\"let u of lists.Adminlist|selectfilter:lists.searchuser1:'name'\\\" [value]=\\\"u.id\\\">\\n                                    {{u.name}} </mat-option>\\n                            </mat-select>\\n                        </mat-form-field>\\n                    </div>\\n\\n                    <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" class=\\\"text-right m-b-10\\\">\\n                        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"ViewReport()\\\">View Report</button>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                    </div>\\n\\n                    <div fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <a href=\\\"javascript:void\\\">\\n                            <mat-card class=\\\"bg-warning text-white text-center\\\">\\n                                <div class=\\\"p-10\\\">\\n                                    <h2 class=\\\"m-0\\\">{{lists.Totalamount}}</h2>\\n                                    <small>Total Bill Reversed</small>\\n                                </div>\\n                            </mat-card>\\n                        </a>\\n                    </div>\\n\\n                    <div fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <input matInput (keyup)=\\\"common.TableFilter(report,$event.target.value)\\\" placeholder=\\\"Search\\\">\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"75\\\" class=\\\"text-right m-b-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"common.DownloadCsv('ReversedBillReport',report.data)\\\">Export Report</button>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <table mat-table matSort [dataSource]=\\\"report\\\">\\n                            <ng-container matColumnDef=\\\"receipt\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Receipt </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.receipt}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"kno\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> KNo</th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.kno}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"username\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Depositor Name </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.depositername}} </td>\\n                            </ng-container>\\n                            \\n                            <ng-container matColumnDef=\\\"lastdate\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Due Date </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.lastdate}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"cname\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Biller Name </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.cname}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"billamount\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> <i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\"> Amount</i> </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> <i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\"> {{element.billamount}}</i> </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"datetime\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Reversed Date </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.deletedatetime|date:'dd-MM-yyyy HH:MM a'}}\\n                                </td>\\n                            </ng-container>\\n\\n                            <tr mat-header-row *matHeaderRowDef=\\\"lists.displayedColumns; sticky: true\\\"></tr>\\n                            <tr mat-row *matRowDef=\\\"let row; columns: lists.displayedColumns;\\\"></tr>\\n                        </table>\\n                        <mat-paginator [pageSizeOptions]=\\\"[15,20,25,50,100,200]\\\" showFirstLastButtons></mat-paginator>\\n                    </div>\\n                </div>\\n\\n            </div>\\n        </div>\\n\\n    </mat-card-content>\\n</mat-card>\"","module.exports = \"<mat-card>\\n    <mat-card-content>\\n        <div fxLayout=\\\"row wrap\\\">\\n            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                <div fxLayout=\\\"row wrap\\\">\\n                    <div fxFlex.gt-sm=\\\"33.33\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <input matInput [matDatepicker]=\\\"picker\\\" (focus)=\\\"picker.open()\\\" [(ngModel)]=\\\"lists.from\\\" placeholder=\\\"Choose a Start date\\\">\\n                            <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n                            <mat-datepicker #picker></mat-datepicker>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"33.33\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <input matInput [matDatepicker]=\\\"picker1\\\" (focus)=\\\"picker1.open()\\\" [(ngModel)]=\\\"lists.to\\\" placeholder=\\\"Choose an End date\\\">\\n                            <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\n                            <mat-datepicker #picker1></mat-datepicker>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" *ngIf=\\\"lists.userType=='Super Admin' ||lists.userType=='Manager'\\\">\\n                        <mat-form-field>\\n                            <mat-label>Select Admin Name</mat-label>\\n                            <mat-select [(ngModel)]=\\\"lists.adminid\\\">\\n                                <mat-option>\\n                                    <ngx-mat-select-search [(ngModel)]=\\\"lists.searchuser1\\\"\\n                                        [ngModelOptions]=\\\"{standalone: true}\\\" [placeholderLabel]=\\\"'Search...'\\\"\\n                                        name=\\\"search\\\"></ngx-mat-select-search>\\n                                </mat-option>\\n                                <mat-option *ngFor=\\\"let u of lists.Adminlist|selectfilter:lists.searchuser1:'name'\\\" [value]=\\\"u.id\\\">\\n                                    {{u.name}} </mat-option>\\n                            </mat-select>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"100\\\" class=\\\"text-right m-b-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <button mat-raised-button color=\\\"primary\\\" class=\\\"m-r-10\\\" (click)=\\\"ViewReport()\\\">View\\n                            Report</button> <button mat-raised-button color=\\\"primary\\\" (click)=\\\"printDiv()\\\">Print Report</button>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                    </div>\\n                    <div id=\\\"my-node\\\" fxLayout=\\\"row wrap\\\">\\n                        <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" *ngFor=\\\"let r of report\\\">\\n                            <div fxLayout=\\\"row wrap\\\" class=\\\"m-t-30\\\" style=\\\"background: rgba(0, 0, 0, 0.5);\\n                        color: white;\\\">\\n                                <div fxFlex.gt-sm=\\\"25\\\" class=\\\"b-l b-b b-r b-t p-l-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                                    {{r.name}}-({{r.cityname}})\\n                                </div>\\n                                <div fxFlex.gt-sm=\\\"25\\\" class=\\\"b-r b-b b-t p-l-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                                    {{r.mobile}}\\n                                </div>\\n                                <div fxFlex.gt-sm=\\\"25\\\" class=\\\"b-r b-b b-t p-l-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                                    <b> Amount:<i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\"> {{r.totalamount}}</i></b>\\n                                </div>\\n                                <div fxFlex.gt-sm=\\\"25\\\" class=\\\"p-l-10 b-r b-b b-t\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                                    <b>Bills:</b> {{r.totalbills}}\\n                                </div>\\n                            </div>\\n                            <div fxLayout=\\\"row wrap\\\" class=\\\"m-t-10\\\">\\n\\n                            </div>\\n                            <table mat-table matSort [dataSource]=\\\"r.child\\\">\\n                                <ng-container matColumnDef=\\\"no\\\">\\n                                    <th mat-header-cell *matHeaderCellDef mat-sort-header> No. </th>\\n                                    <td mat-cell *matCellDef=\\\"let element;let i=index\\\"> {{i+1}} </td>\\n                                </ng-container>\\n                                <ng-container matColumnDef=\\\"name\\\">\\n                                    <th mat-header-cell *matHeaderCellDef mat-sort-header> Agent Name</th>\\n                                    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n                                </ng-container>\\n                                <ng-container matColumnDef=\\\"mobile\\\">\\n                                    <th mat-header-cell *matHeaderCellDef mat-sort-header> Mobile Number </th>\\n                                    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.mobile}} </td>\\n                                </ng-container>\\n                                <ng-container matColumnDef=\\\"TotalAmount\\\">\\n                                    <th mat-header-cell *matHeaderCellDef mat-sort-header> <i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\"> Total Amount</i> </th>\\n                                    <td mat-cell *matCellDef=\\\"let element\\\"><i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\"> {{element.TotalAmount}}</i> </td>\\n                                </ng-container>\\n                                <ng-container matColumnDef=\\\"Totalbill\\\">\\n                                    <th mat-header-cell *matHeaderCellDef mat-sort-header> Total Deposited Bills </th>\\n                                    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.Totalbill}} </td>\\n                                </ng-container>\\n                                <tr mat-header-row *matHeaderRowDef=\\\"lists.displayedColumns; sticky: true\\\"></tr>\\n                                <tr mat-row *matRowDef=\\\"let row; columns: lists.displayedColumns;\\\"></tr>\\n                            </table>\\n                        </div>\\n                    </div>\\n                </div>\\n\\n            </div>\\n        </div>\\n\\n    </mat-card-content>\\n</mat-card>\"","module.exports = \"<mat-card>\\n    <mat-card-content>\\n        <div fxLayout=\\\"row wrap\\\">\\n            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                <div fxLayout=\\\"row wrap\\\">\\n                    <div fxFlex.gt-sm=\\\"25\\\" class=\\\"p-l-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <input matInput [matDatepicker]=\\\"picker\\\" (focus)=\\\"picker.open()\\\" [(ngModel)]=\\\"lists.from\\\" placeholder=\\\"Choose a Start date\\\">\\n                            <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n                            <mat-datepicker #picker></mat-datepicker>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" class=\\\"p-l-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <input matInput [matDatepicker]=\\\"picker1\\\" (focus)=\\\"picker1.open()\\\" [(ngModel)]=\\\"lists.to\\\" placeholder=\\\"Choose an End date\\\">\\n                            <mat-datepicker-toggle matSuffix [for]=\\\"picker1\\\"></mat-datepicker-toggle>\\n                            <mat-datepicker #picker1></mat-datepicker>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" class=\\\"p-l-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <input matInput [(ngModel)]=\\\"lists.duedate\\\" (focus)=\\\"picker2.open()\\\" [matDatepicker]=\\\"picker2\\\" placeholder=\\\"Due date\\\">\\n                            <mat-datepicker-toggle matSuffix [for]=\\\"picker2\\\"></mat-datepicker-toggle>\\n                            <mat-datepicker #picker2></mat-datepicker>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" class=\\\"p-l-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" *ngIf=\\\"lists.userType!='Agent'\\\">\\n                        <mat-form-field>\\n                            <mat-label>Select Depositor</mat-label>\\n                            <mat-select [(ngModel)]=\\\"lists.agentid\\\">\\n                                <mat-option>--</mat-option>\\n                                <mat-option *ngFor=\\\"let d of lists.depositorlist\\\" [value]=\\\"d.id\\\">\\n                                    {{d.name}}</mat-option>\\n                            </mat-select>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" class=\\\"p-l-10 p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <mat-label>Status</mat-label>\\n                            <mat-select [(ngModel)]=\\\"lists.status\\\">\\n                                <mat-option>None</mat-option>\\n                                <mat-option value=\\\"On Hold\\\">On Hold</mat-option>\\n                                <mat-option value=\\\"Success\\\">Success</mat-option>\\n                                <mat-option value=\\\"Assign\\\">Assign</mat-option>\\n                            </mat-select>\\n                        </mat-form-field>\\n                    </div>\\n\\n\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <mat-label>Order By</mat-label>\\n                            <mat-select [(ngModel)]=\\\"lists.order\\\">\\n                                <mat-option>--</mat-option>\\n                                <mat-option *ngFor=\\\"let o of lists.orderlist\\\" [value]=\\\"o.value\\\">\\n                                    {{o.name}}\\n                                </mat-option>\\n                            </mat-select>\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" class=\\\"text-right\\\">\\n                        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"ViewReport()\\\">View Report</button>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"20\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"20\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <a href=\\\"javascript:void\\\">\\n                            <mat-card class=\\\"bg-danger text-white text-center\\\">\\n                                <div class=\\\"p-10\\\">\\n                                    <h2 class=\\\"m-0\\\">{{lists.onholdlist}}</h2>\\n                                    <small>On Hold</small>\\n                                </div>\\n                            </mat-card>\\n                        </a>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"20\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <a href=\\\"javascript:void\\\">\\n                            <mat-card class=\\\"bg-info text-white text-center\\\">\\n                                <div class=\\\"p-10\\\">\\n                                    <h2 class=\\\"m-0\\\">{{lists.successlist}}</h2>\\n                                    <small>Success</small>\\n                                </div>\\n                            </mat-card>\\n                        </a>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"20\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <a href=\\\"javascript:void\\\">\\n                            <mat-card class=\\\"bg-warning text-white text-center\\\">\\n                                <div class=\\\"p-10\\\">\\n                                    <h2 class=\\\"m-0\\\">{{lists.assignlist}}</h2>\\n                                    <small>Assign</small>\\n                                </div>\\n                            </mat-card>\\n                        </a>\\n\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <mat-form-field>\\n                            <input matInput (keyup)=\\\"comman.TableFilter(report,$event.target.value)\\\" placeholder=\\\"Search\\\">\\n                        </mat-form-field>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"75\\\" class=\\\"text-right\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"comman.DownloadCsv('UserWorkReport',report.data)\\\">Export Report</button>\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"20\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                    </div>\\n                    <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n                        <table mat-table matSort [dataSource]=\\\"report\\\">\\n                            <ng-container matColumnDef=\\\"receipt\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Receipt </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.receipt}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"kno\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> KNo</th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.kno}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"cname\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Customer Name </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.cname}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"mobile\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Mobile Number </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.mobile}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"billamount\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> <i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\"> Bill Amount</i> </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"><i class=\\\"fa fa-inr\\\" aria-hidden=\\\"true\\\"> {{element.billamount}}</i> </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"lastdate\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Due Date </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.lastdate}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"username\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Depositor </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.username}} </td>\\n                            </ng-container>\\n                            <ng-container matColumnDef=\\\"billstatus\\\">\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Bill Status </th>\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.billstatus}} </td>\\n                            </ng-container>\\n                            <tr mat-header-row *matHeaderRowDef=\\\"lists.displayedColumns; sticky: true\\\"></tr>\\n                            <tr mat-row *matRowDef=\\\"let row; columns: lists.displayedColumns;\\\"></tr>\\n                        </table>\\n                        <mat-paginator [pageSizeOptions]=\\\"[5, 10, 20,25,50]\\\" showFirstLastButtons></mat-paginator>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </mat-card-content>\\n</mat-card>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL1BvcnRhbC9SZXBvcnQvYW1hem9ucmVwb3J0L2FtYXpvbnJlcG9ydC5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDatepickerInputEvent } from '@angular/material/datepicker';\nimport { MatTableDataSource, MatPaginator, MatSort } from '@angular/material';\nimport { CommonService } from '../../Service/common.service';\nimport * as moment from 'moment';\n\n@Component({\n  selector: 'app-amazonreport',\n  templateUrl: './amazonreport.component.html',\n  styleUrls: ['./amazonreport.component.css']\n})\nexport class AmazonreportComponent implements OnInit {\n  hide = true;\n  lists: any = {};\n  report: any = new MatTableDataSource();\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  constructor(public common: CommonService) {\n    this.lists.displayedColumns = ['receipt', 'kno', 'transectionid', 'cname', 'provider_Id', 'billamount',  'billstatus'];\n    this.lists.from = new Date();\n    this.lists.to = new Date();\n    this.lists.Totalamount = 0;\n    this.lists.orderlist = [{ name: \"Descending\", value: 'desc' }, { name: \"Ascending\", value: 'asc' }]\n    this.GetUserList();\n    this.GetAdminList();\n  }\n  ngOnInit() {\n    this.report.paginator = this.paginator;\n    this.report.sort = this.sort;\n    this.lists.userType = localStorage.getItem(\"UserType\");\n  }\n\n  ViewReport() {\n    this.lists.Multiple = false;\n    this.lists.userids = false;\n    this.lists.from = moment(this.lists.from).format(\"YYYY-MM-DD\");\n    this.lists.to = moment(this.lists.to).format(\"YYYY-MM-DD\");\n    this.lists.userType = localStorage.getItem(\"UserType\");\n    if (localStorage.getItem(\"UserType\") == \"Super Admin\" || localStorage.getItem(\"UserType\") == \"Manager\") {\n      this.lists.userid = 0;\n    } else if (localStorage.getItem(\"UserType\") == \"Admin\") {\n      if (!this.lists.agentid) {\n        this.lists.userids = [];\n        this.lists.Userlist.forEach(element => {\n          this.lists.userids.push(element.id);\n        });\n        this.lists.Multiple = true;\n        this.lists.userid = localStorage.getItem(\"UserId\");\n      }\n    } else {\n      this.lists.userid = localStorage.getItem(\"UserId\");\n    }\n    if (this.lists.agentid) {\n      this.lists.userid = this.lists.agentid;\n    }\n    if (this.lists.adminid) {\n      this.lists.userids = [];\n      this.lists.Userlist.forEach(element => {\n        if (element.adminid == this.lists.adminid) {\n          this.lists.userids.push(element.id);\n        }\n      });\n    }\n    this.lists.myduedate = \"\";\n    if (this.lists.duedate) {\n      let duedate = new Date(this.lists.duedate);\n      let fduedate = moment(duedate).format(\"DD-MM-YYYY\");\n      this.lists.myduedate = fduedate;\n    }\n    this.common.PostMethod('BillReport', this.lists).then((res: any) => {\n      this.report = new MatTableDataSource(res.Data || []);\n      console.log(this.report);\n      this.report.paginator = this.paginator;\n      this.report.sort = this.sort;\n      this.lists.Totalamount = 0;\n      if (this.lists.duedate) {\n        this.lists.duedate = \"\";\n      }\n      res.Data.forEach(element => {\n        this.lists.Totalamount = this.lists.Totalamount + element.billamount;\n      });\n    });\n\n  }\n\n  GetUserList() {\n    if (localStorage.getItem(\"UserType\") == \"Super Admin\" || localStorage.getItem(\"UserType\") == \"Manager\") {\n      this.common.GetMethod(\"GetUserInfo\").then((res: any) => {\n        this.lists.Userlist = res.Data;\n        this.lists.Userlist.forEach(element => {\n          element.userinfo = element.name + \"-\" + element.Branchname;\n        });\n        this.ViewReport();\n      });\n    } else {\n      this.common.GetMethod(\"GetUserInfo?userid=\" + localStorage.getItem(\"UserId\")).then((res: any) => {\n        this.lists.Userlist = res.Data;\n        this.lists.Userlist.forEach(element => {\n          element.userinfo = element.name + \"-\" + element.Branchname;\n        });\n        this.ViewReport();\n      });\n    }\n  }\n\n  GetAdminList() {\n    this.common.PostMethod(\"GetfilterData\", { file: \"users\", name: \"usertype\", value: \"Admin\" }).then((res: any) => {\n      this.lists.Adminlist = res.Data;\n    });\n  }\n}\n\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL1BvcnRhbC9SZXBvcnQvYmlsbGRlcG9zaXRyZXBvcnQvYmlsbGRlcG9zaXRyZXBvcnQuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDatepickerInputEvent } from '@angular/material/datepicker';\nimport { MatTableDataSource, MatPaginator, MatSort } from '@angular/material';\nimport { CommonService } from '../../Service/common.service';\nimport * as moment from 'moment';\n\n@Component({\n  selector: 'app-billdepositreport',\n  templateUrl: './billdepositreport.component.html',\n  styleUrls: ['./billdepositreport.component.css']\n})\nexport class BilldepositreportComponent implements OnInit {\n  hide = true;\n  lists: any = {};\n  report: any = new MatTableDataSource();\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n  constructor(public common: CommonService) {\n    this.lists.displayedColumns = ['receipt', 'kno', 'username', 'lastdate', 'openbalance', 'cname', 'provider_Id', 'billamount', 'datetime', 'action'];\n    this.lists.from = new Date();\n    this.lists.to = new Date();\n    this.lists.Totalamount = 0;\n    this.lists.orderlist = [{ name: \"Descending\", value: 'desc' }, { name: \"Ascending\", value: 'asc' }]\n    this.GetUserList();\n    this.GetAdminList();\n  }\n\n  ngOnInit() {\n    this.report.paginator = this.paginator;\n    this.report.sort = this.sort;\n    this.lists.userType = localStorage.getItem(\"UserType\");\n  }\n\n  ViewReport() {\n    this.lists.Multiple = false;\n    this.lists.userids = false;\n    this.lists.from = moment(this.lists.from).format(\"YYYY-MM-DD\");\n    this.lists.to = moment(this.lists.to).format(\"YYYY-MM-DD\");\n    this.lists.userType = localStorage.getItem(\"UserType\");\n    if (localStorage.getItem(\"UserType\") == \"Super Admin\" || localStorage.getItem(\"UserType\") == \"Manager\") {\n      this.lists.userid = 0;\n    } else if (localStorage.getItem(\"UserType\") == \"Admin\") {\n      if (!this.lists.agentid) {\n        this.lists.userids = [];\n        this.lists.Userlist.forEach(element => {\n          this.lists.userids.push(element.id);\n        });\n        this.lists.Multiple = true;\n        this.lists.userid = localStorage.getItem(\"UserId\");\n      }\n    } else {\n      this.lists.userid = localStorage.getItem(\"UserId\");\n    }\n    if (this.lists.agentid) {\n      this.lists.userid = this.lists.agentid;\n    }\n    if (this.lists.adminid) {\n      this.lists.userids = [];\n      this.lists.Userlist.forEach(element => {\n        if (element.adminid == this.lists.adminid) {\n          this.lists.userids.push(element.id);\n        }\n      });\n    }\n    this.lists.myduedate = \"\";\n    if (this.lists.duedate) {\n      let duedate = new Date(this.lists.duedate);\n      let fduedate = moment(duedate).format(\"DD-MM-YYYY\");\n      this.lists.myduedate = fduedate;\n    }\n    this.common.PostMethod('BillReport', this.lists).then((res: any) => {\n      this.report = new MatTableDataSource(res.Data || []);\n      console.log(this.report);\n      this.report.paginator = this.paginator;\n      this.report.sort = this.sort;\n      this.lists.Totalamount = 0;\n      if (this.lists.duedate) {\n        this.lists.duedate = \"\";\n      }\n      res.Data.forEach(element => {\n        this.lists.Totalamount = this.lists.Totalamount + element.billamount;\n      });\n    });\n\n  }\n\n  GetUserList() {\n    if (localStorage.getItem(\"UserType\") == \"Super Admin\" || localStorage.getItem(\"UserType\") == \"Manager\") {\n      this.common.GetMethod(\"GetUserInfo\").then((res: any) => {\n        this.lists.Userlist = res.Data;\n        this.lists.Userlist.forEach(element => {\n          element.userinfo = element.name + \"-\" + element.Branchname;\n        });\n        this.ViewReport();\n      });\n    } else {\n      this.common.GetMethod(\"GetUserInfo?userid=\" + localStorage.getItem(\"UserId\")).then((res: any) => {\n        this.lists.Userlist = res.Data;\n        this.lists.Userlist.forEach(element => {\n          element.userinfo = element.name + \"-\" + element.Branchname;\n        });\n        this.ViewReport();\n      });\n    }\n  }\n\n  GetAdminList() {\n    this.common.PostMethod(\"GetfilterData\", { file: \"users\", name: \"usertype\", value: \"Admin\" }).then((res: any) => {\n      this.lists.Adminlist = res.Data;\n    });\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL1BvcnRhbC9SZXBvcnQvYmlsbHJldmVyc2FsL2JpbGxyZXZlcnNhbC5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatTableDataSource, MatPaginator, MatSort } from '@angular/material';\nimport { MatDatepickerInputEvent } from '@angular/material/datepicker';\nimport * as moment from \"moment\";\nimport { CommonService } from '../../Service/common.service';\n\n\n\n@Component({\n  selector: 'app-billreversal',\n  templateUrl: './billreversal.component.html',\n  styleUrls: ['./billreversal.component.css']\n})\nexport class BillreversalComponent implements OnInit {\n  hide = true;\n  lists: any = {};\n  duplicate: any = new MatTableDataSource();\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  constructor(public common: CommonService) {\n    this.lists.displayedColumns = ['receipt', 'kno', 'username', 'lastdate', 'cname', 'billamount', 'datetime', 'action'];\n    this.lists.billtab = 'duplicate';\n    this.lists.from = new Date();\n    this.lists.to = new Date();\n    this.lists.Backgroundcolor = [\"#FFBDAF\", \"#E5FFA8\", \"#A8FFD6\", \"#A8C8FF\", \"#F9A8FF\"];\n    this.GetDuplicateBill();\n    this.lists.orderlist = [{ name: \"Descending\", value: 'desc' }, { name: \"Ascending\", value: 'asc' }]\n\n  }\n\n  ngOnInit() {\n\n\n  }\n  GetDuplicateBill() {\n    let from = moment(this.lists.from).format(\"YYYY-MM-DD\");\n    let to = moment(this.lists.to).format(\"YYYY-MM-DD\");\n    this.common.PostMethod(\"FindSameBill\", { from: from, to: to }).then((res: any) => {\n      this.lists.duplicate = new MatTableDataSource(res.Data);\n      this.lists.duplicate.paginator = this.paginator;\n      this.lists.duplicate.sort = this.sort;\n    });\n  }\n  SearchBill() {\n    this.common.PostMethod(\"FindBill\", { kno: this.lists.kno, depositdate: this.lists.depositedate }).then((res: any) => {\n      this.lists.forcelist = new MatTableDataSource(res.Data);\n    });\n  }\n\n  BillReverse(ev) {\n    this.common.ConfirmMessage(\"Confirm Do you want to reverse this bill?\", (result: any) => {\n      if (result) {\n        console.log(ev);\n        ev.adminid = localStorage.getItem(\"UserId\");\n        this.common.PostMethod(\"BillReverse\", ev).then((res: any) => {\n          if (res.Status == 1) {\n            this.common.ToastMessage(\"Success\", res.Message);\n            this.GetDuplicateBill();\n          } else {\n            this.common.ToastMessage(\"Failed\", res.Message);\n\n          }\n        });\n      }\n    })\n  }\n  SearchReceipt() {\n    this.common.PostMethod(\"SearchReceipt\", { search: this.lists.forcesearch }).then((res: any) => {\n      console.log(res.Data);\n      this.lists.forcelist = new MatTableDataSource(res.Data);\n    });\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL1BvcnRhbC9SZXBvcnQvY29sbGVjdGlvbi9jb2xsZWN0aW9uLmNvbXBvbmVudC5jc3MifQ== */\"","import { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatTableDataSource, MatPaginator, MatSort } from '@angular/material';\nimport { CommonService } from '../../Service/common.service';\nimport * as moment from \"moment\";\n@Component({\n  selector: 'app-collection',\n  templateUrl: './collection.component.html',\n  styleUrls: ['./collection.component.css']\n})\nexport class CollectionComponent implements OnInit {\n  hide = true;\n  lists: any = {};\n  collectionform: FormGroup;\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  constructor(public common: CommonService, public fb: FormBuilder) {\n    this.lists.Totalamount = 0;\n    this.lists.Depositlist = new MatTableDataSource();\n    this.lists.fromdate = new Date();\n    this.lists.todate = new Date();\n    this.lists.displayedColumns = ['receipt', 'adminid', 'name', 'transaction', 'status', 'rdate', 'PresentAmount', 'action'];\n  }\n\n  ngOnInit() {\n    this.collectionform = this.fb.group({\n      agentid: new FormControl('', Validators.required),\n      type: new FormControl('', Validators.required),\n      transactionid: new FormControl(),\n      amount: new FormControl('', Validators.required),\n      userid: new FormControl(localStorage.getItem(\"UserId\"))\n    });\n  }\n\n  ngAfterViewInit(): void {\n    this.GetUserList();\n    this.GetDepositcollection();\n  }\n  GetDepositcollection() {\n    let id: any = localStorage.getItem(\"UserId\");\n    if (localStorage.getItem(\"UserType\") == 'Super Admin') {\n      id = 0;\n    }\n    let from = moment(this.lists.fromdate).format(\"YYYY-MM-DD\");\n    let to = moment(this.lists.fromdate).format(\"YYYY-MM-DD\");\n    let agentid = 0;\n    if (this.lists.agentid) {\n      agentid = this.lists.agentid;\n    }\n    this.common.GetMethod(\"GetDailyDeposit?id=\" + id + \"&from=\" + from + \"&to=\" + to + \"&agentid=\" + agentid).then((res: any) => {\n      this.lists.Depositlist = new MatTableDataSource(res.Data || []);\n      res.Data.forEach(element => {\n        this.lists.Totalamount = this.lists.Totalamount + parseInt(element.amount);\n      });\n      this.lists.Depositlist.paginator = this.paginator;\n      this.lists.Depositlist.sort = this.sort;\n    });\n  }\n\n  GetUserList() {\n    if (localStorage.getItem(\"UserType\") == \"Super Admin\") {\n      this.common.GetMethod(\"GetUserInfo\").then((res: any) => {\n        this.lists.Userlist = res.Data;\n        this.lists.Userlist.forEach(element => {\n          element.userinfo = element.name + \"-\" + element.Branchname;\n        });\n      });\n    } else {\n      this.common.GetMethod(\"GetUserInfo?userid=\" + localStorage.getItem(\"UserId\")).then((res: any) => {\n        this.lists.Userlist = res.Data;\n        this.lists.Userlist.forEach(element => {\n          element.userinfo = element.name + \"-\" + element.Branchname;\n        });\n      });\n    }\n  }\n\n  CashDeposit() {\n    this.lists.RecieptNO = new Date().valueOf() + localStorage.getItem(\"UserId\");\n    this.collectionform.value.receiptno = this.lists.RecieptNO;\n    this.common.PostMethod(\"DailyDeposit\", this.collectionform.value).then((res: any) => {\n      if (res.Status == 1) {\n        this.common.ToastMessage(\"Success\", res.Message);\n        this.print(this.collectionform.value);\n        this.GetDepositcollection();\n        this.collectionform.reset();\n        this.collectionform.controls[\"userid\"].setValue(localStorage.getItem(\"UserId\"));\n      } else {\n        this.common.ToastMessage(\"Fail\", res.Message);\n      }\n    });\n  }\n\n  print(ev): void {\n    let Depositor = JSON.parse(localStorage.getItem(\"UserProfile\"));\n    let agentname = \"\";\n    this.lists.Userlist.forEach(element => {\n      if (element.id == ev.agentid) {\n        agentname = element.name;\n      }\n    });\n    ev.depositorname = Depositor.name;\n    ev.agentname = agentname;\n    ev.datetime = new Date();\n    ev.RecieptNO = this.lists.RecieptNO;\n    this.common.CollectionReceipt(ev, '');\n  }\n  Reprint(ev) {\n    ev.RecieptNo = ev.receiptno;\n    let Depositor = JSON.parse(localStorage.getItem(\"UserProfile\"));\n    ev.agentname = ev.Agent;\n    ev.type = ev.t_type;\n    ev.transactionid = ev.t_id;\n    ev.depositorname = Depositor.name;\n    this.common.CollectionReceipt(ev, 'Duplicate Copy');\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL1BvcnRhbC9SZXBvcnQvY3JlZGl0cmVwb3J0L2NyZWRpdHJlcG9ydC5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatTableDataSource, MatPaginator, MatSort } from '@angular/material';\nimport { CommonService } from '../../Service/common.service';\nimport * as moment from 'moment';\n\n@Component({\n  selector: 'app-creditreport',\n  templateUrl: './creditreport.component.html',\n  styleUrls: ['./creditreport.component.css']\n})\nexport class CreditreportComponent implements OnInit {\n  hide = true;\n  lists: any = {};\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n  constructor(public common: CommonService) {\n    this.lists.TotalAmount = 0;\n    this.lists.from = new Date();\n    this.lists.to = new Date();\n    this.lists.displayedColumns = ['name', 'amount', 'type', 'datetime', 'message'];\n    this.GetMyCreditHistory();\n    this.GetUserList();\n    this.lists.Creditlist = [];\n    this.lists.Userlist = [];\n    this.lists.UserType = localStorage.getItem(\"UserType\");\n  }\n\n\n  ngOnInit() {\n    this.lists.Creditlist.paginator = this.paginator;\n    this.lists.Creditlist.sort = this.sort;\n  }\n\n\n  GetMyCreditHistory() {\n    let UserId: any = localStorage.getItem(\"UserId\");\n    let from = moment(this.lists.from).format(\"YYYY-MM-DD\");\n    let to = moment(this.lists.to).format(\"YYYY-MM-DD\");\n    if (localStorage.getItem(\"UserType\") == \"Super Admin\") {\n      UserId = 0;\n    }\n    if (this.lists.agentid) {\n      UserId = this.lists.agentid;\n    }\n    this.common.GetMethod('UserCreditHistory?Id=' + UserId + \"&from=\" + from + \"&to=\" + to).then((res: any) => {\n      this.lists.Creditlist = new MatTableDataSource(res.Data || []);\n      res.Data.forEach(element => {\n        this.lists.TotalAmount = this.lists.TotalAmount + parseInt(element.amount);\n      });\n      this.lists.Creditlist.paginator = this.paginator;\n      this.lists.Creditlist.sort = this.sort;\n    });\n  }\n\n  GetUserList() {\n    if (localStorage.getItem(\"UserType\") == 'Super Admin') {\n      this.common.GetMethod(\"GetUserInfo\").then((res: any) => {\n        this.lists.Userlist = res.Data;\n        this.lists.Userlist.forEach(element => {\n          element.userinfo = element.name + \"-\" + element.Branchname;\n        });\n      });\n    } else {\n      this.common.GetMethod(\"GetUserInfo?userid=\" + localStorage.getItem('UserId')).then((res: any) => {\n        this.lists.Userlist = res.Data;\n        this.lists.Userlist.forEach(element => {\n          element.userinfo = element.name + \"-\" + element.Branchname;\n        });\n      });\n    }\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL1BvcnRhbC9SZXBvcnQvZHVlL2R1ZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-due',\n  templateUrl: './due.component.html',\n  styleUrls: ['./due.component.css']\n})\nexport class DueComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL1BvcnRhbC9SZXBvcnQvcGF5dS9wYXl1LmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDatepickerInputEvent } from '@angular/material/datepicker';\nimport { MatTableDataSource, MatPaginator, MatSort } from '@angular/material';\nimport { CommonService } from '../../Service/common.service';\nimport * as moment from 'moment';\n\n\n@Component({\n  selector: 'app-payu',\n  templateUrl: './payu.component.html',\n  styleUrls: ['./payu.component.css']\n})\nexport class PayuComponent implements OnInit {\n  hide = true;\n  lists: any = {};\n  report: any = new MatTableDataSource();\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n  constructor(public common: CommonService) {\n    this.lists.displayedColumns = ['receipt', 'kno', 'username', 'lastdate', 'billamount', 'action'];\n    this.lists.from = new Date();\n    this.lists.to = new Date();\n    this.lists.Totalamount = 0;\n    this.lists.orderlist = [{ name: \"Descending\", value: 'desc' }, { name: \"Ascending\", value: 'asc' }]\n    this.GetUserList();\n    this.GetAdminList();\n  }\n\n  ngOnInit() {\n    this.report.paginator = this.paginator;\n    this.report.sort = this.sort;\n    this.lists.userType = localStorage.getItem(\"UserType\");\n  }\n\n  ViewReport() {\n    this.lists.from = moment(this.lists.from).format(\"YYYY-MM-DD\");\n    this.lists.to = moment(this.lists.to).format(\"YYYY-MM-DD\");\n\n    this.common.PostMethod('GetPayuReport', this.lists).then((res: any) => {\n      res.Data.forEach(element => {\n        element.info = JSON.parse(element.info);\n      });\n      console.log(res);\n      this.report = new MatTableDataSource(res.Data || []);\n      console.log(this.report);\n      this.report.paginator = this.paginator;\n      this.report.sort = this.sort;\n    });\n  }\n\n  GetUserList() {\n    if (localStorage.getItem(\"UserType\") == \"Super Admin\" || localStorage.getItem(\"UserType\") == \"Manager\") {\n      this.common.GetMethod(\"GetUserInfo\").then((res: any) => {\n        this.lists.Userlist = res.Data;\n        this.lists.Userlist.forEach(element => {\n          element.userinfo = element.name + \"-\" + element.Branchname;\n        });\n        this.ViewReport();\n      });\n    } else {\n      this.common.GetMethod(\"GetUserInfo?userid=\" + localStorage.getItem(\"UserId\")).then((res: any) => {\n        this.lists.Userlist = res.Data;\n        this.lists.Userlist.forEach(element => {\n          element.userinfo = element.name + \"-\" + element.Branchname;\n        });\n        this.ViewReport();\n      });\n    }\n  }\n\n  GetAdminList() {\n    this.common.PostMethod(\"GetfilterData\", { file: \"users\", name: \"usertype\", value: \"Admin\" }).then((res: any) => {\n      this.lists.Adminlist = res.Data;\n    });\n  }\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\n\r\nimport { DemoMaterialModule } from '../../demo-material-module';\r\nimport { BilldepositreportComponent } from './billdepositreport/billdepositreport.component';\r\nimport { ReportRoutes } from './report.routing';\r\nimport { BillreversalComponent } from './billreversal/billreversal.component';\r\nimport { CollectionComponent } from './collection/collection.component';\r\nimport { CreditreportComponent } from './creditreport/creditreport.component';\r\nimport { UsercollectionComponent } from './usercollection/usercollection.component';\r\nimport { UserworkComponent } from './userwork/userwork.component';\r\nimport { DueComponent } from './due/due.component';\r\nimport { ReversedComponent } from './reversed/reversed.component';\r\nimport { NgxMatSelectSearchModule } from 'ngx-mat-select-search';\r\nimport { PipeModule } from './../Pipes/pipe/pipe.module';\r\nimport { MatFormFieldModule, MatSelectModule } from '@angular/material';\nimport { PayuComponent } from './payu/payu.component';\nimport { AmazonreportComponent } from './amazonreport/amazonreport.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(ReportRoutes),\r\n    DemoMaterialModule,\r\n    FlexLayoutModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    PipeModule,\r\n    MatSelectModule,\r\n    MatFormFieldModule,\r\n    NgxMatSelectSearchModule,\r\n  ],\r\n  declarations: [\r\n   BilldepositreportComponent,\r\n   BillreversalComponent,\r\n   CollectionComponent,\r\n   CreditreportComponent,\r\n   UsercollectionComponent,\r\n   UserworkComponent,\r\n   DueComponent,\r\n   ReversedComponent,\r\n   PayuComponent,\r\n   AmazonreportComponent\r\n  ]\r\n})\r\nexport class ReportModule {}\r\n","import { PayuComponent } from './payu/payu.component';\r\nimport { Routes } from '@angular/router';\r\nimport { BilldepositreportComponent } from './billdepositreport/billdepositreport.component';\r\nimport { BillreversalComponent } from './billreversal/billreversal.component';\r\nimport { CollectionComponent } from './collection/collection.component';\r\nimport { CreditreportComponent } from './creditreport/creditreport.component';\r\nimport { UsercollectionComponent } from './usercollection/usercollection.component';\r\nimport { UserworkComponent } from './userwork/userwork.component';\r\nimport { ReversedComponent } from './reversed/reversed.component';\r\nimport { AmazonreportComponent } from './amazonreport/amazonreport.component';\r\n\r\nexport const ReportRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    children: [\r\n      {\r\n        path: 'billdeposit',\r\n        component: BilldepositreportComponent,\r\n        data: {\r\n          title: 'Bill Deposit Report',\r\n          urls: [\r\n            { title: 'Dashboard', url: '/dashboard' },\r\n            { title: 'Bill Deposit Report' }\r\n          ]\r\n\r\n        }\r\n      },\r\n      {\r\n        path: 'billreversal',\r\n        component: BillreversalComponent,\r\n        data: {\r\n          title: 'Bill Reversal Report',\r\n          urls: [\r\n            { title: 'Dashboard', url: '/dashboard' },\r\n            { title: 'Bill Reversal Report' }\r\n          ]\r\n\r\n        }\r\n      },\r\n      {\r\n        path: 'collection',\r\n        component: CollectionComponent,\r\n        data: {\r\n          title: 'Collection Report',\r\n          urls: [\r\n            { title: 'Dashboard', url: '/dashboard' },\r\n            { title: 'Collection Report' }\r\n          ]\r\n\r\n        }\r\n      },\r\n\r\n      {\r\n        path: 'amazonreport',\r\n        component: AmazonreportComponent,\r\n        data: {\r\n          title: 'Amazon Report',\r\n          urls: [\r\n            { title: 'Dashboard', url: '/dashboard' },\r\n            { title: 'Amazon Report' }\r\n          ]\r\n\r\n        }\r\n      },\r\n\r\n      {\r\n        path: 'creditreport',\r\n        component: CreditreportComponent,\r\n        data: {\r\n          title: 'Credit Report',\r\n          urls: [\r\n            { title: 'Dashboard', url: '/dashboard' },\r\n            { title: 'Credit Report' }\r\n          ]\r\n\r\n        }\r\n      },\r\n      {\r\n        path: 'usercollection',\r\n        component: UsercollectionComponent,\r\n        data: {\r\n          title: 'User Collection Report',\r\n          urls: [\r\n            { title: 'Dashboard', url: '/dashboard' },\r\n            { title: 'User Collection Report' }\r\n          ]\r\n\r\n        }\r\n      },\r\n      {\r\n        path: 'userwork',\r\n        component: UserworkComponent,\r\n        data: {\r\n          title: 'User Work Report',\r\n          urls: [\r\n            { title: 'Dashboard', url: '/dashboard' },\r\n            { title: 'User Work Report' }\r\n          ]\r\n\r\n        }\r\n      },\r\n      {\r\n        path: 'reversedreport',\r\n        component: ReversedComponent,\r\n        data: {\r\n          title: 'Reversed Bill Report',\r\n          urls: [\r\n            { title: 'Dashboard', url: '/dashboard' },\r\n            { title: 'Reversed Bill Report' }\r\n          ]\r\n\r\n        },\r\n        \r\n      },\r\n      {\r\n        path: 'payu',\r\n        component: PayuComponent,\r\n        data: {\r\n          title: 'Payu Transaction Report',\r\n          urls: [\r\n            { title: 'Dashboard', url: '/dashboard' },\r\n            { title: 'Payu Transaction Report' }\r\n          ]\r\n\r\n        },\r\n        \r\n      },\r\n      \r\n    ]\r\n  },\r\n\r\n];\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL1BvcnRhbC9SZXBvcnQvcmV2ZXJzZWQvcmV2ZXJzZWQuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDatepickerInputEvent } from '@angular/material/datepicker';\nimport { MatTableDataSource, MatPaginator, MatSort } from '@angular/material';\nimport { CommonService } from '../../Service/common.service';\nimport * as moment from 'moment';\n\n@Component({\n  selector: 'app-reversed',\n  templateUrl: './reversed.component.html',\n  styleUrls: ['./reversed.component.css']\n})\nexport class ReversedComponent implements OnInit {\n  hide = true;\n  lists: any = {};\n  report: any = new MatTableDataSource();\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  constructor(public common: CommonService) { \n    this.lists.displayedColumns = ['receipt', 'kno', 'username', 'lastdate', 'cname', 'billamount', 'datetime'];\n    this.lists.from = new Date();\n    this.lists.to = new Date();\n    this.lists.Totalamount = 0;\n    this.lists.orderlist = [{ name: \"Descending\", value: 'desc' }, { name: \"Ascending\", value: 'asc' }]\n    this.GetUserList();\n    this.GetAdminList();\n  }\n\n  ngOnInit() {\n    this.report.paginator = this.paginator;\n    this.report.sort = this.sort;\n    this.lists.userType=localStorage.getItem(\"UserType\");\n  }\n  ViewReport() {\n    this.lists.Multiple = false;\n    this.lists.userids = false;\n    this.lists.from = moment(this.lists.from).format(\"YYYY-MM-DD\");\n    this.lists.to = moment(this.lists.to).format(\"YYYY-MM-DD\");\n    this.lists.userType = localStorage.getItem(\"UserType\");\n    if (localStorage.getItem(\"UserType\") == \"Super Admin\" || localStorage.getItem(\"UserType\") == \"Manager\") {\n      this.lists.userid = 0;\n    } else if (localStorage.getItem(\"UserType\") == \"Admin\") {\n      if (!this.lists.agentid) {\n        this.lists.userids = [];\n        this.lists.Userlist.forEach(element => {\n          this.lists.userids.push(element.id);\n        });\n        this.lists.Multiple = true;\n        this.lists.userid = localStorage.getItem(\"UserId\");\n      }\n    } else {\n      this.lists.userid = localStorage.getItem(\"UserId\");\n    }\n    if (this.lists.agentid) {\n      this.lists.userid = this.lists.agentid;\n    }\n    if (this.lists.adminid) {\n      this.lists.userids = [];\n      this.lists.Userlist.forEach(element => {\n        if (element.adminid == this.lists.adminid) {\n          this.lists.userids.push(element.id);\n        }\n      });\n    }\n    this.lists.myduedate = \"\";\n    if (this.lists.duedate) {\n      let duedate = new Date(this.lists.duedate);\n      let fduedate = moment(duedate).format(\"DD-MM-YYYY\");\n      this.lists.myduedate = fduedate;\n    }\n    this.common.PostMethod('GetReversedBills', this.lists).then((res: any) => {\n      this.report = new MatTableDataSource(res.Data || []);\n      console.log(this.report);\n      this.report.paginator = this.paginator;\n      this.report.sort = this.sort;\n      this.lists.Totalamount = 0;\n      if (this.lists.duedate) {\n        this.lists.duedate = \"\";\n      }\n      res.Data.forEach(element => {\n        this.lists.Totalamount = this.lists.Totalamount + element.billamount;\n      });\n    });\n\n  }\n\n  GetUserList() {\n    if (localStorage.getItem(\"UserType\") == \"Super Admin\" || localStorage.getItem(\"UserType\") == \"Manager\") {\n      this.common.GetMethod(\"GetUserInfo\").then((res: any) => {\n        this.lists.Userlist = res.Data;\n        this.lists.Userlist.forEach(element => {\n          element.userinfo = element.name + \"-\" + element.Branchname;\n        });\n        this.ViewReport();\n      });\n    } else {\n      this.common.GetMethod(\"GetUserInfo?userid=\" + localStorage.getItem(\"UserId\")).then((res: any) => {\n        this.lists.Userlist = res.Data;\n        this.lists.Userlist.forEach(element => {\n          element.userinfo = element.name + \"-\" + element.Branchname;\n        });\n        this.ViewReport();\n      });\n    }\n  }\n\n   GetAdminList() {\n    this.common.PostMethod(\"GetfilterData\", { file: \"users\", name: \"usertype\", value: \"Admin\" }).then((res: any) => {\n      this.lists.Adminlist = res.Data;\n    });\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL1BvcnRhbC9SZXBvcnQvdXNlcmNvbGxlY3Rpb24vdXNlcmNvbGxlY3Rpb24uY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material';\nimport * as moment from \"moment\";\nimport { CommonService } from '../../Service/common.service';\n\nimport domtoimage from 'dom-to-image';\n@Component({\n  selector: 'app-usercollection',\n  templateUrl: './usercollection.component.html',\n  styleUrls: ['./usercollection.component.css']\n})\nexport class UsercollectionComponent implements OnInit {\n  hide = true;\n  lists: any = {};\n  report: any = [];\n  newreport: any = [];\n  constructor(public comman: CommonService) {\n    this.report = new MatTableDataSource();\n    this.lists.displayedColumns = ['no', 'name', 'mobile', 'TotalAmount', 'Totalbill'];\n    this.lists.from = new Date();\n    this.lists.to = new Date();\n    this.lists.Totalamount = 0;\n    this.GetAdminList();\n    this.GetUserList();\n    this.lists.usertype = localStorage.getItem(\"UserType\");\n  }\n  ngOnInit() {\n  }\n  ViewReport() {\n    this.lists.from = moment(this.lists.from).format(\"YYYY-MM-DD\");\n    this.lists.to = moment(this.lists.to).format(\"YYYY-MM-DD\");\n    this.lists.usertype = localStorage.getItem(\"UserType\");\n    if (this.lists.adminid) {\n      this.lists.userid = localStorage.getItem(\"UserId\");\n    }\n    if (localStorage.getItem(\"UserType\") == \"Admin\") {\n      this.lists.userid = localStorage.getItem(\"UserId\");\n    }\n    this.comman.PostMethod('UserWiseBillReport', this.lists).then((res: any) => {\n      this.report = res.Data;\n    });\n\n  }\n  Search(ev) {\n    // console.log(ev);\n    // let search = ev.target.value;\n    // if (search) {\n    //   this.report = this.newreport;\n    //   if (search && search.trim() != '') {\n    //     this.report = this.report.filter((item) => {\n    //       search = parseInt(search);\n    //       return (item.kno.indexOf(search) > -1);\n    //     })\n    //   }\n    // }\n  }\n  GetUserList() {\n    if (localStorage.getItem(\"UserType\") == \"Super Admin\" || localStorage.getItem(\"UserType\") == \"Manager\") {\n      this.comman.GetMethod(\"GetUserInfo\").then((res: any) => {\n        this.lists.Userlist = res.Data;\n        this.lists.Userlist.forEach(element => {\n          element.userinfo = element.name + \"-\" + element.Branchname;\n        });\n        this.ViewReport();\n      });\n    } else {\n      this.comman.GetMethod(\"GetUserInfo?userid=\" + localStorage.getItem(\"UserId\")).then((res: any) => {\n        this.lists.Userlist = res.Data;\n        this.lists.Userlist.forEach(element => {\n          element.userinfo = element.name + \"-\" + element.Branchname;\n        });\n        this.ViewReport();\n      });\n    }\n  }\n\n  GetAdminList() {\n    this.comman.PostMethod(\"GetfilterData\", { file: \"users\", name: \"usertype\", value: \"Admin\" }).then((res: any) => {\n      this.lists.Adminlist = res.Data;\n    });\n  }\n\n  printDiv() {\n    let node = document.getElementById('my-node');\n   domtoimage.toPng(node)\n      .then((dataUrl) => {\n        let popup = window.open();\n        popup.document.write('<img src=' + dataUrl + '>');\n        popup.document.close();\n        setTimeout(() => {\n          popup.focus();\n          popup.print();\n          popup.close();\n        }, 1000);\n\n      });\n  }\n\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL1BvcnRhbC9SZXBvcnQvdXNlcndvcmsvdXNlcndvcmsuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatDatepickerInputEvent } from '@angular/material/datepicker';\nimport { MatTableDataSource, MatPaginator, MatSort } from '@angular/material';\nimport { CommonService } from '../../Service/common.service';\nimport * as moment from \"moment\";\n@Component({\n  selector: 'app-userwork',\n  templateUrl: './userwork.component.html',\n  styleUrls: ['./userwork.component.css']\n})\nexport class UserworkComponent implements OnInit {\n  hide = true;\n  lists: any = {};\n  report: any = [];\n  newreport: any = [];\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  constructor(public comman: CommonService) {\n    this.lists.displayedColumns = ['receipt', 'kno', 'cname', 'mobile', 'billamount', 'lastdate', 'username', 'billstatus'];\n    this.lists.from = new Date();\n    this.lists.to = new Date();\n    this.lists.Totalamount = 0;\n    this.lists.Totalworkassign = 0;\n    this.lists.Totalworkassignsub = 0;\n    this.lists.Totalworkassignpen = 0;\n    this.lists.orderlist = [{ name: \"Descending\", value: 'desc' }, { name: \"Ascending\", value: 'asc' }]\n    this.GetUserList();\n    this.GetDepositorlist();\n  }\n\n  ngOnInit() {\n    this.report.paginator = this.paginator;\n    this.report.sort = this.sort;\n  }\n\n  GetUserList() {\n    if (localStorage.getItem(\"UserType\") == \"Super Admin\" || localStorage.getItem(\"UserType\") == \"Manager\") {\n      this.comman.GetMethod(\"GetUserInfo\").then((res: any) => {\n        this.lists.Userlist = res.Data;\n        this.lists.Userlist.forEach(element => {\n          element.userinfo = element.name + \"-\" + element.Branchname;\n        });\n        this.ViewReport();\n      });\n    } else {\n      this.comman.GetMethod(\"GetUserInfo?userid=\" + localStorage.getItem(\"UserId\")).then((res: any) => {\n        this.lists.Userlist = res.Data;\n        this.lists.Userlist.forEach(element => {\n          element.userinfo = element.name + \"-\" + element.Branchname;\n        });\n        this.ViewReport();\n      });\n    }\n  }\n\n  GetDepositorlist() {\n    this.comman.PostMethod(\"GetfilterData\", { file: \"users\", name: \"usertype\", value: \"Depositor\" }).then((res: any) => {\n      this.lists.depositorlist = res.Data;\n    });\n  }\n\n  ViewReport() {\n    this.lists.Multiple = false;\n    this.lists.userids = false;\n    this.lists.from = moment(this.lists.from).format(\"YYYY-MM-DD\");\n    this.lists.to = moment(this.lists.to).format(\"YYYY-MM-DD\");\n    this.lists.userType = localStorage.getItem(\"UserType\");\n    if (localStorage.getItem(\"UserType\") == \"Super Admin\" || localStorage.getItem(\"UserType\") == \"Manager\") {\n      this.lists.userid = 0;\n    } else if (localStorage.getItem(\"UserType\") == \"Admin\") {\n      if (!this.lists.agentid) {\n        this.lists.userids = [];\n        this.lists.Userlist.forEach(element => {\n          this.lists.userids.push(element.id);\n        });\n        this.lists.Multiple = true;\n        this.lists.userid = localStorage.getItem(\"UserId\");\n      }\n    } else {\n      this.lists.userid = localStorage.getItem(\"UserId\");\n    }\n    if (this.lists.agentid) {\n      this.lists.userid = this.lists.agentid;\n    }\n    if (this.lists.adminid) {\n      this.lists.userids = [];\n      this.lists.Userlist.forEach(element => {\n        if (element.adminid == this.lists.adminid) {\n          this.lists.userids.push(element.id);\n        }\n      });\n    }\n    this.lists.myduedate = \"\";\n    if (this.lists.duedate) {\n      let duedate = new Date(this.lists.duedate);\n      let fduedate = moment(duedate).format(\"DD-MM-YYYY\");\n      this.lists.myduedate = fduedate;\n    }\n    this.comman.PostMethod('GetAssingBill', this.lists).then((res: any) => {\n      this.report = new MatTableDataSource(res.Data);\n      this.report.paginator = this.paginator;\n      this.report.sort = this.sort;\n      this.newreport = res.Data;\n      this.lists.Totalamount = 0;\n      if (this.lists.duedate) {\n        this.lists.duedate = \"\";\n      }\n      this.lists.assignlist = 0;\n      this.lists.successlist = 0;\n      this.lists.onholdlist = 0;\n      res.Data.forEach(element => {\n        if (element.billstatus == \"Assign\") {\n          this.lists.assignlist = this.lists.assignlist + 1;\n        }\n        if (element.billstatus == \"On Hold\") {\n          this.lists.onholdlist = this.lists.onholdlist + 1;\n        }\n        if (element.billstatus == \"Success\") {\n          this.lists.successlist = this.lists.successlist + 1;\n        }\n        this.lists.Totalamount = this.lists.Totalamount + element.billamount;\n      });\n    });\n\n  }\n}\n"],"sourceRoot":""}