{"version":3,"sources":["webpack:///./src/app/Portal/User/createuser/createuser.component.html","webpack:///./src/app/Portal/User/profile/profile.component.html","webpack:///./src/app/Portal/User/userlist/userlist.component.html","webpack:///./src/app/Portal/User/createuser/createuser.component.css","webpack:///./src/app/Portal/User/createuser/createuser.component.ts","webpack:///./src/app/Portal/User/profile/profile.component.css","webpack:///./src/app/Portal/User/profile/profile.component.ts","webpack:///./src/app/Portal/User/user.module.ts","webpack:///./src/app/Portal/User/user.routing.ts","webpack:///./src/app/Portal/User/userlist/userlist.component.css","webpack:///./src/app/Portal/User/userlist/userlist.component.ts"],"names":[],"mappings":"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","file":"Portal-User-user-module-es5.js","sourcesContent":["module.exports = \"<mat-card>\\r\\n    <mat-card-content>\\r\\n        <!--start stepper-->\\r\\n        <mat-horizontal-stepper linear #stepper>\\r\\n            <!-- <mat-step [stepControl]=\\\"firstFormGroup\\\"> -->\\r\\n            <mat-step>\\r\\n                <form [formGroup]=\\\"firstFormGroup\\\">\\r\\n                    <ng-template matStepLabel>Basic Info</ng-template>\\r\\n                    <div fxLayout=\\\"row wrap\\\">\\r\\n                        \\r\\n                        <div class=\\\"p-10\\\" fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\r\\n                            <mat-form-field>\\r\\n                                <input matInput placeholder=\\\"FirstName\\\" formControlName=\\\"firstname\\\" required>\\r\\n                            </mat-form-field>\\r\\n                            <p class=\\\"text-danger m-t-0 font-16\\\"\\r\\n                                *ngIf=\\\"firtsForm.firstname.touched && (firtsForm.firstname.errors?.minlength || firtsForm.firstname.errors?.maxlength)\\\">\\r\\n                                First Name should be of Min. 3 characters, Max. 20 characters.</p>\\r\\n                            <p class=\\\"text-danger m-t-0 font-16\\\"\\r\\n                                *ngIf=\\\"firtsForm.firstname.touched && firtsForm.firstname.errors?.pattern\\\">\\r\\n                                First Name contains only characters.</p>\\r\\n                        </div>\\r\\n                        <div class=\\\"p-10\\\" fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\r\\n                            <mat-form-field>\\r\\n                                <input matInput placeholder=\\\"Last Name\\\" formControlName=\\\"lastname\\\" required>\\r\\n                            </mat-form-field>\\r\\n                            <p class=\\\"text-danger m-t-0 font-16\\\"\\r\\n                                *ngIf=\\\"firtsForm.lastname.touched && (firtsForm.lastname.errors?.minlength || firtsForm.lastname.errors?.maxlength)\\\">\\r\\n                                Last Name should be of Min. 3 characters, Max. 20 characters.</p>\\r\\n                            <p class=\\\"text-danger m-t-0 font-16\\\"\\r\\n                                *ngIf=\\\"firtsForm.lastname.touched && firtsForm.lastname.errors?.pattern\\\">\\r\\n                                Last Name contains only characters.</p>\\r\\n                        </div>\\r\\n                        <div class=\\\"p-10\\\" fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"33.33\\\" fxFlex=\\\"100\\\">\\r\\n                            <mat-form-field>\\r\\n                                <mat-label>User Type</mat-label>\\r\\n                                <mat-select formControlName=\\\"usertype\\\" >\\r\\n                                    <mat-option>--</mat-option>\\r\\n                                    <mat-option *ngFor=\\\"let a of usertypearray\\\" [value]=\\\"a.id\\\" required>\\r\\n                                        {{a.name}}\\r\\n                                    </mat-option>\\r\\n                                </mat-select>\\r\\n                              </mat-form-field>                          \\r\\n                        </div>\\r\\n                        <div class=\\\"p-10\\\" fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"33.33\\\" fxFlex=\\\"100\\\">\\r\\n                            <mat-form-field>\\r\\n                                <span matPrefix>+91 &nbsp;</span>\\r\\n                                <input type=\\\"tel\\\" matInput placeholder=\\\"Mobile Number\\\" formControlName=\\\"mobnumber\\\"\\r\\n                                    required>\\r\\n                            </mat-form-field>\\r\\n                            <p class=\\\"text-danger m-t-0 font-16\\\"\\r\\n                                *ngIf=\\\"firtsForm.mobnumber.touched && firtsForm.mobnumber.hasError('required')\\\">\\r\\n                                Mobile Number Cannot be blank.\\r\\n                            </p>\\r\\n                            <p class=\\\"text-danger m-t-0 font-16\\\"\\r\\n                                *ngIf=\\\"firtsForm.mobnumber.touched && (firtsForm.mobnumber.errors?.minlength || firtsForm.mobnumber.errors?.maxlength)\\\">\\r\\n                                Mobile Number Should be of atleast 10 digit.\\r\\n                            </p>\\r\\n                            <p class=\\\"text-danger m-t-0 font-16\\\"\\r\\n                                *ngIf=\\\"firtsForm.mobnumber.touched &&(firtsForm.mobnumber.errors?.pattern)\\\">\\r\\n                                Use Digits Only.\\r\\n                            </p>\\r\\n                        </div>\\r\\n                        <div class=\\\"p-10\\\" fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"33.33\\\" fxFlex=\\\"100\\\">\\r\\n                            <mat-form-field>\\r\\n                                <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\" required>\\r\\n                            </mat-form-field>\\r\\n                            <p *ngIf=\\\"firtsForm.email.hasError('pattern') && firtsForm.email.touched\\\"\\r\\n                                class=\\\"text-danger m-t-0 font-16\\\">Please Enter Valid Email.</p>\\r\\n                        </div>                        \\r\\n                        <div class=\\\"p-10\\\" fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\r\\n                            <mat-form-field>\\r\\n                                <input matInput placeholder=\\\"Enter your password\\\" formControlName=\\\"password\\\"\\r\\n                                    [type]=\\\"hide ? 'password' : 'text'\\\">\\r\\n                                <button mat-icon-button matSuffix (click)=\\\"hide = !hide\\\"\\r\\n                                    [attr.aria-label]=\\\"'Hide password'\\\" [attr.aria-pressed]=\\\"hide\\\">\\r\\n                                    <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n                                </button>\\r\\n                            </mat-form-field>\\r\\n                            <p class=\\\"text-danger m-t-0 font-16\\\"\\r\\n                                *ngIf=\\\"firtsForm.password.touched && (firtsForm.password.errors?.required||firtsForm.password.errors?.minlength||firtsForm.password.errors?.maxlength||firtsForm.password.errors?.pattern)\\\">\\r\\n                                Password should be of Min. 8 characters,Max. 30 characters, which must contain at least\\r\\n                                one Special\\r\\n                                character, one Capital letter, one Small letter and one Numeric value.</p>\\r\\n                        </div>\\r\\n                        <div class=\\\"p-10\\\" fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\r\\n                            <mat-form-field>\\r\\n                                <input matInput placeholder=\\\"Confirm your password\\\" [type]=\\\"hide1 ? 'password' : 'text'\\\"\\r\\n                                    formControlName=\\\"confirmPassword\\\">\\r\\n                                <button mat-icon-button matSuffix (click)=\\\"hide1 = !hide1\\\"\\r\\n                                    [attr.aria-label]=\\\"'Hide password'\\\" [attr.aria-pressed]=\\\"hide1\\\">\\r\\n                                    <mat-icon>{{hide1 ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n                                </button>\\r\\n                            </mat-form-field>\\r\\n                            <p *ngIf=\\\"firtsForm.confirmPassword.errors?.equalTo && firtsForm.confirmPassword.touched\\\"\\r\\n                                class=\\\"text-danger m-t-0 font-16\\\">Passwords do not math.</p>\\r\\n                        </div>                        \\r\\n                    </div>\\r\\n                </form>\\r\\n                <div fxLayout=\\\"row wrap\\\">\\r\\n                    <div *ngIf=\\\"firstFormGroup.value.usertype > 2\\\" class=\\\"p-10\\\" fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\r\\n                        <button mat-raised-button  [disabled]=\\\"!firstFormGroup.valid\\\" class=\\\"pull-right\\\" color=\\\"primary\\\" (click)=\\\"CreateUser()\\\"\\r\\n                        >Submit</button>\\r\\n                    </div>\\r\\n                    <div *ngIf=\\\"firstFormGroup.value.usertype < 3\\\" class=\\\"p-10\\\" fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                        <button mat-raised-button color=\\\"warn\\\" class=\\\"pull-right\\\" matStepperNext>Next</button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step *ngIf=\\\"firstFormGroup.value.usertype < 3\\\" [optional]=\\\"isOptional\\\">\\r\\n                <!-- <mat-step *ngIf=\\\"!usertype\\\" [stepControl]=\\\"secondFormGroup\\\" [optional]=\\\"isOptional\\\"> -->\\r\\n                <form [formGroup]=\\\"secondFormGroup\\\">\\r\\n                    <ng-template matStepLabel>Fill out your address</ng-template>\\r\\n                    <div fxLayout=\\\"row wrap\\\">\\r\\n                        <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                            <label><b>Permanent Address</b></label>\\r\\n                        </div>\\r\\n                        <div class=\\\"p-l-10 p-r-10\\\" fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                            <mat-form-field>\\r\\n                                <textarea matInput placeholder=\\\"Address\\\" formControlName=\\\"perAddress\\\"\\r\\n                                    required></textarea>\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                        <div class=\\\"p-l-10 p-r-10\\\" fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"33.33\\\" fxFlex=\\\"100\\\">\\r\\n                            <mat-form-field>\\r\\n                                <mat-select placeholder=\\\"Select State\\\" (selectionChange)=\\\"GetCity()\\\"\\r\\n                                    formControlName=\\\"perState\\\" required>\\r\\n                                    <mat-option>--</mat-option>\\r\\n                                    <mat-option *ngFor=\\\"let state of statearray\\\" [value]=\\\"state.id\\\">{{state.name}}\\r\\n                                    </mat-option>\\r\\n                                </mat-select>\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                        <div class=\\\"p-l-10 p-r-10\\\" fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"33.33\\\" fxFlex=\\\"100\\\">\\r\\n                            <mat-form-field>\\r\\n                                <mat-select placeholder=\\\"Select City\\\" formControlName=\\\"perCity\\\" required>\\r\\n                                    <mat-option>--</mat-option>\\r\\n                                    <mat-option *ngFor=\\\"let city of cityarray\\\" [value]=\\\"city.id\\\">{{city.name}}\\r\\n                                    </mat-option>\\r\\n                                </mat-select>\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                        <div class=\\\"p-l-10 p-r-10\\\" fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"33.33\\\" fxFlex=\\\"100\\\">\\r\\n                            <mat-form-field>\\r\\n                                <input matInput type=\\\"number\\\" placeholder=\\\"Pincode\\\" formControlName=\\\"perPincode\\\"\\r\\n                                    required>\\r\\n                            </mat-form-field>\\r\\n                            <p class=\\\"text-danger m-t-0 font-16\\\"\\r\\n                                *ngIf=\\\"secondForm.perPincode.touched && (secondForm.perPincode.errors?.maxLength || secondForm.perPincode.errors?.min || secondForm.perPincode.errors?.max)\\\">\\r\\n                                Pincode code Contains only 6 digits.</p>\\r\\n                        </div>\\r\\n                        <div fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\r\\n                            <label><b>Correspondance Address</b></label>\\r\\n                        </div>\\r\\n                        <div fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\r\\n                            <section>\\r\\n                                <mat-checkbox (change)=\\\"AddressCopy($event)\\\">Same as Permanent</mat-checkbox>\\r\\n                            </section>\\r\\n                        </div>\\r\\n                        <div class=\\\"p-l-10 p-r-10\\\" fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                            <mat-form-field>\\r\\n                                <textarea matInput placeholder=\\\"Address\\\" formControlName=\\\"corresAddress\\\"\\r\\n                                    required></textarea>\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                        <div class=\\\"p-l-10 p-r-10\\\" fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"33.33\\\" fxFlex=\\\"100\\\">\\r\\n                            <mat-form-field>\\r\\n                                <mat-select placeholder=\\\"Select State\\\" (selectionChange)=\\\"GetCityCors()\\\"\\r\\n                                    formControlName=\\\"corresState\\\" required>\\r\\n                                    <mat-option>--</mat-option>\\r\\n                                    <mat-option *ngFor=\\\"let state of statearray\\\" [value]=\\\"state.id\\\">{{state.name}}\\r\\n                                    </mat-option>\\r\\n                                </mat-select>\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                        <div class=\\\"p-l-10 p-r-10\\\" fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"33.33\\\" fxFlex=\\\"100\\\">\\r\\n                            <mat-form-field>\\r\\n                                <mat-select placeholder=\\\"Select City\\\" formControlName=\\\"corresCity\\\" required>\\r\\n                                  <mat-option>--</mat-option>\\r\\n                                  <mat-option *ngFor=\\\"let city of cityarraycors\\\" [value]=\\\"city.id\\\">{{city.name}}</mat-option>\\r\\n                                </mat-select>\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                        <div class=\\\"p-l-10 p-r-10\\\" fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"33.33\\\" fxFlex=\\\"100\\\">\\r\\n                            <mat-form-field>\\r\\n                                <input matInput type=\\\"number\\\" placeholder=\\\"Pincode\\\" formControlName=\\\"corresPincode\\\"\\r\\n                                    required>\\r\\n                            </mat-form-field>\\r\\n                            <p class=\\\"text-danger m-t-0 font-16\\\"\\r\\n                                *ngIf=\\\"secondForm.corresPincode.touched && (secondForm.corresPincode.errors?.maxLength || secondForm.corresPincode.errors?.min || secondForm.corresPincode.errors?.max)\\\">\\r\\n                                Pincode code Contains only 6 digits.</p>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div>\\r\\n                        <button mat-raised-button color=\\\"accent\\\" matStepperPrevious>Back</button>\\r\\n                        <button mat-raised-button class=\\\"pull-right\\\" color=\\\"warn\\\" (click)=\\\"checkaccountnolength();\\\"\\r\\n                            matStepperNext>Next</button>\\r\\n                    </div>\\r\\n                </form>\\r\\n            </mat-step>\\r\\n            <mat-step *ngIf=\\\"firstFormGroup.value.usertype < 3\\\" [optional]=\\\"isOptional\\\">\\r\\n                <form [formGroup]=\\\"thirdFormGroup\\\">\\r\\n                    <ng-template matStepLabel>Bank Information</ng-template>\\r\\n                    <div fxLayout=\\\"row wrap\\\">\\r\\n                        <div fxFlex.gt-sm=\\\"50\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                            <mat-form-field>\\r\\n                                <input matInput formControlName=\\\"bankname\\\" placeholder=\\\"Bank Name\\\" required>\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                        <div fxFlex.gt-sm=\\\"50\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                            <mat-form-field>\\r\\n                                <input matInput type=\\\"number\\\" formControlName=\\\"accountno\\\" placeholder=\\\"Account No\\\"\\r\\n                                    required>\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                        <div fxFlex.gt-sm=\\\"50\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                            <mat-form-field>\\r\\n                                <mat-label>Account Type</mat-label>\\r\\n                                <mat-select formControlName=\\\"accttype\\\">\\r\\n                                    <mat-option>--</mat-option>\\r\\n                                    <mat-option *ngFor=\\\"let a of AcctTypelist\\\" [value]=\\\"a.name\\\" required>\\r\\n                                        {{a.name}}\\r\\n                                    </mat-option>\\r\\n                                </mat-select>\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                        <div fxFlex.gt-sm=\\\"50\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                            <mat-form-field>\\r\\n                                <input matInput formControlName=\\\"ifsccode\\\" placeholder=\\\"IFSC Code\\\" required>\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"m-0 p-b-10\\\">\\r\\n                        <div fxFlex.gt-sm=\\\"70\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                        </div>\\r\\n                        <div fxFlex.gt-sm=\\\"30\\\" class=\\\"p-r-10 text-right\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                            <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" *ngIf=\\\"checkactivityaddupdatebtn\\\"\\r\\n                                [disabled]=\\\"!thirdFormGroup.valid\\\" (click)=\\\"Addbankdetail()\\\">Add Account</button>\\r\\n                            <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" *ngIf=\\\"!checkactivityaddupdatebtn\\\"\\r\\n                                [disabled]=\\\"!thirdFormGroup.valid\\\" (click)=\\\"Updatebankdetail()\\\">Update Account</button>\\r\\n                            <button mat-raised-button class=\\\"m-l-10\\\" (click)=\\\"resetbanktab()\\\">Clear</button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </form>\\r\\n                <div fxLayout=\\\"row wrap\\\">\\r\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                    </div>\\r\\n                    <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                        <table mat-table matSort [dataSource]=\\\"lists.bankdetailList\\\">\\r\\n                            <ng-container matColumnDef=\\\"BankName\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Bank Name </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.bankname}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"AccountNo\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Account No. </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.accountno}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"IFSCCode\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> IFSC Code </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.ifsccode}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"AccountType\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Account Type </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.accttype}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Action\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef> Action </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"action-link\\\">\\r\\n                                    <a>\\r\\n                                        <mat-icon style=\\\"color:black\\\" (click)=\\\"BankdetailEdit(element)\\\"><i\\r\\n                                                class=\\\"fa fa-pencil\\\"></i>\\r\\n                                        </mat-icon>\\r\\n                                    </a>\\r\\n                                    <mat-icon class=\\\"m-l-10\\\" style=\\\"color:#E91E63\\\" (click)=\\\"Deletebankrecord(element)\\\">\\r\\n                                        <i class=\\\"fa fa-trash\\\"></i>\\r\\n                                    </mat-icon>\\r\\n                                </td>\\r\\n                            </ng-container>\\r\\n                            <tr mat-header-row *matHeaderRowDef=\\\"lists.displayedColumns; sticky: true\\\"></tr>\\r\\n                            <tr mat-row *matRowDef=\\\"let row; columns: lists.displayedColumns;\\\"></tr>\\r\\n                        </table>\\r\\n                        <mat-paginator [pageSizeOptions]=\\\"[5, 10, 20,25,50]\\\" showFirstLastButtons></mat-paginator>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"p-10\\\">\\r\\n                    <button mat-raised-button color=\\\"accent\\\" matStepperPrevious>Back</button>\\r\\n                    <button mat-raised-button class=\\\"pull-right\\\" [disabled]=\\\"!checkaccountlistlenfth\\\" color=\\\"warn\\\"\\r\\n                        matStepperNext>Next</button>\\r\\n                </div>\\r\\n            </mat-step>\\r\\n            <mat-step *ngIf=\\\"firstFormGroup.value.usertype < 3\\\" [optional]=\\\"isOptional\\\">\\r\\n                <!-- <mat-step *ngIf=\\\"firstFormGroup.value.usertype < 3\\\" [stepControl]=\\\"fourthFormGroup\\\" [optional]=\\\"isOptional\\\"> -->\\r\\n                <form [formGroup]=\\\"fourthFormGroup\\\">\\r\\n                    <ng-template matStepLabel>KYC Information</ng-template>\\r\\n                    <div fxLayout=\\\"row wrap\\\">\\r\\n                        <div fxFlex.gt-sm=\\\"33.33\\\" *ngFor=\\\"let d of lists.Doctype\\\" class=\\\"p-r-10\\\" fxFlex.gt-xs=\\\"100\\\"\\r\\n                            fxFlex=\\\"100\\\">\\r\\n                            <mat-form-field>\\r\\n                                <input matInput placeholder=\\\"{{d.docname}}\\\" [ngModelOptions]=\\\"{standalone: true}\\\"\\r\\n                                    [disabled]=\\\"d.doctype=='0'\\\" [(ngModel)]=\\\"d.value\\\">\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"row wrap\\\">\\r\\n                        <div fxFlex.gt-sm=\\\"33.33\\\" *ngFor=\\\"let d of lists.Doctype;let i=index\\\" class=\\\"p-r-10 text-center\\\"\\r\\n                            fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                            <img style=\\\"width:250px;\\\" src=\\\"{{d.image?d.image:'./assets/images/noimage.png'}}\\\" />\\r\\n                            <input type=\\\"file\\\" (change)=\\\"onFileChange($event,i)\\\" />\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div>\\r\\n                        <button mat-raised-button color=\\\"accent\\\" matStepperPrevious>Back</button>\\r\\n                        <button mat-raised-button class=\\\"pull-right\\\" color=\\\"warn\\\" matStepperNext>Next</button>\\r\\n                    </div>\\r\\n                </form>\\r\\n            </mat-step>\\r\\n            <!-- <mat-step *ngIf=\\\"firstFormGroup.value.usertype < 3\\\" [stepControl]=\\\"fifthFormGroup\\\" [optional]=\\\"isOptional\\\"> -->\\r\\n            <mat-step *ngIf=\\\"firstFormGroup.value.usertype < 3\\\" [optional]=\\\"isOptional\\\">\\r\\n                <form [formGroup]=\\\"fifthFormGroup\\\">\\r\\n                    <ng-template matStepLabel>Subscription</ng-template>\\r\\n                    <div fxLayout=\\\"row wrap\\\">\\r\\n                        <div fxFlex.gt-sm=\\\"100\\\" class=\\\"m-t-20 m-b-20\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                            <label [ngStyle]=\\\"{'color':plantypeval == true ? 'black' : 'Red' }\\\">Subscription\\r\\n                                Plan</label>\\r\\n                        </div>\\r\\n                        <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                            <mat-radio-group formControlName=\\\"Subscriptionplan\\\">\\r\\n                                <div *ngFor=\\\"let Plan of SubPlans\\\">\\r\\n                                    <mat-radio-button class=\\\"m-l-20 m-t-5\\\" value=\\\"{{Plan.id}}\\\">\\r\\n                                        {{Plan.subscription_name}}<span>\\r\\n                                            (Validity: {{ Plan.validity | monthtoyear}})</span> </mat-radio-button><br>\\r\\n                                    <p class=\\\"font-16 m-l-20  m-t-5\\\">{{!Plan.detailview?(Plan.description |\\r\\n                                        limitto:100):Plan.description }}<a *ngIf=\\\"Plan.description.length > 100\\\"\\r\\n                                            style=\\\"margin-left: -15px;\\\" mat-button color=\\\"primary\\\"\\r\\n                                            (click)='Plan.detailview=!Plan.detailview'>{{!Plan.detailview?'Read\\r\\n                                            More':'Hide\\r\\n                                            More'}}</a></p>\\r\\n                                </div>\\r\\n                            </mat-radio-group>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div>\\r\\n                        <button mat-raised-button color=\\\"accent\\\" matStepperPrevious>Back</button>\\r\\n                        <button mat-raised-button class=\\\"pull-right\\\" color=\\\"primary\\\" (click)=\\\"CreateUser()\\\"\\r\\n                            [disabled]=\\\"!fifthFormGroup.valid\\\">Submit</button>\\r\\n                    </div>\\r\\n                </form>\\r\\n            </mat-step>\\r\\n        </mat-horizontal-stepper>\\r\\n    </mat-card-content>\\r\\n</mat-card>\"","module.exports = \"<div fxLayout=\\\"row wrap\\\">\\r\\n    <div fxFlex.gt-lg=\\\"100\\\" fxFlex.gt-md=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n        <mat-card class=\\\"text-center little-profile\\\">\\r\\n            <!-- <img mat-card-image src=\\\"assets/images/background/profile-bg.jpg\\\" alt=\\\"Photo of a Shiba Inu\\\"> -->\\r\\n            <mat-card-content>\\r\\n                <div class=\\\"pro-img\\\" style=\\\"margin-top: 10px;\\\">\\r\\n                    <img src=\\\"assets/images/icon/people_Icon.png\\\" width=\\\"100\\\" alt=\\\"user\\\">\\r\\n                </div>\\r\\n                <h3 class=\\\"m-b-0\\\">{{lists.firstname}}&nbsp;&nbsp;{{lists.lastname}}</h3>\\r\\n                <mat-tab-group mat-align-tabs=\\\"center\\\">\\r\\n                    <mat-tab label=\\\"Basic Info\\\">\\r\\n                        <mat-card-content>\\r\\n                            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                                <table class=\\\"text-left\\\">\\r\\n                                    <tr>\\r\\n                                        <th width=\\\"50%\\\" class=\\\"customhr\\\">User Type:</th>\\r\\n                                        <td width=\\\"50%\\\" class=\\\"customhr\\\">{{lists.usertype}}</td>\\r\\n                                    </tr>\\r\\n                                    <tr>\\r\\n                                        <th class=\\\"customhr\\\">First Name:</th>\\r\\n                                        <td class=\\\"customhr\\\">{{lists.firstname}}</td>\\r\\n                                    </tr>\\r\\n                                    <tr>\\r\\n                                        <th class=\\\"customhr\\\">Last Name:</th>\\r\\n                                        <td class=\\\"customhr\\\">{{lists.lastname}}</td>\\r\\n                                    </tr>\\r\\n                                    <tr>\\r\\n                                        <th class=\\\"customhr\\\">Mobile Number:</th>\\r\\n                                        <td class=\\\"customhr\\\">{{lists.mobnumber}}</td>\\r\\n                                    </tr>\\r\\n                                    <tr>\\r\\n                                        <th class=\\\"customhr\\\">Email:</th>\\r\\n                                        <td class=\\\"customhr\\\">{{lists.email}}</td>\\r\\n                                    </tr>\\r\\n                                </table>\\r\\n                            </div>\\r\\n                        </mat-card-content>\\r\\n                    </mat-tab>\\r\\n                    <mat-tab label=\\\"Address Info\\\">\\r\\n                        <mat-card-content>\\r\\n                            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                                <table style=\\\"width: 100%; table-layout: auto;\\\">\\r\\n                                    <tr class=\\\"text-center\\\">\\r\\n                                        <th class=\\\"customhr\\\" colspan=\\\"2\\\">Permanent Address</th>\\r\\n                                        <th class=\\\"customhr\\\" colspan=\\\"2\\\">Correspondance Address</th>\\r\\n                                    </tr>\\r\\n                                    <tr>\\r\\n                                        <th class=\\\"customAddresinfo\\\" > Address:</th>\\r\\n                                        <td class=\\\"customAddresinfo1 customhr\\\">{{lists.perAddress}}                                                                                   \\r\\n                                        </td>\\r\\n                                        <th class=\\\"customAddresinfo\\\"> Address:</th>\\r\\n                                        <td class=\\\"customAddresinfo1 customhr\\\">{{lists.corresAddress}}</td>\\r\\n                                    </tr>\\r\\n                                    <!-- <p>{{!lists.detailview?(lists.perAddress | limitto:50):lists.perAddress }}<a *ngIf=\\\"lists.perAddress.length > 50\\\"\\r\\n                                                    style=\\\"margin-left: -15px;\\\" mat-button color=\\\"primary\\\"\\r\\n                                                    (click)='lists.detailview=!lists.detailview'>{{!lists.detailview?'Read\\r\\n                                                    More':'Hide\\r\\n                                                    More'}}</a></p> --> \\r\\n                                    <tr>\\r\\n                                        <th class=\\\"customAddresinfo\\\"> State:</th>\\r\\n                                        <td class=\\\"customAddresinfo1 customhr\\\">{{lists.perState}}</td>\\r\\n                                        <th class=\\\"customAddresinfo\\\"> State:</th>\\r\\n                                        <td class=\\\"customAddresinfo1 customhr\\\">{{lists.corresState}}</td>\\r\\n                                    </tr>\\r\\n                                    <tr>\\r\\n                                        <th class=\\\"customAddresinfo\\\"> City:</th>\\r\\n                                        <td class=\\\"customAddresinfo1 customhr\\\">{{lists.perCity}}</td>\\r\\n                                        <th class=\\\"customAddresinfo\\\"> City:</th>\\r\\n                                        <td class=\\\"customAddresinfo1 customhr\\\">{{lists.corresCity}}</td>\\r\\n                                    </tr>\\r\\n                                    <tr>\\r\\n                                        <th class=\\\"customAddresinfo\\\"> Pincode:</th>\\r\\n                                        <td class=\\\"customAddresinfo1 customhr\\\">{{lists.perPincode}}</td>\\r\\n                                        <th class=\\\"customAddresinfo\\\"> Pincode:</th>\\r\\n                                        <td class=\\\"customAddresinfo1 customhr\\\">{{lists.corresPincode}}</td>\\r\\n                                    </tr>\\r\\n                                </table>                             \\r\\n                            </div>\\r\\n                        </mat-card-content>\\r\\n                    </mat-tab>\\r\\n                    <mat-tab label=\\\"Bank Info\\\">\\r\\n                        <mat-card-content>\\r\\n                            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                                <table mat-table matSort [dataSource]=\\\"lists.bankdetailList\\\" class=\\\"text-left\\\">\\r\\n                                    <ng-container matColumnDef=\\\"BankName\\\">\\r\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> Bank Name </th>\\r\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.bankname}} </td>\\r\\n                                    </ng-container>\\r\\n                                    <ng-container matColumnDef=\\\"AccountNo\\\">\\r\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> Account No. </th>\\r\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.accountno}} </td>\\r\\n                                    </ng-container>\\r\\n                                    <ng-container matColumnDef=\\\"IFSCCode\\\">\\r\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> IFSC Code </th>\\r\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.ifsccode}} </td>\\r\\n                                    </ng-container>\\r\\n                                    <ng-container matColumnDef=\\\"AccountType\\\">\\r\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> Account Type </th>\\r\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.accttype}} </td>\\r\\n                                    </ng-container>\\r\\n                                    <!-- <ng-container matColumnDef=\\\"Action\\\">\\r\\n                                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Action </th>\\r\\n                                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.Action}} </td>\\r\\n                                            </ng-container> -->\\r\\n                                    <tr mat-header-row *matHeaderRowDef=\\\"lists.displayedColumns; sticky: true\\\"></tr>\\r\\n                                    <tr mat-row *matRowDef=\\\"let row; columns: lists.displayedColumns;\\\"></tr>\\r\\n                                </table>\\r\\n                                <mat-paginator [pageSizeOptions]=\\\"[5, 10, 20,25,50]\\\" showFirstLastButtons>\\r\\n                                </mat-paginator>\\r\\n                            </div>\\r\\n\\r\\n\\r\\n                        </mat-card-content>\\r\\n                    </mat-tab>\\r\\n                    <mat-tab label=\\\"KYC Info\\\">\\r\\n                        <mat-card-content>\\r\\n                            <!-- <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                                <table mat-table matSort [dataSource]=\\\"lists.kycdetailList\\\" class=\\\"text-left\\\">\\r\\n                                    <ng-container matColumnDef=\\\"Dcname\\\">\\r\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header>Document No. </th>\\r\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.Dacname}} </td>\\r\\n                                    </ng-container>\\r\\n                                    <ng-container matColumnDef=\\\"DocNo\\\">\\r\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header>Document No. </th>\\r\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.value}} </td>\\r\\n                                    </ng-container>\\r\\n                                    <ng-container matColumnDef=\\\"DocImage\\\">\\r\\n                                        <th mat-header-cell *matHeaderCellDef mat-sort-header> Image </th>\\r\\n                                        <td mat-cell *matCellDef=\\\"let element\\\"><a target=\\\"_blank\\\" href=\\\"{{element.image}}\\\">Open</a></td>                                        \\r\\n                                    </ng-container>                                  \\r\\n                                    <tr mat-header-row *matHeaderRowDef=\\\"lists.displayedColumns; sticky: true\\\"></tr>\\r\\n                                    <tr mat-row *matRowDef=\\\"let row; columns: lists.displayedColumns;\\\"></tr>\\r\\n                                </table>\\r\\n                                <mat-paginator [pageSizeOptions]=\\\"[5, 10, 20,25,50]\\\" showFirstLastButtons>\\r\\n                                </mat-paginator>\\r\\n                            </div> -->\\r\\n                            <!-- <div fxLayout=\\\"row wrap\\\" style=\\\"margin-top: -25px;\\\">\\r\\n                                <div fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                                    <div fxLayout=\\\"row wrap\\\" >\\r\\n                                        <div fxFlex.gt-sm=\\\"100\\\" class=\\\"text-center\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                                            <h3><b>{{lists.Doctype[0].docname}}</b></h3>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                    <div fxLayout=\\\"row wrap\\\">\\r\\n                                        <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                                            <b>No&nbsp;&nbsp;:&nbsp;&nbsp;</b><label>{{lists.Doctype[0].value}}</label>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                    <div fxLayout=\\\"row wrap\\\">\\r\\n                                        <div fxFlex.gt-sm=\\\"100\\\" class=\\\"text-center m-t-30\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                                            <img src={{lists.Doctype[0].image}} width=\\\"400\\\" alt={{lists.Doctype[0].docname}}>\\r\\n                                            </div>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                                <div fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                                    <div fxLayout=\\\"row wrap\\\" >\\r\\n                                        <div fxFlex.gt-sm=\\\"100\\\" class=\\\"text-center\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                                            <h3><b>{{lists.Doctype[1].docname}}</b></h3>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                    <div fxLayout=\\\"row wrap\\\">\\r\\n                                        <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                                            <b>No&nbsp;&nbsp;:&nbsp;&nbsp;</b><label>{{lists.Doctype[1].value}}</label>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                    <div fxLayout=\\\"row wrap\\\">\\r\\n                                        <div fxFlex.gt-sm=\\\"100\\\" class=\\\"text-center m-t-30\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                                            <img src={{lists.Doctype[1].image}} width=\\\"400\\\" alt={{lists.Doctype[1].docname}}>\\r\\n                                            </div>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                                <div fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                                    <div fxLayout=\\\"row wrap\\\" >\\r\\n                                        <div fxFlex.gt-sm=\\\"100\\\" class=\\\"text-center\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                                            <h3><b>{{lists.Doctype[2].docname}}</b></h3>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                    <div fxLayout=\\\"row wrap\\\" style=\\\"margin-top: 22px;\\\">\\r\\n                                        <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                                            <b></b><label></label>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                    <div fxLayout=\\\"row wrap\\\">\\r\\n                                        <div fxFlex.gt-sm=\\\"100\\\" class=\\\"text-center m-t-30\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                                            <img src={{lists.Doctype[2].image}} width=\\\"400\\\" alt={{lists.Doctype[2].docname}}>\\r\\n                                            </div>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div> -->\\r\\n\\r\\n                        </mat-card-content>\\r\\n                    </mat-tab>\\r\\n                    <mat-tab label=\\\"Subscription Info\\\">\\r\\n                        <mat-card-content>\\r\\n                            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                                <table class=\\\"text-left\\\">\\r\\n                                    <tr>\\r\\n                                        <th width=\\\"50%\\\" class=\\\"customhr\\\">Subscription Plan:</th>\\r\\n                                        <td width=\\\"50%\\\" class=\\\"customhr\\\">{{lists.subscriptionplanid}}</td>\\r\\n                                    </tr>\\r\\n                                    <tr>\\r\\n                                        <th width=\\\"50%\\\" class=\\\"customhr\\\">Plan Start Date:</th>\\r\\n                                        <td width=\\\"50%\\\" class=\\\"customhr\\\">{{lists.subscriptionplanstartdate}}</td>\\r\\n                                    </tr>\\r\\n                                    <tr>\\r\\n                                        <th width=\\\"50%\\\" class=\\\"customhr\\\">Plan End Date:</th>\\r\\n                                        <td width=\\\"50%\\\" class=\\\"customhr\\\">{{lists.subscriptionplanenddate}}</td>\\r\\n                                    </tr>\\r\\n                                </table>\\r\\n                            </div>\\r\\n                        </mat-card-content>\\r\\n                    </mat-tab>                   \\r\\n                </mat-tab-group>\\r\\n\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"<mat-card fxFlex.gt-sm=\\\"100%\\\" fxFlex=\\\"100\\\" class=\\\"m-0\\\">\\r\\n    <mat-card-content >\\r\\n        <div fxLayout=\\\"row wrap\\\">\\r\\n            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                <div fxLayout=\\\"row wrap\\\">\\r\\n                    <div fxFlex.gt-sm=\\\"25\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                        <mat-form-field>\\r\\n                            <input matInput (keyup)=\\\"comman.TableFilter(newUserlist,$event.target.value)\\\"\\r\\n                                placeholder=\\\"Search\\\">\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                    <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                        <table mat-table matSort [dataSource]=\\\"newUserlist\\\">                            \\r\\n                            <ng-container matColumnDef=\\\"id\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> User Id </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.id}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"user_type\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> User Type </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.user_type}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"name\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"email\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header>Email</th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.email}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"mobile\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Contact Number </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.mobile}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"profile_image\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Profile Image </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\"><a target=\\\"_blank\\\" href=\\\"{{element.profile_image}}\\\">Open</a></td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"fcm_id\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Fcm Id </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.fcm_id}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"subscription_id\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Subscription Plan </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.subscription_id}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"expire_date\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Expire date </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.subscription_info.expire_date}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"crated_at\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Crated Date </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.crated_at}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"last_login_at\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header>Last Login</th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.last_login_at}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"updatedAt\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Updated Date </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.updatedAt}} </td>\\r\\n                            </ng-container>\\r\\n\\r\\n                            <ng-container matColumnDef=\\\"status\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef>Status</th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\"> {{element.status?'Active':'DeActive'}} </td>\\r\\n                            </ng-container>                           \\r\\n                            <ng-container matColumnDef=\\\"action\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef> Action </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"action-link\\\">\\r\\n                                    <a>\\r\\n                                        <mat-icon style=\\\"color:#E91E63\\\" (click)=\\\"UserProfileEdit(element)\\\">edit\\r\\n                                        </mat-icon>\\r\\n                                    </a>\\r\\n                                    <a class=\\\"m-l-10\\\">\\r\\n                                        <mat-icon style=\\\"color:#E91E63\\\" (click)=\\\"UserAllDetail(element)\\\"><i style=\\\"color: cornflowerblue;\\\" class=\\\"fa fa-info-circle\\\"></i>\\r\\n                                        </mat-icon>\\r\\n                                    </a>\\r\\n                                </td>\\r\\n                            </ng-container>\\r\\n                            <tr mat-header-row *matHeaderRowDef=\\\"lists.displayedColumns; sticky: true\\\"></tr>\\r\\n                            <tr mat-row *matRowDef=\\\"let row; columns: lists.displayedColumns;\\\"></tr>\\r\\n                        </table>\\r\\n                        <mat-paginator [pageSizeOptions]=\\\"[10, 20,30,50,100]\\\" showFirstLastButtons>\\r\\n                        </mat-paginator>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        </mat-card-content>\\r\\n    </mat-card >\\r\\n\"","module.exports = \"h5{\\r\\n    margin-top: 5px !important;\\r\\n    margin-bottom: 5px !important;\\r\\n    border-bottom: 1px solid !important;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvUG9ydGFsL1VzZXIvY3JlYXRldXNlci9jcmVhdGV1c2VyLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSwwQkFBMEI7SUFDMUIsNkJBQTZCO0lBQzdCLG1DQUFtQztBQUN2QyIsImZpbGUiOiJzcmMvYXBwL1BvcnRhbC9Vc2VyL2NyZWF0ZXVzZXIvY3JlYXRldXNlci5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaDV7XHJcbiAgICBtYXJnaW4tdG9wOiA1cHggIWltcG9ydGFudDtcclxuICAgIG1hcmdpbi1ib3R0b206IDVweCAhaW1wb3J0YW50O1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICFpbXBvcnRhbnQ7XHJcbn0iXX0= */\"","import { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatTableDataSource, MatPaginator, MatSort } from '@angular/material';\r\nimport { CommonService } from '../../Service/common.service';\r\nimport { CustomValidators } from 'ng2-validation';\r\n\r\nconst password = new FormControl('', Validators.compose([Validators.required, Validators.minLength(8), Validators.maxLength(30), Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$')]));\r\nconst confirmPassword = new FormControl('', CustomValidators.equalTo(password));\r\nconst Todatdate = new Date();\r\n\r\nexport interface state {\r\n  code: string;\r\n  name: string;\r\n}\r\n\r\nexport interface bankdetailList {\r\n  BankName: string;\r\n  AccountNo: number;\r\n  IFSCCode: string;\r\n  AccountType: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-createuser',\r\n  templateUrl: './createuser.component.html',\r\n  styleUrls: ['./createuser.component.css']\r\n})\r\n\r\nexport class CreateuserComponent implements OnInit {\r\n  lists: any = {};\r\n  Userlist = [];\r\n  bankdetailList = [];\r\n  bankdetailListarray = [];\r\n  bankdetail: any = {};\r\n  KYCdata = [];\r\n\r\n  isLinear = false;\r\n  firstFormGroup: FormGroup;\r\n  secondFormGroup: FormGroup;\r\n  thirdFormGroup: FormGroup;\r\n  fourthFormGroup: FormGroup;\r\n  fifthFormGroup: FormGroup;\r\n  isOptional = false;\r\n  isEditable = false;\r\n  hide = true;\r\n  hide1 = true;\r\n\r\n  AcctTypelist = [{ name: \"Saving\" }, { name: \"Current\" }];\r\n  submitcreateuserformdata = [];\r\n  checkaccountlistlenfth = false;\r\n  checkactivityaddupdatebtn = true;\r\n  copyofaccountname = '';\r\n  copyofaccountnumber = '';\r\n\r\n  usertypearray = [];\r\n  statearray = [];\r\n  cityarray = [];\r\n  cityarraycors = [];\r\n  statevalue = '';\r\n  SubPlans = [];\r\n\r\n  newUserlist = new MatTableDataSource();\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n  constructor(public common: CommonService, public fb: FormBuilder) {\r\n    // this.lists.UserTypelist = [{ name: \"Admin\" }, { name: \"Agent\" }, { name: \"Depositor\" }, { name: \"Manager\" }];\r\n    // this.lists.AcctTypelist = [{ name: \"Saving\" }, { name: \"Current\" }];\r\n    this.lists.Doctype = [];\r\n    // if (localStorage.getItem(\"UserType\") == 'Admin') {\r\n    //   this.lists.usertype = \"Agent\";\r\n    // }\r\n    // this.GetUserList();\r\n    // this.GetCitylist();\r\n    //this.GetDocList();\r\n\r\n  }\r\n  ngOnInit() {\r\n    this.lists.bankdetailList = new MatTableDataSource(this.bankdetailListarray);\r\n    this.lists.displayedColumns = ['BankName', 'AccountNo', 'IFSCCode', 'AccountType', 'Action'];\r\n    this.lists.bankdetailList.paginator = this.paginator;\r\n    this.lists.bankdetailList.sort = this.sort;\r\n\r\n    // this.lists.SelectedIndex = 0;\r\n    // this.lists.displayedColumns = ['action', 'name', 'Branchname', 'mobile', 'usertype', 'PresentAmount', 'lastlogin', 'status', 'login'];\r\n    // this.newUserlist.paginator = this.paginator;\r\n    // this.newUserlist.sort = this.sort;\r\n    /*  this.userform = this.fb.group({\r\n        aId: new FormControl(localStorage.getItem(\"UserId\"), Validators.required),\r\n        name: new FormControl('', Validators.required),\r\n        password: new FormControl('', Validators.required),\r\n        mobile: new FormControl('', Validators.compose([Validators.required, Validators.maxLength(10), Validators.minLength(10)])),\r\n        branch: new FormControl('', Validators.required),\r\n        usertype: new FormControl('', Validators.required),\r\n        city: new FormControl('', Validators.required),\r\n        confirmpassword: new FormControl(),\r\n        amount: new FormControl(0),\r\n        bankname: new FormControl(''),\r\n        accttype: new FormControl(''),\r\n        ifsccode: new FormControl(''),\r\n        account: new FormControl(''),\r\n        KYC: new FormControl([]),\r\n        id: new FormControl(0)\r\n      }, this.checkPasswords);*/\r\n\r\n    this.firstFormGroup = this.fb.group({\r\n      usertype: ['', Validators.required],\r\n      firstname: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(20), Validators.pattern('^[a-zA-Z ]+$')]],\r\n      lastname: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(20), Validators.pattern('^[a-zA-Z ]+$')]],\r\n      mobnumber: ['', [Validators.required, Validators.maxLength(10), Validators.minLength(10), Validators.pattern(/^-?(0|[1-9]\\d*)?$/)]],\r\n      email: ['', [Validators.required, Validators.pattern('[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$')]],\r\n      password: password,\r\n      confirmPassword: confirmPassword,\r\n    });\r\n    this.secondFormGroup = this.fb.group({\r\n      perAddress: ['', Validators.required],\r\n      perState: ['', Validators.required],\r\n      perCity: ['', Validators.required],\r\n      perPincode: ['', [Validators.required, Validators.maxLength(6), Validators.min(100000), Validators.max(999999)]],\r\n      corresAddress: ['', Validators.required],\r\n      corresState: ['', Validators.required],\r\n      corresCity: ['', Validators.required],\r\n      corresPincode: ['', [Validators.required, Validators.maxLength(6), Validators.min(100000), Validators.max(999999)]],\r\n    });\r\n    this.thirdFormGroup = this.fb.group({\r\n      bankname: ['', [Validators.required, Validators.pattern('^[a-zA-Z ]+$')]],\r\n      accttype: ['', Validators.required],\r\n      ifsccode: ['', Validators.required],\r\n      accountno: ['', Validators.required],\r\n    });\r\n    this.fourthFormGroup = this.fb.group({\r\n      KYC: new FormControl([]),\r\n      // id: [0],\r\n    });\r\n    this.fifthFormGroup = this.fb.group({\r\n      Subscriptionplan: ['', Validators.required],\r\n      Planstartdate: Todatdate,\r\n    });\r\n\r\n    this.GetUserTypeMaster();\r\n    this.GetSubscriptionMaster();\r\n    this.GetStates();\r\n  }\r\n  get firtsForm() {\r\n    return this.firstFormGroup.controls;\r\n  }\r\n  get secondForm() {\r\n    return this.secondFormGroup.controls;\r\n  }\r\n  get fifthForm() {\r\n    return this.fifthFormGroup.controls;\r\n  }\r\n\r\n  AddressCopy(e) {\r\n    if (e.checked) {\r\n      this.secondFormGroup.controls['corresAddress'].setValue(this.secondFormGroup.value.perAddress);\r\n      this.secondFormGroup.controls['corresState'].setValue(this.secondFormGroup.value.perState);\r\n      this.secondFormGroup.controls['corresCity'].setValue(this.secondFormGroup.value.perCity);\r\n      this.secondFormGroup.controls['corresPincode'].setValue(this.secondFormGroup.value.perPincode);\r\n    } else {\r\n      this.secondFormGroup.controls['corresAddress'].setValue('');\r\n      this.secondFormGroup.controls['corresState'].setValue('');\r\n      this.secondFormGroup.controls['corresCity'].setValue('');\r\n      this.secondFormGroup.controls['corresPincode'].setValue('');\r\n    }\r\n  }\r\n\r\n  GetUserTypeMaster() {\r\n    this.common.GetMethod('master/getmaster?master=role').then((res: any) => {\r\n      if (res.status == 1) {\r\n        this.usertypearray = res.data;\r\n      }\r\n    }).catch(y => {\r\n      this.common.ToastMessage(\"Error !\", y.error.message);\r\n    });\r\n  }\r\n  GetSubscriptionMaster() {\r\n    this.common.GetMethod('master/getmaster?master=subscriptionmaster').then((res: any) => {\r\n      if (res.status == 1) {\r\n        this.SubPlans = res.data;\r\n      }\r\n    }).catch(y => {\r\n      this.common.ToastMessage(\"Error !\", y.error.message);\r\n    });\r\n  }\r\n  GetStates() {\r\n    this.common.PostMethod(\"common/getstates\", { id: 101 }).then((res: any) => {\r\n      if (res.status == 1) {\r\n        this.statearray = res.data;\r\n      }\r\n    }).catch(y => {\r\n      this.common.ToastMessage(\"Error !\", y.error.message);\r\n    });\r\n  }\r\n\r\n  GetCity() {\r\n    let stateid = this.secondFormGroup.value.perState;\r\n    this.common.PostMethod(\"common/getcities\", { id: stateid }).then((res: any) => {\r\n      if (res.status == 1) {\r\n        this.cityarray = res.data;\r\n        this.cityarraycors = res.data;\r\n      }\r\n    }).catch(y => {\r\n      this.common.ToastMessage(\"Error !\", y.error.message);\r\n    });\r\n  }\r\n  GetCityCors() {\r\n    let stateid = this.secondFormGroup.value.corresState;\r\n    this.common.PostMethod(\"common/getcities\", { id: stateid }).then((res: any) => {\r\n      if (res.status == 1) {\r\n        this.cityarraycors = res.data;\r\n      }\r\n    }).catch(y => {\r\n      this.common.ToastMessage(\"Error !\", y.error.message);\r\n    });\r\n  }\r\n\r\n  CreateUser() {   \r\n    let submitdata : any = {}\r\n    submitdata.user_type = this.firstFormGroup.value.usertype,\r\n    submitdata.name = this.firstFormGroup.value.firstname + ' ' + this.firstFormGroup.value.lastname,\r\n    submitdata.mobile = this.firstFormGroup.value.mobnumber,\r\n    submitdata.email = this.firstFormGroup.value.email,\r\n    submitdata.password = this.firstFormGroup.value.confirmPassword,\r\n    submitdata.fcm_id = localStorage.getItem(\"FCMID\")\r\n    if (this.firstFormGroup.value.usertype < 3) {  \r\n      submitdata.address = [\r\n                {\r\n                  address: this.secondFormGroup.value.perAddress,\r\n                  state_id: this.secondFormGroup.value.perState,\r\n                  city_id: this.secondFormGroup.value.perCity,\r\n                  pincode: this.secondFormGroup.value.perPincode,\r\n                  address_type: 0,\r\n                  status: 1\r\n                },\r\n                {\r\n                  address: this.secondFormGroup.value.corresAddress,\r\n                  state_id: this.secondFormGroup.value.corresState,\r\n                  city_id: this.secondFormGroup.value.corresCity,\r\n                  pincode: this.secondFormGroup.value.corresPincode,\r\n                  address_type: 1,\r\n                  status: 1\r\n                },\r\n              ],\r\n      submitdata.bankdetails = this.bankdetailListarray,\r\n      submitdata.kycdetails = this.lists.Doctype,\r\n      submitdata.subscription_id = parseInt(this.fifthFormGroup.value.Subscriptionplan)            \r\n    }else{\r\n      submitdata.subscription_id = 1;\r\n    }\r\n    this.common.PostMethod(\"user/addnewuser\", submitdata).then((res: any) => {\r\n      if (res.status == 1) {\r\n        this.common.ToastMessage(\"Sucess\", res.Message);\r\n      } else {\r\n        this.common.ToastMessage(\"Info\", res.Message);\r\n      }\r\n    }).catch(y => {\r\n      this.common.ToastMessage(\"Error !\",y.error.message);\r\n    });\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  ///////////////////////---------------api work end------------------//////////////////////////////////////////////\r\n\r\n\r\n\r\n  // bankdetailarraylist: accdetail[] = [{\"BankName\": \"AN\",\"AccountNo\": 123,\"IFSCCode\": \"helo123\",\"AccountType\":\"saving\"},\r\n\r\n  // ];\r\n\r\n  // checkpasswordstrength(event){\r\n  //   this.passworderrors = ''\r\n  //   let val = this.firstFormGroup.value.password;\r\n  //   let pattern = new RegExp(\"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$\");\r\n  //   if (pattern.test(val)) {\r\n  //    return this.passworderrors = '';\r\n  //     } else{\r\n  //      return this.passworderrors = 'Minimum 8 characters, at least one uppercase letter, one lowercase letter, one number and one special character:.';\r\n  //     }\r\n  // }\r\n  checkaccountnolength() {\r\n    if (this.bankdetailListarray.length > 0) {\r\n      this.checkaccountlistlenfth = true;\r\n    } else {\r\n      this.checkaccountlistlenfth = false;\r\n    }\r\n  }\r\n\r\n  Addbankdetail() {\r\n    this.checkactivityaddupdatebtn = true;\r\n    this.bankdetailListarray.push(this.thirdFormGroup.value);\r\n    this.lists.bankdetailList = new MatTableDataSource(this.bankdetailListarray);\r\n    this.lists.displayedColumns = ['BankName', 'AccountNo', 'IFSCCode', 'AccountType', 'Action'];\r\n    this.lists.bankdetailList.paginator = this.paginator;\r\n    this.lists.bankdetailList.sort = this.sort;\r\n    this.resetbanktab();\r\n    this.checkaccountnolength();\r\n    this.common.ToastMessage(\"Success\", \"Bank Account Added Successfully\");\r\n  }\r\n  resetbanktab() {\r\n    this.checkactivityaddupdatebtn = true;\r\n    this.thirdFormGroup.controls['bankname'].setValue('');\r\n    this.thirdFormGroup.controls['accttype'].setValue('');\r\n    this.thirdFormGroup.controls['ifsccode'].setValue('');\r\n    this.thirdFormGroup.controls['accountno'].setValue('');\r\n  }\r\n\r\n  BankdetailEdit(ev) {\r\n    this.checkactivityaddupdatebtn = false;\r\n    if (ev) {\r\n      this.thirdFormGroup.controls[\"bankname\"].setValue(ev.bankname);\r\n      this.thirdFormGroup.controls[\"accttype\"].setValue(ev.accttype);\r\n      this.thirdFormGroup.controls[\"ifsccode\"].setValue(ev.ifsccode);\r\n      this.thirdFormGroup.controls[\"accountno\"].setValue(ev.accountno);\r\n      this.copyofaccountname = ev.bankname;\r\n      this.copyofaccountnumber = ev.accountno;\r\n    }\r\n  }\r\n  Deletebankrecord(ele) {\r\n    ele.bankname;\r\n    ele.accountno;\r\n    let arr = this.bankdetailListarray;\r\n    for (var i = 0; i < arr.length; i++) {\r\n      if (arr[i].bankname === ele.bankname && arr[i].accountno === ele.accountno) {\r\n        var spliced = arr.splice(i, 1);\r\n        this.bankdetailListarray = arr;\r\n        this.common.ToastMessage(\"Success\", \"Bank Account Delete Successfully\");\r\n        this.checkaccountnolength();\r\n      }\r\n    }\r\n    this.lists.bankdetailList = new MatTableDataSource(this.bankdetailListarray);\r\n    this.lists.displayedColumns = ['BankName', 'AccountNo', 'IFSCCode', 'AccountType', 'Action'];\r\n    this.lists.bankdetailList.paginator = this.paginator;\r\n    this.lists.bankdetailList.sort = this.sort;\r\n  }\r\n\r\n  Updatebankdetail() {\r\n    let arrvalue = this.bankdetailListarray;\r\n    let filtervalue = arrvalue.filter(x => x.bankname == this.copyofaccountname && x.accountno == this.copyofaccountnumber);\r\n    if (filtervalue) {\r\n      filtervalue[0].bankname = this.thirdFormGroup.value.bankname;\r\n      filtervalue[0].accountno = this.thirdFormGroup.value.accountno;\r\n      filtervalue[0].accttype = this.thirdFormGroup.value.accttype;\r\n      filtervalue[0].ifsccode = this.thirdFormGroup.value.ifsccode;\r\n      this.common.ToastMessage(\"Success\", \"Bank Account Update Successfully\");\r\n      this.resetbanktab();\r\n      this.checkactivityaddupdatebtn = true;\r\n    } else {\r\n      this.common.ToastMessage(\"Fail\", \"Bank Account Update Fail\");\r\n      this.checkactivityaddupdatebtn = false;\r\n    }\r\n\r\n  }\r\n\r\n\r\n  //-------------------------------- create user end----------------------------------//\r\n\r\n  /* checkPasswords(group: FormGroup) { // here we have the 'passwords' group\r\n      let pass = group.get('password').value;\r\n      let confirmPass = group.get('confirmpassword').value;\r\n      return pass === confirmPass ? null : { notSame: true }\r\n    }*/\r\n\r\n  // GetUserList() {\r\n  //   let UserId: any = 0;\r\n  //   if (localStorage.getItem(\"UserType\") != \"Super Admin\") {\r\n  //     UserId = localStorage.getItem(\"UserId\");\r\n  //   }\r\n  //   if (this.lists.adminid) {\r\n  //     UserId = this.lists.adminid;\r\n\r\n  //   }\r\n  //   this.common.GetMethod(\"GetUserInfo?userid=\" + UserId).then((res: any) => {\r\n  //     this.Userlist = res.Data;\r\n  //     this.Userlist.forEach(element => {\r\n  //       element.adminid = parseInt(element.adminid);\r\n  //       if (element.status == 0) {\r\n  //         element.status = false;\r\n  //       }\r\n  //       if (element.status == 1) {\r\n  //         element.status = true;\r\n  //       }\r\n  //       if (element.currentstatus == 0) {\r\n  //         element.currentstatus = false;\r\n  //       }\r\n  //       if (element.currentstatus == 1) {\r\n  //         element.currentstatus = true;\r\n  //       }\r\n  //     });\r\n  //     this.newUserlist = new MatTableDataSource(this.Userlist);\r\n  //     this.newUserlist.paginator = this.paginator;\r\n  //     this.newUserlist.sort = this.sort;\r\n  //   });\r\n  // }\r\n\r\n  // GetBranchlist(ev) {\r\n  //   let branch = [];\r\n  //   this.common.PostMethod(\"GetfilterData\", { file: \"branch\", name: \"name\", value: ev.value }).then((res: any) => {\r\n  //     if (localStorage.getItem('UserType') == 'Admin') {\r\n  //       res.Data.forEach(element => {\r\n  //         if (element.adminid == localStorage.getItem(\"UserId\")) {\r\n  //           branch.push(element);\r\n  //         }\r\n  //       });\r\n  //       this.lists.branchlist = branch;\r\n  //     } else {\r\n  //       this.lists.branchlist = res.Data;\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // GetCitylist() {\r\n  //   this.common.GetMethod('GetCitites').then((res: any) => {\r\n  //     this.lists.Citylist = res.Data;\r\n  //   });\r\n  // }\r\n\r\n  GetDocList() {\r\n    this.common.GetMethod(\"GetDatatable?Name=kycdoc\").then((res: any) => {\r\n      this.lists.Doctype = res.Data;\r\n    });\r\n  }\r\n\r\n\r\n  onFileChange(ev, type) {\r\n    let filetype = ev.target.files[0]['type'];\r\n    if (filetype == 'image/png' || filetype == 'image/jpg' || filetype == 'image/jpeg') {\r\n      this.lists.Doctype[type].image = ev.target.value;\r\n      this.common.fileUpload(ev.target.files, res => {\r\n        this.lists.Doctype[type].image = this.common.Url + \"Files/\" + res.filename;\r\n      });\r\n    } else {\r\n      this.common.ToastMessage(\"Fail\", \"Please Select Only Image Files png,jpg,jpeg Extension.\");\r\n    }\r\n  }\r\n\r\n\r\n\r\n  // UserRegistration() {\r\n  //   //this.userform.controls['KYC'].setValue(this.lists.Doctype);\r\n  //  // this.common.PostMethod(\"UserRegistration\", this.userform.value).then((res: any) => {\r\n  //     // if (res.Status == 1) {\r\n  //     //   this.common.ToastMessage(\"Success\", res.Message);\r\n  //     //   this.userform.reset();\r\n  //     //   this.userform.controls['aId'].setValue(localStorage.getItem(\"UserId\"));\r\n  //     //   this.userform.controls['amount'].setValue(0);\r\n  //     //   this.GetDocList();\r\n  //     //   this.GetUserList();\r\n  //     // } else {\r\n  //     //   this.common.ToastMessage(\"Fail\", res.Message);\r\n  //     // }\r\n  //   //});\r\n  // }\r\n  // UpdateUserStatus(ev) {\r\n  //   if (ev.status == false) {\r\n  //     ev.status = 1;\r\n  //   } else {\r\n  //     ev.status = 0;\r\n  //   }\r\n  //   this.common.PostMethod(\"RecordUpdate\", { file: \"users\", name: \"id\", value: ev.id, updatename: \"status\", updatevalue: ev.status }).then((res: any) => {\r\n  //     if (res.Status == 1) {\r\n  //       this.common.ToastMessage(\"Success\", \"User Status Change Successfully\");\r\n  //       this.GetUserList();\r\n  //     } else {\r\n  //       this.common.ToastMessage(\"Fail\", \"User Status Change Fail\");\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // UpdateCurrentStatus(ev) {\r\n  //   if (ev.currentstatus == false) {\r\n  //     ev.currentstatus = 1;\r\n  //   } else {\r\n  //     ev.currentstatus = 0;\r\n  //   }\r\n  //   this.common.PostMethod(\"RecordUpdate\", { file: \"users\", name: \"id\", value: ev.id, updatename: \"currentstatus\", updatevalue: ev.currentstatus }).then((res: any) => {\r\n  //     if (res.Status == 1) {\r\n  //       this.common.ToastMessage(\"Success\", \"User Current Login Status Change Successfully\");\r\n  //       this.GetUserList();\r\n  //     } else {\r\n  //       this.common.ToastMessage(\"Fail\", \"User Current Login Status Change Fail\");\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // ProfileEdit(ev) {\r\n  //   console.log(ev);\r\n  //   this.lists.profileedit = true;\r\n  //   this.lists.SelectedIndex = 0;\r\n  //   this.GetBranchlist({ value: ev.cityname });\r\n  //   this.userform.controls['name'].setValue(ev.name);\r\n  //   this.userform.controls['mobile'].setValue(ev.mobile);\r\n  //   this.userform.controls['branch'].setValue(parseInt(ev.branch));\r\n  //   this.userform.controls['city'].setValue(ev.cityname);\r\n  //   this.userform.controls['amount'].setValue(ev.PresentAmount);\r\n  //   this.userform.controls['amount'].disable();\r\n  //   this.userform.controls['usertype'].setValue(ev.usertype);\r\n  //   this.userform.get('password').setValidators([]);\r\n  //   this.userform.get('password').updateValueAndValidity();\r\n  //   this.lists.nUserId = ev.id;\r\n  //   if (ev.Bank) {\r\n  //     this.userform.controls[\"bankname\"].setValue(ev.Bank.bankname);\r\n  //     this.userform.controls[\"accttype\"].setValue(ev.Bank.accounttype);\r\n  //     this.userform.controls[\"account\"].setValue(ev.Bank.accountnumber);\r\n  //     this.userform.controls[\"ifsccode\"].setValue(ev.Bank.ifsc);\r\n  //   }\r\n  //   if (ev.KYC.length > 0) {\r\n  //     this.lists.Doctype = ev.KYC;\r\n  //   }\r\n  // }\r\n\r\n  // RegistrationUpdate() {\r\n  //   this.userform.controls['KYC'].setValue(this.lists.Doctype);\r\n  //   this.userform.controls['id'].setValue(parseInt(this.lists.nUserId));\r\n  //   this.common.PostMethod(\"UserRegistration\", this.userform.value).then((res: any) => {\r\n  //     if (res.Status == 1) {\r\n  //       this.common.ToastMessage(\"Success\", res.Message);\r\n  //       this.userform.reset();\r\n  //       this.userform.controls['aId'].setValue(localStorage.getItem(\"UserId\"));\r\n  //       this.userform.controls['amount'].setValue(0);\r\n  //       this.userform.controls['id'].setValue(0);\r\n\r\n  //       this.GetDocList();\r\n  //       this.GetUserList();\r\n  //     } else {\r\n  //       this.common.ToastMessage(\"Fail\", res.Message);\r\n  //     }\r\n  //   });\r\n  // }\r\n  // Changetab(ev) {\r\n  //   console.log(ev);\r\n  // }\r\n\r\n\r\n}\r\n","module.exports = \".customhr {\\r\\n    border-bottom: 2px solid rgba(120, 130, 140, 0.13);\\r\\n    padding-bottom: 10px;\\r\\n    padding-top: 10px;\\r\\n    padding-left: 1px;\\r\\n    /* width: 50%; */\\r\\n}\\r\\n.customAddresinfo {\\r\\n    border-bottom: 2px solid rgba(120, 130, 140, 0.13);\\r\\n    padding-bottom: 10px;\\r\\n    padding-top: 10px;\\r\\n    padding-left: 1px;\\r\\n    width: 20%;\\r\\n    text-align: left;\\r\\n}\\r\\n.customAddresinfo1 {\\r\\n    border-bottom: 2px solid rgba(120, 130, 140, 0.13);\\r\\n    padding-bottom: 10px;\\r\\n    padding-top: 10px;\\r\\n    padding-left: 1px;\\r\\n    width: 30%;\\r\\n    text-align: left;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvUG9ydGFsL1VzZXIvcHJvZmlsZS9wcm9maWxlLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxrREFBa0Q7SUFDbEQsb0JBQW9CO0lBQ3BCLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxrREFBa0Q7SUFDbEQsb0JBQW9CO0lBQ3BCLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsVUFBVTtJQUNWLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksa0RBQWtEO0lBQ2xELG9CQUFvQjtJQUNwQixpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLFVBQVU7SUFDVixnQkFBZ0I7QUFDcEIiLCJmaWxlIjoic3JjL2FwcC9Qb3J0YWwvVXNlci9wcm9maWxlL3Byb2ZpbGUuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5jdXN0b21ociB7XHJcbiAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgcmdiYSgxMjAsIDEzMCwgMTQwLCAwLjEzKTtcclxuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xyXG4gICAgcGFkZGluZy10b3A6IDEwcHg7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDFweDtcclxuICAgIC8qIHdpZHRoOiA1MCU7ICovXHJcbn1cclxuLmN1c3RvbUFkZHJlc2luZm8ge1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHJnYmEoMTIwLCAxMzAsIDE0MCwgMC4xMyk7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMTBweDtcclxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxcHg7XHJcbiAgICB3aWR0aDogMjAlO1xyXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcclxufVxyXG4uY3VzdG9tQWRkcmVzaW5mbzEge1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHJnYmEoMTIwLCAxMzAsIDE0MCwgMC4xMyk7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMTBweDtcclxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxcHg7XHJcbiAgICB3aWR0aDogMzAlO1xyXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcclxufVxyXG4iXX0= */\"","import { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatTableDataSource, MatPaginator, MatSort } from '@angular/material';\r\nimport { CommonService } from '../../Service/common.service';\r\nimport { CustomValidators } from 'ng2-validation';\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.css']\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n  lists: any = {};\r\n  bankdetailListarray = [];\r\n  doctype = [];\r\n  userdetailarray = [];\r\n\r\n  newUserlist = new MatTableDataSource();\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n  constructor(public common: CommonService, public fb: FormBuilder) { }\r\n\r\n  ngOnInit() {\r\n    this.userdetail();\r\n  }\r\n\r\n  shortformatDate(date) {\r\n    if(date){\r\n    var day = date.getDate();\r\n    if (day < 10) {\r\n        day = \"0\" + day;\r\n    }\r\n    var month = date.getMonth() + 1;\r\n    if (month < 10) {\r\n        month = \"0\" + month;\r\n    }\r\n    var year = date.getFullYear();\r\n    return day + \"/\" + month + \"/\" + year;\r\n    }else{\r\n      return '';\r\n    }\r\n  }\r\n  checkplanvalidity(pstartDate,plantype){\r\n    if(pstartDate && plantype){\r\n      let days = 0;\r\n      if(plantype == 'Yearlyplan'){\r\n      days = 365;\r\n      }else if(plantype == 'sixmonthplan'){\r\n      days = 181;\r\n    }\r\n      let finaldate = new Date(pstartDate.getTime() + days*24*60*60*1000);      \r\n      return finaldate;\r\n      }else{\r\n        return '';\r\n      }       \r\n  }\r\n  checkplandetail(plantype){\r\n    if(plantype == 'Yearlyplan'){\r\n      return 'Basic Yearly Plan(Rs. 1000/-)';\r\n      }else if(plantype == 'sixmonthplan'){\r\n      return '6 Month Plan(Rs. 500/-)';      \r\n      } \r\n  }\r\n\r\n\r\nuserdetail(){\r\n  let data = JSON.parse(localStorage.getItem(\"UserProfile\"));\r\n  this.lists.usertype = data.user_type;\r\n  let res = data.name.split(\" \");\r\n  this.lists.firstname = res[0];\r\n  this.lists.lastname = res[1];\r\n  this.lists.email = data.email;\r\n  this.lists.mobnumber = data.mobile;\r\n  //permanent address\r\n  if(data.user_address.length > 0){\r\n  this.lists.perAddress = data.user_address[0].address;      \r\n  this.lists.perState = data.user_address[0].state_id;  \r\n  this.lists.perCity = data.user_address[0].city_id;\r\n  this.lists.perPincode = data.user_address[0].pincode;\r\n}\r\n  //corresponding address\r\n  if(data.user_address.length > 0){\r\n  this.lists.corresAddress = data.user_address[0].address;\r\n  this.lists.corresState = data.user_address[0].state_id;\r\n  this.lists.corresCity = data.user_address[0].city_id;\r\n  this.lists.corresPincode = data.user_address[0].pincode;\r\n  }\r\n\r\n  this.lists.bankdetailList = new MatTableDataSource();\r\n  this.lists.displayedColumns = ['BankName', 'AccountNo', 'IFSCCode', 'AccountType',];\r\n  this.lists.bankdetailList.paginator = this.paginator;\r\n  this.lists.bankdetailList.sort = this.sort;\r\n\r\n   // subscription detail\r\n   this.lists.subscriptionplanid = data.subscription_info.id;     \r\n   let psdate = data.subscription_info.subscription_date.split(\"T\");\r\n   this.lists.subscriptionplanstartdate = psdate[0];\r\n   let esdate = data.subscription_info.expire_date.split(\"T\");\r\n   this.lists.subscriptionplanenddate = esdate[0];\r\n\r\n  //  this.lists.kycdetailList = new MatTableDataSource();\r\n  // this.lists.displayedColumns = ['DcName','DocNo','DocImage',];\r\n  // this.lists.kycdetailList.paginator = this.paginator;\r\n  // this.lists.kycdetailList.sort = this.sort;\r\n}\r\n\r\n  // dataarray = [\r\n  //   {\r\n  //     confirmPassword: \"Hello@123\",\r\n  //     email: \"test@gmail.com\",\r\n  //     firstname: \"Raj\",\r\n  //     lastname: \"parmar\",\r\n  //     mobnumber: \"4443434343\",\r\n  //     password: \"Hello@123\",\r\n  //     usertype: \"Individual\",\r\n  //     corresAddress: \"new ashok nagar khara kua near 100 ft road petrol pump\",\r\n  //     corresCity: \"udaipur\",\r\n  //     corresPincode: 313001,\r\n  //     corresState: { code: \"AN\", name: \"Rajasthan\" },\r\n  //     perAddress: \"new ashok nagar khara kua near 100 ft road petrol pump\",\r\n  //     perCity: \"udaipur\",\r\n  //     perPincode: 313001,\r\n  //     perState: { code: \"AN\", name: \"Rajasthan\" },\r\n  //     bankdetail: [{ bankname: \"Axis Bank\", accttype: \"Saving\", ifsccode: \"axic0301\", accountno: 5012344295316295 },\r\n  //     { bankname: \"HDFC Bank\", accttype: \"Saving\", ifsccode: \"hdfc3201\", accountno: 8912762995312985 },\r\n  //     { bankname: \"Punjab Bank\", accttype: \"Current\", ifsccode: \"pnbb6736\", accountno: 8372912309852689 }],\r\n  //     // Subscriptionplan: \"Basic Yearly Plan(Rs. 1000/-)\",\r\n  //     Subscriptionplan: \"sixmonthplan\",\r\n  //     Planstartdate: new Date('04-28-2021'),\r\n  //     Doctype:[{id: 3, docname: \"PAN CARD\", doctype: 1, value: \"12345677\", image: \"https://apitechjaipur.easybillpay.co.in/Files/1619535795816089963-user our product.png\"},\r\n  //     {id: 2, docname: \"AADHAR CARD\", doctype: 1, value: \"54545454545454\", image: \"https://apitechjaipur.easybillpay.co.in/Files/1619535804496316417-user profle page.png\"},\r\n  //     {id: 1, docname: \"Photo\", doctype: 0, image: \"https://apitechjaipur.easybillpay.co.in/Files/16195358241281078364-user registration.png\"}]\r\n  //   }\r\n\r\n  // ];\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { UserRoutes } from './user.routing';\r\nimport { DemoMaterialModule } from '../../demo-material-module';\r\nimport { CreateuserComponent } from './createuser/createuser.component';\r\nimport { UserlistComponent } from './userlist/userlist.component';\r\nimport { ProfileComponent } from './profile/profile.component';\r\nimport { PipeModule} from '../Pipes/pipe/pipe.module'\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(UserRoutes),\r\n    DemoMaterialModule,\r\n    FlexLayoutModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    PipeModule\r\n  ],\r\n  declarations: [\r\n   CreateuserComponent,\r\n   UserlistComponent,\r\n   ProfileComponent\r\n  ]\r\n})\r\nexport class UserModule {}\r\n","import { Routes } from '@angular/router';\r\nimport { CreateuserComponent } from './createuser/createuser.component';\r\nimport { ProfileComponent } from './profile/profile.component';\r\nimport { UserlistComponent } from './userlist/userlist.component';\r\nexport const UserRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    children: [\r\n      {\r\n        path: 'createuser',\r\n        component: CreateuserComponent,\r\n\t\tdata: {\r\n          title: 'Create New User',\r\n          urls: [\r\n            { title: 'Dashboard', url: '/dashboard' },\r\n            { title: 'Create New User' }\r\n          ]\r\n        }\r\n      },\r\n       {\r\n    path: 'userlist',\r\n    component: UserlistComponent,\r\ndata: {\r\n      title: 'User List',\r\n      urls: [\r\n        { title: 'Dashboard', url: '/dashboard' },\r\n        { title: 'User List' }\r\n      ]\r\n      \r\n    }\r\n  },\r\n  {\r\n    path: 'userprofile',\r\n    component: ProfileComponent,\r\ndata: {\r\n      title: 'User Profile',\r\n      urls: [\r\n        { title: 'Dashboard', url: '/dashboard' },\r\n        { title: 'User Profile' }\r\n      ]\r\n      \r\n    }\r\n  }\r\n]\r\n  }];\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL1BvcnRhbC9Vc2VyL3VzZXJsaXN0L3VzZXJsaXN0LmNvbXBvbmVudC5jc3MifQ== */\"","import { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatTableDataSource, MatPaginator, MatSort } from '@angular/material';\r\nimport { CommonService } from '../../Service/common.service';\r\nimport {MatDatepickerInputEvent} from '@angular/material/datepicker';\r\nimport { MatDialog,MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { UserdetailComponent } from '../../Dailogbox/userdetail/userdetail.component';\r\n\r\n@Component({\r\n  selector: 'app-userlist',\r\n  templateUrl: './userlist.component.html',\r\n  styleUrls: ['./userlist.component.css']\r\n})\r\nexport class UserlistComponent implements OnInit {\r\n  lists: any = {};\r\n  Userlist = [];\r\n  usertypelistarray = []\r\n  subscriptionplanarray = []\r\n  userviewdata : any = {}\r\n\r\n  isLinear = false;\r\n  newUserlist = new MatTableDataSource();\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n  constructor(public common: CommonService,public dialog: MatDialog) {     \r\n    this.lists.Doctype = [];\r\n    if (localStorage.getItem(\"UserType\") == 'Admin') {\r\n      this.lists.usertype = \"Agent\";\r\n    }\r\n    // this.GetUsertype();\r\n    // this.GetSubscriptionpan();\r\n    this.GetUserList();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.lists.SelectedIndex = 0;\r\n    //this.lists.displayedColumns = ['action', 'name', 'Branchname', 'mobile', 'usertype', 'PresentAmount', 'lastlogin', 'status', 'login'];\r\n    this.lists.displayedColumns = ['id','user_type', 'name', 'email', 'mobile',  'profile_image','fcm_id','subscription_id','expire_date', 'crated_at', 'last_login_at', 'updatedAt', 'status','action'];\r\n    this.newUserlist.paginator = this.paginator;\r\n    this.newUserlist.sort = this.sort;\r\n  }\r\n\r\n  GetUserList(){\r\n    this.common.PostMethod(\"user/getuserlist\",{ where:{},order:[['id','desc']],limit:100,\r\n    }).then((res: any) => {\r\n      this.newUserlist = new MatTableDataSource(res.data);   \r\n    });\r\n  }\r\n\r\n\r\n  UserProfileEdit(ev){\r\n\r\n  }\r\n\r\n  UserAllDetail(ev){\r\n    let dailog = this.common.dialog.open(UserdetailComponent,{data:{status:true,ev}});\r\n    dailog.afterClosed().subscribe(data => {\r\n\r\n    });\r\n  }\r\n\r\n  // GetUserList() {\r\n  //   let UserId: any = 0;\r\n  //   if (localStorage.getItem(\"UserType\") != \"Super Admin\") {\r\n  //     UserId = localStorage.getItem(\"UserId\");\r\n  //   }\r\n  //   if (this.lists.adminid) {\r\n  //     UserId = this.lists.adminid;\r\n  //   }\r\n  //   this.common.GetMethod(\"GetUserInfo?userid=\" + UserId).then((res: any) => {\r\n  //     this.Userlist = res.Data;\r\n  //     this.Userlist.forEach(element => {\r\n  //       element.adminid = parseInt(element.adminid);\r\n  //       if (element.status == 0) {\r\n  //         element.status = false;\r\n  //       }\r\n  //       if (element.status == 1) {\r\n  //         element.status = true;\r\n  //       }\r\n  //       if (element.currentstatus == 0) {\r\n  //         element.currentstatus = false;\r\n  //       }\r\n  //       if (element.currentstatus == 1) {\r\n  //         element.currentstatus = true;\r\n  //       }\r\n  //     });\r\n  //     this.newUserlist = new MatTableDataSource(this.Userlist);\r\n  //     this.newUserlist.paginator = this.paginator;\r\n  //     this.newUserlist.sort = this.sort;\r\n  //   });\r\n  // }\r\n  // UpdateUserStatus(ev) {\r\n  //   if (ev.status == false) {\r\n  //     ev.status = 1;\r\n  //   } else {\r\n  //     ev.status = 0;\r\n  //   }\r\n  //   this.common.PostMethod(\"RecordUpdate\", { file: \"users\", name: \"id\", value: ev.id, updatename: \"status\", updatevalue: ev.status }).then((res: any) => {\r\n  //     if (res.Status == 1) {\r\n  //       this.common.ToastMessage(\"Success\", \"User Status Change Successfully\");\r\n  //       this.GetUserList();\r\n  //     } else {\r\n  //       this.common.ToastMessage(\"Fail\", \"User Status Change Fail\");\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  // UpdateCurrentStatus(ev) {\r\n  //   if (ev.currentstatus == false) {\r\n  //     ev.currentstatus = 1;\r\n  //   } else {\r\n  //     ev.currentstatus = 0;\r\n  //   }\r\n  //   this.common.PostMethod(\"RecordUpdate\", { file: \"users\", name: \"id\", value: ev.id, updatename: \"currentstatus\", updatevalue: ev.currentstatus }).then((res: any) => {\r\n  //     if (res.Status == 1) {\r\n  //       this.common.ToastMessage(\"Success\", \"User Current Login Status Change Successfully\");\r\n  //       this.GetUserList();\r\n  //     } else {\r\n  //       this.common.ToastMessage(\"Fail\", \"User Current Login Status Change Fail\");\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n}\r\n\r\n"],"sourceRoot":""}