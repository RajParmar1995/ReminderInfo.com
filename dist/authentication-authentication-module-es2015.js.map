{"version":3,"sources":["webpack:///./src/app/authentication/error/error.component.html","webpack:///./src/app/authentication/forgot/forgot.component.html","webpack:///./src/app/authentication/lockscreen/lockscreen.component.html","webpack:///./src/app/authentication/login/login.component.html","webpack:///./src/app/authentication/register/register.component.html","webpack:///./src/app/authentication/authentication.module.ts","webpack:///./src/app/authentication/authentication.routing.ts","webpack:///./src/app/authentication/error/error.component.scss","webpack:///./src/app/authentication/error/error.component.ts","webpack:///./src/app/authentication/forgot/forgot.component.scss","webpack:///./src/app/authentication/forgot/forgot.component.ts","webpack:///./src/app/authentication/lockscreen/lockscreen.component.scss","webpack:///./src/app/authentication/lockscreen/lockscreen.component.ts","webpack:///./src/app/authentication/login/login.component.scss","webpack:///./src/app/authentication/login/login.component.ts","webpack:///./src/app/authentication/register/register.component.scss","webpack:///./src/app/authentication/register/register.component.ts"],"names":[],"mappings":"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","file":"authentication-authentication-module-es2015.js","sourcesContent":["module.exports = \"<div class=\\\"login-register\\\">\\n    <div class=\\\"login-register-box error-card text-center\\\">\\n        <h1>404</h1>\\n        <h3 class=\\\"text-uppercase\\\">Page Not Found !</h3>\\n        <p class=\\\"text-muted m-t-30 m-b-30\\\">You seem to be trying to find this way to home</p>\\n        <a mat-raised-button color=\\\"primary\\\" [routerLink]=\\\"['/']\\\" class=\\\"btn btn-info btn-rounded waves-effect waves-light m-b-40\\\">Back to home</a>\\n    </div>\\n</div>\"","module.exports = \"<div class=\\\"login-register\\\" style=\\\"background-image:url(assets/images/background/login-register.jpg);\\\">\\n    <div class=\\\"login-register-box\\\">\\n        <mat-card>\\n            <mat-card-content>\\n                <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n                    <div class=\\\"text-center\\\">\\n                        <img alt=\\\"homepage\\\" style=\\\"heigth:100px !important\\\" src=\\\"assets/images/logo-icon.png\\\">\\n                        <h4 class=\\\"m-t-0\\\">Recover Password</h4>\\n                    </div>\\n                    <p class=\\\"text-center font-14\\\">Enter your Mobile Number and we'll send you OTP.</p>\\n                    <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"space-around\\\">\\n                        <div class=\\\"pb-1\\\">\\n                            <mat-form-field style=\\\"width: 100%\\\">\\n                                <input matInput placeholder=\\\"Mobile Number\\\" type=\\\"tel\\\" maxlength=\\\"10\\\"\\n                                    [formControl]=\\\"form.controls['mobile']\\\">\\n                            </mat-form-field>\\n                            <small\\n                                *ngIf=\\\"form.controls['mobile'].hasError('required') && form.controls['mobile'].touched\\\"\\n                                class=\\\"text-danger support-text\\\">You must include Mobile Number.</small>\\n                            <small *ngIf=\\\"form.controls['mobile'].errors?.email && form.controls['mobile'].touched\\\"\\n                                class=\\\"text-danger support-text\\\">You must include a valid Mobile Number.</small>\\n                        </div>\\n                        <a [routerLink]=\\\"['/authentication/login']\\\" class=\\\"link text-info\\\">Back to Login</a>\\n\\n                        <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" class=\\\"btn-block btn-lg m-t-20\\\"\\n                            [disabled]=\\\"!form.valid\\\">Send OTP</button>\\n                    </div>\\n\\n                </form>\\n            </mat-card-content>\\n        </mat-card>\\n    </div>\\n</div>\"","module.exports = \"<div class=\\\"login-register\\\" style=\\\"background-image:url(assets/images/background/login-register.jpg);\\\">\\n  <div class=\\\"login-register-box\\\">\\n    <mat-card>\\n      <mat-card-content>\\n        <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n          <div class=\\\"text-center\\\">\\n            <img src=\\\"assets/images/users/1.jpg\\\" class=\\\"img-circle\\\" width=\\\"80\\\" alt=\\\"user\\\" title=\\\"user\\\" />\\n          <h4 class=\\\"m-t-0\\\">{{lists.profile.name}}</h4>\\n          </div>\\n\\n          <div fxLayout=\\\"row wrap\\\">\\n            <!-- col full-->\\n            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n              <mat-form-field style=\\\"width: 100%\\\">\\n                <input matInput type=\\\"password\\\" placeholder=\\\"Enter Password\\\" [formControl]=\\\"form.controls['password']\\\">\\n              </mat-form-field>\\n              <small *ngIf=\\\"form.controls['password'].hasError('required') && form.controls['password'].touched\\\" class=\\\"text-danger support-text\\\">Password is required.</small>\\n            </div>\\n            <!-- col full-->\\n            <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\n              <button mat-raised-button class=\\\"btn-block btn-lg m-t-10 m-b-10\\\" color=\\\"primary\\\" type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\">Unlock</button>\\n            </div>\\n          </div>\\n        </form>\\n      </mat-card-content>\\n    </mat-card>\\n  </div>\\n</div>\"","module.exports = \"<div class=\\\"login-register\\\" style=\\\"background-image:url(assets/images/background/login-register.png);\\\">\\r\\n    <div class=\\\"login-register-box\\\">\\r\\n        <mat-card>\\r\\n            <mat-card-content>\\r\\n                <form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n                    <div class=\\\"text-center\\\">\\r\\n                        <img style=\\\"height: 100px !important;\\\" alt=\\\"homepage\\\" src=\\\"assets/images/logo-icon.png\\\">\\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"row wrap\\\">\\r\\n                        <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                            <mat-form-field>\\r\\n                                <input matInput placeholder=\\\"Mobile Number / Email\\\" type=\\\"text\\\" \\r\\n                                    [formControl]=\\\"form.controls['mobile']\\\">\\r\\n                            </mat-form-field>\\r\\n                            <small\\r\\n                                *ngIf=\\\"form.controls['mobile'].hasError('required') && form.controls['mobile'].touched\\\"\\r\\n                                class=\\\"text-danger support-text\\\">Mobile No. / Email is required.</small>\\r\\n                        </div>\\r\\n                        <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                            <mat-form-field>\\r\\n                                <input matInput placeholder=\\\"Enter your password\\\" [type]=\\\"hide ? 'password' : 'text'\\\"\\r\\n                                    [formControl]=\\\"form.controls['password']\\\">\\r\\n                                <button mat-icon-button matSuffix (click)=\\\"hide = !hide\\\"\\r\\n                                    [attr.aria-label]=\\\"'Hide password'\\\" [attr.aria-pressed]=\\\"hide\\\">\\r\\n                                    <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n                                </button>\\r\\n                            </mat-form-field>\\r\\n                            <small\\r\\n                                *ngIf=\\\"form.controls['password'].hasError('required') && form.controls['password'].touched\\\"\\r\\n                                class=\\\"text-danger support-text\\\">Password is required.</small>\\r\\n                        </div>\\r\\n                        <div fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-xs=\\\"50\\\">\\r\\n                            <mat-checkbox color=\\\"warn\\\">Remember me</mat-checkbox>\\r\\n                        </div>\\r\\n                        <div fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"text-right\\\">\\r\\n                            <a [routerLink]=\\\"['/authentication/forgot']\\\" class=\\\"link\\\">Forgot Password?</a>\\r\\n                        </div>\\r\\n                        <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                            <button mat-raised-button color=\\\"primary\\\" class=\\\"btn-block btn-lg m-t-20 m-b-20\\\"\\r\\n                                type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\">Login</button>\\r\\n                        </div>\\r\\n                        <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\" class=\\\"text-center\\\">\\r\\n                            <span>Don't have an account?\\r\\n                                <a [routerLink]=\\\"['/authentication/register']\\\" class=\\\"text-info link\\\">Register</a>\\r\\n                            </span>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </form>\\r\\n                <div style=\\\"font-size: 14px;margin-top: 10px;\\\">   \\r\\n                    <!-- <a href=\\\"https://easybillpay.co.in\\\">2020 EasyBillPay</a> &copy;  -->\\r\\n                    Powered by <a href=\\\"http://stwinsparx.com/\\\">Stwin Sparx</a>\\r\\n                </div>\\r\\n            </mat-card-content>\\r\\n        </mat-card>\\r\\n    </div>\\r\\n</div>\"","module.exports = \"<div class=\\\"login-register\\\" style=\\\"background-image:url(assets/images/background/login-register.jpg);\\\">\\r\\n  <div fxLayout=\\\"row wrap\\\">\\r\\n    <mat-card fxFlex.gt-sm=\\\"50%\\\" fxFlex=\\\"50\\\" style=\\\"margin-left: 25%;\\\">\\r\\n      <mat-card-content style=\\\"margin: 0%;\\\">\\r\\n        <div class=\\\"text-center\\\">\\r\\n          <h4 class=\\\"m-t-0 m-b-0\\\">Register to App</h4>\\r\\n        </div>\\r\\n        <div fxLayout=\\\"row wrap m-l-0 m-r-0\\\">\\r\\n          <!-- col full-->\\r\\n          <div fxFlex.gt-sm=\\\"100%\\\" fxFlex=\\\"100\\\" class=\\\"m-0 p-0\\\">\\r\\n            <mat-card-content>\\r\\n              <mat-horizontal-stepper linear #stepper>\\r\\n                <mat-step [stepControl]=\\\"firstFormGroup\\\">\\r\\n                <!-- <mat-step> -->\\r\\n                  <form [formGroup]=\\\"firstFormGroup\\\">\\r\\n                    <ng-template matStepLabel>Basic Info</ng-template>\\r\\n                    <div fxLayout=\\\"row wrap\\\">\\r\\n                      <div class=\\\"p-10\\\" fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"1-0\\\" fxFlex=\\\"100\\\">\\r\\n                          <mat-form-field>\\r\\n                            <mat-label>User Type</mat-label>\\r\\n                            <mat-select formControlName=\\\"usertype\\\">\\r\\n                                <mat-option>--</mat-option>\\r\\n                                <mat-option *ngFor=\\\"let a of userTtypelist\\\" [value]=\\\"a.id\\\" required>\\r\\n                                    {{a.name}}\\r\\n                                </mat-option>\\r\\n                            </mat-select>\\r\\n                          </mat-form-field>\\r\\n                      </div>\\r\\n                      <div class=\\\"p-10\\\" fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\r\\n                        <mat-form-field>\\r\\n                          <input matInput placeholder=\\\"FirstName\\\" formControlName=\\\"firstname\\\" required>\\r\\n                        </mat-form-field>\\r\\n                        <p class=\\\"text-danger m-t-0 font-16\\\"\\r\\n                          *ngIf=\\\"firtsForm.firstname.touched && (firtsForm.firstname.errors?.minlength || firtsForm.firstname.errors?.maxlength)\\\">\\r\\n                          First Name should be of Min. 3 characters, Max. 20 characters.</p>\\r\\n                        <p class=\\\"text-danger m-t-0 font-16\\\"\\r\\n                          *ngIf=\\\"firtsForm.firstname.touched && firtsForm.firstname.errors?.pattern\\\">\\r\\n                          First Name contains only characters.</p>\\r\\n                      </div>\\r\\n                      <div class=\\\"p-10\\\" fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\r\\n                        <mat-form-field>\\r\\n                          <input matInput placeholder=\\\"Last Name\\\" formControlName=\\\"lastname\\\" required>\\r\\n                        </mat-form-field>\\r\\n                        <p class=\\\"text-danger m-t-0 font-16\\\"\\r\\n                          *ngIf=\\\"firtsForm.lastname.touched && (firtsForm.lastname.errors?.minlength || firtsForm.lastname.errors?.maxlength)\\\">\\r\\n                          Last Name should be of Min. 3 characters, Max. 20 characters.</p>\\r\\n                        <p class=\\\"text-danger m-t-0 font-16\\\"\\r\\n                          *ngIf=\\\"firtsForm.lastname.touched && firtsForm.lastname.errors?.pattern\\\">\\r\\n                          Last Name contains only characters.</p>\\r\\n                      </div>\\r\\n                      <div class=\\\"p-10\\\" fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\r\\n                        <mat-form-field>\\r\\n                          <span matPrefix>+91 &nbsp;</span>\\r\\n                          <input type=\\\"tel\\\" matInput placeholder=\\\"Mobile Number\\\" formControlName=\\\"mnumber\\\" required>\\r\\n                        </mat-form-field>\\r\\n                        <p class=\\\"text-danger m-t-0 font-16\\\"\\r\\n                          *ngIf=\\\"firtsForm.mnumber.touched && firtsForm.mnumber.hasError('required')\\\">\\r\\n                          Mobile Number Cannot be blank.\\r\\n                        </p>\\r\\n                        <p class=\\\"text-danger m-t-0 font-16\\\"\\r\\n                          *ngIf=\\\"firtsForm.mnumber.touched && (firtsForm.mnumber.errors?.minlength || firtsForm.mnumber.errors?.maxlength)\\\">\\r\\n                          Mobile Number Should be of atleast 10 digit.\\r\\n                        </p>\\r\\n                        <p class=\\\"text-danger m-t-0 font-16\\\"\\r\\n                          *ngIf=\\\"firtsForm.mnumber.touched &&(firtsForm.mnumber.errors?.pattern)\\\">\\r\\n                          Use Digits Only.\\r\\n                        </p>\\r\\n                      </div>\\r\\n                      <div class=\\\"p-10\\\" fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\r\\n                        <mat-form-field>\\r\\n                          <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\" required>\\r\\n                        </mat-form-field>\\r\\n                        <p *ngIf=\\\"firtsForm.email.hasError('pattern') && firtsForm.email.touched\\\"\\r\\n                          class=\\\"text-danger m-t-0 font-16\\\">Please Enter Valid Email.</p>\\r\\n                      </div>\\r\\n                      <div class=\\\"p-10\\\" fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\r\\n                        <mat-form-field>\\r\\n                          <input matInput placeholder=\\\"Enter your password\\\" formControlName=\\\"password\\\"\\r\\n                            [type]=\\\"hide ? 'password' : 'text'\\\">\\r\\n                          <button mat-icon-button matSuffix (click)=\\\"hide = !hide\\\" [attr.aria-label]=\\\"'Hide password'\\\"\\r\\n                            [attr.aria-pressed]=\\\"hide\\\">\\r\\n                            <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n                          </button>\\r\\n                        </mat-form-field>\\r\\n                        <p class=\\\"text-danger m-t-0 font-16\\\"\\r\\n                          *ngIf=\\\"firtsForm.password.touched && (firtsForm.password.errors?.required||firtsForm.password.errors?.minlength||firtsForm.password.errors?.maxlength||firtsForm.password.errors?.pattern)\\\">\\r\\n                          Password should be of Min. 8 characters,Max. 30 characters, which must contain at least\\r\\n                          one Special character, one Capital letter, one Small letter and one Numeric value.</p>\\r\\n                      </div>\\r\\n                      <div class=\\\"p-10\\\" fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\r\\n                        <mat-form-field>\\r\\n                          <input matInput placeholder=\\\"Confirm your password\\\" [type]=\\\"hide1 ? 'password' : 'text'\\\"\\r\\n                            formControlName=\\\"confirmPassword\\\">\\r\\n                          <button mat-icon-button matSuffix (click)=\\\"hide1 = !hide1\\\" [attr.aria-label]=\\\"'Hide password'\\\"\\r\\n                            [attr.aria-pressed]=\\\"hide1\\\">\\r\\n                            <mat-icon>{{hide1 ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n                          </button>\\r\\n                        </mat-form-field>\\r\\n                        <p *ngIf=\\\"firtsForm.confirmPassword.errors?.equalTo && firtsForm.confirmPassword.touched\\\"\\r\\n                          class=\\\"text-danger m-t-0 font-16\\\">Passwords do not math.</p>\\r\\n                      </div>                     \\r\\n                    </div>\\r\\n                    <div fxLayout=\\\"row wrap\\\">\\r\\n                      <div fxFlex.gt-sm=\\\"100\\\" class=\\\"text-right\\\" fxFlex.gt-xs=\\\"1-0\\\" fxFlex=\\\"100\\\">\\r\\n                        <button mat-raised-button class=\\\"pull-right\\\" color=\\\"warn\\\" matStepperNext>Next</button>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </form>\\r\\n                </mat-step>\\r\\n                <mat-step [stepControl]=\\\"secondFormGroup\\\" [optional]=\\\"isOptional\\\">\\r\\n                  <form [formGroup]=\\\"secondFormGroup\\\">\\r\\n                    <ng-template matStepLabel>Fill out your address</ng-template>\\r\\n                    <div fxLayout=\\\"row wrap\\\">\\r\\n                      <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                        <label><b>Permanent Address</b></label>\\r\\n                      </div>\\r\\n                      <div class=\\\"p-l-10 p-r-10\\\" fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                        <mat-form-field>\\r\\n                          <textarea matInput placeholder=\\\"Address\\\" formControlName=\\\"perAddress\\\" required></textarea>\\r\\n                        </mat-form-field>\\r\\n                      </div>\\r\\n                      <div class=\\\"p-l-10 p-r-10\\\" fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"33.33\\\" fxFlex=\\\"100\\\">\\r\\n                        <mat-form-field>\\r\\n                          <mat-select placeholder=\\\"Select State\\\" (selectionChange)=\\\"GetCity()\\\" formControlName=\\\"perState\\\" required>\\r\\n                            <mat-option>--</mat-option>\\r\\n                            <mat-option *ngFor=\\\"let state of statearray\\\" [value]=\\\"state.id\\\">{{state.name}}</mat-option>\\r\\n                          </mat-select>\\r\\n                        </mat-form-field>\\r\\n                      </div>\\r\\n                      <div class=\\\"p-l-10 p-r-10\\\" fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"33.33\\\" fxFlex=\\\"100\\\">\\r\\n                        <mat-form-field>\\r\\n                          <mat-select placeholder=\\\"Select City\\\" formControlName=\\\"perCity\\\" required>\\r\\n                            <mat-option>--</mat-option>\\r\\n                            <mat-option *ngFor=\\\"let city of cityarray\\\" [value]=\\\"city.id\\\">{{city.name}}</mat-option>\\r\\n                          </mat-select>\\r\\n                        </mat-form-field>\\r\\n                      </div>\\r\\n                      <div class=\\\"p-l-10 p-r-10\\\" fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"33.33\\\" fxFlex=\\\"100\\\">\\r\\n                        <mat-form-field>\\r\\n                          <input matInput type=\\\"number\\\" placeholder=\\\"Pincode\\\" formControlName=\\\"perPincode\\\" required>\\r\\n                        </mat-form-field>\\r\\n                        <p class=\\\"text-danger m-t-0 font-16\\\"\\r\\n                          *ngIf=\\\"secondForm.perPincode.touched && (secondForm.perPincode.errors?.maxLength || secondForm.perPincode.errors?.min || secondForm.perPincode.errors?.max)\\\">\\r\\n                          Pincode code Contains only 6 digits.</p>\\r\\n                      </div>\\r\\n                      <div fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\r\\n                        <label><b>Correspondance Address</b></label>\\r\\n                      </div>\\r\\n                      <div fxFlex.gt-sm=\\\"50\\\" fxFlex.gt-xs=\\\"50\\\" fxFlex=\\\"100\\\">\\r\\n                        <section>\\r\\n                          <mat-checkbox (change)=\\\"AddressCopy($event)\\\">Same as Permanent</mat-checkbox>\\r\\n                        </section>\\r\\n                      </div>\\r\\n                      <div class=\\\"p-l-10 p-r-10\\\" fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                        <mat-form-field>\\r\\n                          <textarea matInput placeholder=\\\"Address\\\" formControlName=\\\"corresAddress\\\" required></textarea>\\r\\n                        </mat-form-field>\\r\\n                      </div>\\r\\n                      <div class=\\\"p-l-10 p-r-10\\\" fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"33.33\\\" fxFlex=\\\"100\\\">\\r\\n                        <mat-form-field>\\r\\n                          <mat-select placeholder=\\\"Select State\\\" (selectionChange)=\\\"GetCityCors()\\\" formControlName=\\\"corresState\\\" required>\\r\\n                            <mat-option>--</mat-option>\\r\\n                            <mat-option *ngFor=\\\"let state of statearray\\\" [value]=\\\"state.id\\\">{{state.name}}</mat-option>\\r\\n                          </mat-select>\\r\\n                        </mat-form-field>\\r\\n                      </div>\\r\\n                      <div class=\\\"p-l-10 p-r-10\\\" fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"33.33\\\" fxFlex=\\\"100\\\">\\r\\n                        <mat-form-field>\\r\\n                            <mat-select placeholder=\\\"Select City\\\" formControlName=\\\"corresCity\\\" required>\\r\\n                              <mat-option>--</mat-option>\\r\\n                              <mat-option *ngFor=\\\"let city of cityarraycors\\\" [value]=\\\"city.id\\\">{{city.name}}</mat-option>\\r\\n                            </mat-select>\\r\\n                        </mat-form-field>\\r\\n                      </div>\\r\\n                      <div class=\\\"p-l-10 p-r-10\\\" fxFlex.gt-sm=\\\"33.33\\\" fxFlex.gt-xs=\\\"33.33\\\" fxFlex=\\\"100\\\">\\r\\n                        <mat-form-field>\\r\\n                          <input matInput type=\\\"number\\\" placeholder=\\\"Pincode\\\" formControlName=\\\"corresPincode\\\" required>\\r\\n                        </mat-form-field>\\r\\n                        <p class=\\\"text-danger m-t-0 font-16\\\"\\r\\n                          *ngIf=\\\"secondForm.corresPincode.touched && (secondForm.corresPincode.errors?.maxLength || secondForm.corresPincode.errors?.min || secondForm.corresPincode.errors?.max)\\\">\\r\\n                          Pincode code Contains only 6 digits.</p>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                    <div>\\r\\n                      <button mat-raised-button color=\\\"accent\\\" matStepperPrevious>Back</button>\\r\\n                      <button mat-raised-button class=\\\"pull-right\\\" color=\\\"warn\\\" matStepperNext>Next</button>\\r\\n                    </div>\\r\\n                  </form>\\r\\n                </mat-step>\\r\\n                  <mat-step  [stepControl]=\\\"thirdFormGroup\\\" [optional]=\\\"isOptional\\\">\\r\\n                  <form [formGroup]=\\\"thirdFormGroup\\\">\\r\\n                    <ng-template matStepLabel>Subscription</ng-template>\\r\\n                    <div fxLayout=\\\"row wrap\\\">\\r\\n                      <div fxFlex.gt-sm=\\\"100\\\" class=\\\"m-t-20 m-b-20\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                        <label [ngStyle]=\\\"{'color':plantypeval == true ? 'black' : 'Red' }\\\">Subscription Plan</label>\\r\\n                      </div>\\r\\n\\r\\n                      <div fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n                        <mat-radio-group formControlName=\\\"Subscriptionplan\\\">\\r\\n                          <div *ngFor=\\\"let Plan of SubPlans\\\">\\r\\n                            <mat-radio-button class=\\\"m-l-20 m-t-5\\\" value=\\\"{{Plan.id}}\\\">{{Plan.subscription_name}}<span>\\r\\n                                (Validity: {{ Plan.validity | monthtoyear}})</span> </mat-radio-button><br>\\r\\n                            <p class=\\\"font-16 m-l-20  m-t-5\\\">{{!Plan.detailview?(Plan.description |\\r\\n                              limitto:100):Plan.description }}<a *ngIf=\\\"Plan.description.length > 100\\\"\\r\\n                                style=\\\"margin-left: -15px;\\\" mat-button color=\\\"primary\\\"\\r\\n                                (click)='Plan.detailview=!Plan.detailview'>{{!Plan.detailview?'Read More':'Hide\\r\\n                                More'}}</a></p>\\r\\n                          </div>\\r\\n                          <hr>\\r\\n                        </mat-radio-group>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                    <div>\\r\\n                      <button mat-raised-button color=\\\"accent\\\" matStepperPrevious>Back</button>\\r\\n                      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onSubmit()\\\" class=\\\"pull-right\\\"\\r\\n                        [disabled]=\\\"!thirdFormGroup.valid\\\">submit</button>\\r\\n                    </div>\\r\\n                  </form>\\r\\n\\r\\n                </mat-step>\\r\\n              </mat-horizontal-stepper>\\r\\n            </mat-card-content>\\r\\n          </div>\\r\\n          <div class=\\\"text-center\\\" fxFlex.gt-sm=\\\"100\\\" fxFlex.gt-xs=\\\"100\\\" fxFlex=\\\"100\\\">\\r\\n            <span>Already have an account?\\r\\n              <a [routerLink]=\\\"['/authentication/login']\\\" class=\\\"link text-info\\\"> Login</a>\\r\\n            </span>\\r\\n          </div>\\r\\n        </div>\\r\\n      </mat-card-content>\\r\\n    </mat-card>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n<!---start-->\"","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  MatIconModule,\r\n  MatCardModule,\r\n  MatInputModule,\r\n  MatCheckboxModule,\r\n  MatButtonModule\r\n} from '@angular/material';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\n\r\nimport { AuthenticationRoutes } from './authentication.routing';\r\nimport { ErrorComponent } from './error/error.component';\r\nimport { ForgotComponent } from './forgot/forgot.component';\r\nimport { LockscreenComponent } from './lockscreen/lockscreen.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { DemoMaterialModule } from '../demo-material-module';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { PipeModule } from '../Portal/Pipes/pipe/pipe.module';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(AuthenticationRoutes),\r\n    MatIconModule,\r\n    MatCardModule,\r\n    MatInputModule,\r\n    MatCheckboxModule,\r\n    MatButtonModule,\r\n    FlexLayoutModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    DemoMaterialModule,\r\n    LayoutModule,\r\n    PipeModule\r\n  ],\r\n  declarations: [\r\n    ErrorComponent,\r\n    ForgotComponent,\r\n    LockscreenComponent,\r\n    LoginComponent,\r\n    RegisterComponent\r\n  ]\r\n})\r\nexport class AuthenticationModule {}\r\n","import { Routes } from '@angular/router';\n\nimport { ErrorComponent } from './error/error.component';\nimport { ForgotComponent } from './forgot/forgot.component';\nimport { LockscreenComponent } from './lockscreen/lockscreen.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nexport const AuthenticationRoutes: Routes = [\n  {\n    path: '',\n    children: [\n      {\n        path: '404',\n        component: ErrorComponent\n      },\n      {\n        path: 'forgot',\n        component: ForgotComponent\n      },\n      {\n        path: 'lockscreen',\n        component: LockscreenComponent\n      },\n      {\n        path: 'login',\n        component: LoginComponent\n      },\n      {\n        path: 'register',\n        component: RegisterComponent\n      }\n    ]\n  }\n];\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGhlbnRpY2F0aW9uL2Vycm9yL2Vycm9yLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-error',\n  templateUrl: './error.component.html',\n  styleUrls: ['./error.component.scss']\n})\nexport class ErrorComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGhlbnRpY2F0aW9uL2ZvcmdvdC9mb3Jnb3QuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  FormControl\n} from '@angular/forms';\nimport { CustomValidators } from 'ng2-validation';\nimport { CommonService } from '../../Portal/Service/common.service';\nimport { OtpComponent } from '../../Portal/Dailogbox/otp/otp.component';\nimport { ChangepasswordComponent } from '../../Portal/Dailogbox/changepassword/changepassword.component';\n\n@Component({\n  selector: 'app-forgot',\n  templateUrl: './forgot.component.html',\n  styleUrls: ['./forgot.component.scss']\n})\nexport class ForgotComponent implements OnInit {\n  public form: FormGroup;\n  lists: any = {};\n  constructor(private fb: FormBuilder, private router: Router, public common: CommonService) { }\n\n  ngOnInit() {\n    this.form = this.fb.group({\n      mobile: [\n        null,\n        Validators.compose([Validators.required, CustomValidators.number, Validators.maxLength(10), Validators.minLength(10)])\n      ]\n    });\n  }\n\n  onSubmit() {\n    this.lists.Randomnumber = Math.floor(100000 + Math.random() * 900000);\n    this.common.PostMethod(\"Checkuser\", { mobile: this.form.value.mobile }).then((result: any) => {\n      if (result.Status == 1) {\n        this.common.PostMethod(\"SendOTP\", { Mobile: this.form.value.mobile, OTP: this.lists.Randomnumber }).then((res: any) => {\n          let dailog = this.common.dialog.open(OtpComponent, {\n          });\n          dailog.afterClosed().subscribe(data => {\n            if (this.lists.Randomnumber == data) {\n              this.common.ToastMessage(\"Success\", \"Please Enter New Password Successfully\");\n              let passChnage = this.common.dialog.open(ChangepasswordComponent, {});\n              passChnage.afterClosed().subscribe(result => {\n                if (result.Status) {\n                  this.ChangePassword(result.Password);\n                } else {\n                  this.common.ToastMessage(\"Fail\", \"User Cancel Password Change\");\n                }\n              })\n            } else {\n              this.common.ToastMessage(\"Fail\", \"OTP not match please try again.\");\n            }\n          });\n        });\n      } else {\n        this.common.ToastMessage(\"Fail\", \"Invalid User Please Contact Administrator\");\n      }\n    });\n  }\n  ChangePassword(Password) {\n    this.common.PostMethod(\"ForgotPassword\", { mobile: this.form.value.mobile, password: Password }).then((res: any) => {\n      if (res.Status == 1) {\n        this.common.ToastMessage(\"Success\", res.Message);\n        this.gotologin();\n      } else {\n        this.common.ToastMessage(\"Fail\", res.Message);\n      }\n    }).catch();\n  }\n\n  gotologin() {\n    this.router.navigate([\"/authentication/login\"]);\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGhlbnRpY2F0aW9uL2xvY2tzY3JlZW4vbG9ja3NjcmVlbi5jb21wb25lbnQuc2NzcyJ9 */\"","import { CommonService } from './../../Portal/Service/common.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  FormControl\n} from '@angular/forms';\n\n@Component({\n  selector: 'app-lockscreen',\n  templateUrl: './lockscreen.component.html',\n  styleUrls: ['./lockscreen.component.scss']\n})\nexport class LockscreenComponent implements OnInit {\n  public form: FormGroup;\n  lists: any = {};\n  constructor(private fb: FormBuilder, private router: Router, public route: ActivatedRoute, public common: CommonService) { }\n\n  ngOnInit() {\n    this.lists.profile = JSON.parse(localStorage.getItem(\"UserProfile\"));\n    this.form = this.fb.group({\n      password: [null, Validators.compose([Validators.required])]\n    });\n    this.route.queryParams.subscribe((res: any) => {\n      console.log(res);\n      this.lists.LastUrl = res.Url;\n      this.lists.LastUrl = this.lists.LastUrl.replace(\"http://localhost:4200\", \"\");\n      this.lists.LastUrl = this.lists.LastUrl.replace(\"https://easybillpay.co.in\", \"\");\n    });\n  }\n\n  onSubmit() {\n    let pass = localStorage.getItem(\"Typepography\");\n    if (pass == this.form.value.password) {\n\n      this.router.navigate([this.lists.LastUrl]);\n    } else {\n      this.common.ToastMessage('Fail', \"You Entered a Wrong Password try again to login\");\n      this.common.logout();\n    }\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGhlbnRpY2F0aW9uL2xvZ2luL2xvZ2luLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators,\r\n  FormControl,\r\n  AbstractControl\r\n} from '@angular/forms';\r\nimport { CustomValidators } from 'ng2-validation';\r\nimport { CommonService } from '../../Portal/Service/common.service';\r\nimport { OtpComponent } from '../../Portal/Dailogbox/otp/otp.component';\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  public form: FormGroup;\r\n  hide = true;\r\n  lists: any = {};\r\n  constructor(private fb: FormBuilder, private router: Router, public common: CommonService) {\r\n    if (!localStorage.getItem(\"FCMID\")) {\r\n      let ID: any = Math.floor(100000 + Math.random() * 900000);\r\n      localStorage.setItem(\"FCMID\", ID);\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.form = this.fb.group({\r\n      mobile: [null, Validators.compose([Validators.required])],\r\n      password: [null, Validators.compose([Validators.required])]\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    let data = [];\r\n    this.form.value.fcid = localStorage.getItem(\"FCMID\");\r\n\r\n    if(!this.form.value.mobile.match(/^\\d{10}$/)){\r\n      this.form.addControl('email', new FormControl(this.form.value.mobile, Validators.required));\r\n      this.form.removeControl('mobile');\r\n      data = this.form.value;\r\n      this.form.addControl('mobile', new FormControl(this.form.value.email, Validators.required));\r\n      this.form.removeControl('email');\r\n    }else{\r\n      data = this.form.value;\r\n    }\r\n\r\n    this.common.PostMethod(\"auth/signin\", data).then((res: any) => {\r\n      if (res.status == 1) {\r\n            window.localStorage.setItem('UserId', res.data.id);\r\n            window.localStorage.setItem('UserProfile', JSON.stringify(res.data));\r\n            window.localStorage.setItem(\"UserType\", res.data.user_type);\r\n            window.localStorage.setItem(\"Token\", res.token);\r\n            this.common.ToastMessage(\"Success\", res.message);\r\n            setTimeout(()=>{\r\n              this.router.navigate([\"/\"]);\r\n            },1000)\r\n      } else {\r\n        this.common.ToastMessage(\"Info\", res.Message);\r\n      }\r\n    }).catch(y => {\r\n      this.common.ToastMessage(\"Error !\",y.error.message);\r\n    });\r\n  }\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGhlbnRpY2F0aW9uL3JlZ2lzdGVyL3JlZ2lzdGVyLmNvbXBvbmVudC5zY3NzIn0= */\"","import { Component, OnInit} from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { CommonService } from '../../Portal/Service/common.service';\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators,\r\n  FormControl,\r\n  FormControlName,\r\n} from '@angular/forms';\r\nimport { CustomValidators } from 'ng2-validation';\r\n\r\nconst password = new FormControl('', Validators.compose([Validators.required, Validators.minLength(8), Validators.maxLength(30), Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$')]));\r\nconst confirmPassword = new FormControl('', CustomValidators.equalTo(password));\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\n\r\nexport class RegisterComponent implements OnInit {\r\n  lists: any = {};\r\n  isLinear = false;\r\n  firstFormGroup: FormGroup;\r\n  secondFormGroup: FormGroup;\r\n  thirdFormGroup: FormGroup;\r\n  isOptional = false;\r\n  isEditable = false;\r\n  hide = true;\r\n  hide1 = true;\r\n  userTtypelist = [{id:\"1\", name: \"Individual\" }, { id:\"2\", name: \"Corporate\"}]; \r\n  passworderrors = '';\r\n  submitformdata = [];\r\n  statearray = [];\r\n  cityarray = [];\r\n  cityarraycors =[];\r\n  statevalue = '';\r\n  SubPlans =[];\r\n  constructor(private _formBuilder: FormBuilder,public common: CommonService) {\r\n  }\r\n  ngOnInit() {\r\n\r\n    this.firstFormGroup = this._formBuilder.group({\r\n      usertype: ['', Validators.required],\r\n      firstname: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(20), Validators.pattern('^[a-zA-Z ]+$')]],\r\n      lastname: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(20), Validators.pattern('^[a-zA-Z ]+$')]],\r\n      mnumber: ['', [Validators.required, Validators.maxLength(10), Validators.minLength(10), Validators.pattern(/^-?(0|[1-9]\\d*)?$/)]],\r\n      email: ['', [Validators.required, Validators.pattern('[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,3}$')]],\r\n      password: password,\r\n      confirmPassword: confirmPassword,\r\n    });\r\n    this.secondFormGroup = this._formBuilder.group({\r\n      perAddress: ['', Validators.required],\r\n      perState: ['', Validators.required],\r\n      perCity: ['', Validators.required],\r\n      perPincode : ['', [Validators.required, Validators.maxLength(6), Validators.min(100000), Validators.max(999999)]],\r\n      corresAddress: ['', Validators.required],\r\n      corresState: ['', Validators.required],\r\n      corresCity: ['', Validators.required],\r\n      corresPincode : ['', [Validators.required, Validators.maxLength(6), Validators.min(100000), Validators.max(999999)]],\r\n    });\r\n    this.thirdFormGroup = this._formBuilder.group({\r\n      Subscriptionplan: ['', Validators.required],\r\n    });\r\n\r\n    this.GetSubscriptionMaster();\r\n    this.GetStates();\r\n  }\r\n  get firtsForm() {\r\n    return this.firstFormGroup.controls;\r\n  }\r\n  get secondForm() {\r\n    return this.secondFormGroup.controls;\r\n  }\r\n\r\n  AddressCopy(e) {\r\n    if (e.checked) {\r\n      this.secondFormGroup.controls['corresAddress'].setValue(this.secondFormGroup.value.perAddress);\r\n      this.secondFormGroup.controls['corresState'].setValue(this.secondFormGroup.value.perState);\r\n      this.secondFormGroup.controls['corresCity'].setValue(this.secondFormGroup.value.perCity);\r\n      this.secondFormGroup.controls['corresPincode'].setValue(this.secondFormGroup.value.perPincode);\r\n    } else {\r\n      this.secondFormGroup.controls['corresAddress'].setValue('');\r\n      this.secondFormGroup.controls['corresState'].setValue('');\r\n      this.secondFormGroup.controls['corresCity'].setValue('');\r\n      this.secondFormGroup.controls['corresPincode'].setValue('');\r\n    }\r\n  }\r\n  GetSubscriptionMaster(){\r\n    this.common.GetMethod('master/getmaster?master=subscriptionmaster').then((res:any)=>{\r\n      if (res.status == 1) {\r\n        this.SubPlans = res.data;\r\n       }\r\n    }).catch(y => {\r\n      this.common.ToastMessage(\"Error !\",y.error.message);\r\n    });\r\n  }\r\n  GetStates(){\r\n    this.common.PostMethod(\"common/getstates\",{id:101}).then((res:any)=>{\r\n      if (res.status == 1) {\r\n         this.statearray = res.data;        \r\n       }\r\n    }).catch(y => {\r\n      this.common.ToastMessage(\"Error !\",y.error.message);\r\n    });\r\n  }\r\n\r\n  GetCity(){\r\n    let stateid=this.secondFormGroup.value.perState;\r\n   this.common.PostMethod(\"common/getcities\",{id:stateid}).then((res:any)=>{\r\n      if (res.status == 1) {\r\n         this.cityarray = res.data;  \r\n         this.cityarraycors = res.data;     \r\n       }\r\n    }).catch(y => {\r\n      this.common.ToastMessage(\"Error !\",y.error.message);\r\n    });\r\n  }\r\n  GetCityCors(){\r\n    let stateid=this.secondFormGroup.value.corresState;\r\n   this.common.PostMethod(\"common/getcities\",{id:stateid}).then((res:any)=>{\r\n      if (res.status == 1) {\r\n         this.cityarraycors = res.data;   \r\n       }\r\n    }).catch(y => {\r\n      this.common.ToastMessage(\"Error !\",y.error.message);\r\n    });\r\n  }\r\n \r\n  \r\n\r\n  onSubmit() {\r\n    let data={\r\n      user_type:this.firstFormGroup.value.usertype,\r\n      name:this.firstFormGroup.value.firstname+' '+this.firstFormGroup.value.lastname,\r\n      mobile:this.firstFormGroup.value.mnumber,\r\n      email:this.firstFormGroup.value.email,\r\n      password:this.firstFormGroup.value.confirmPassword,\r\n      address:[\r\n        {\r\n        address:this.secondFormGroup.value.perAddress,\r\n        state_id:this.secondFormGroup.value.perState,\r\n        city_id:this.secondFormGroup.value.perCity,\r\n        pincode:this.secondFormGroup.value.perPincode,\r\n        address_type:0, \r\n        status:1\r\n        },\r\n        {\r\n          address:this.secondFormGroup.value.corresAddress,\r\n          state_id:this.secondFormGroup.value.corresState,\r\n          city_id:this.secondFormGroup.value.corresCity,\r\n          pincode:this.secondFormGroup.value.corresPincode,\r\n          address_type:1, \r\n          status:1\r\n          },\r\n      ],\r\n      \r\n      subscription_id:parseInt(this.thirdFormGroup.value.Subscriptionplan),\r\n      fcm_id:localStorage.getItem(\"FCMID\")\r\n    }\r\n    this.common.PostMethod(\"auth/signup\", data).then((res: any) => {\r\n      if (res.status == 1) {\r\n        this.common.ToastMessage(\"Success\", res.message);\r\n       }\r\n    }).catch(y => {\r\n      this.common.ToastMessage(\"Error !\",y.error.message);\r\n    });\r\n\r\n  }\r\n}\r\n"],"sourceRoot":""}